// Code generated by Prisma (prisma@1.33.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  brand: (where?: BrandWhereInput) => Promise<boolean>;
  cart: (where?: CartWhereInput) => Promise<boolean>;
  cartItem: (where?: CartItemWhereInput) => Promise<boolean>;
  category: (where?: CategoryWhereInput) => Promise<boolean>;
  forum: (where?: ForumWhereInput) => Promise<boolean>;
  forumPost: (where?: ForumPostWhereInput) => Promise<boolean>;
  forumPostComment: (where?: ForumPostCommentWhereInput) => Promise<boolean>;
  order: (where?: OrderWhereInput) => Promise<boolean>;
  product: (where?: ProductWhereInput) => Promise<boolean>;
  productImage: (where?: ProductImageWhereInput) => Promise<boolean>;
  productReview: (where?: ProductReviewWhereInput) => Promise<boolean>;
  shop: (where?: ShopWhereInput) => Promise<boolean>;
  shopImage: (where?: ShopImageWhereInput) => Promise<boolean>;
  tag: (where?: TagWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  userImage: (where?: UserImageWhereInput) => Promise<boolean>;
  variant: (where?: VariantWhereInput) => Promise<boolean>;
  orderItem: (where?: orderItemWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  brand: (where: BrandWhereUniqueInput) => BrandNullablePromise;
  brands: (args?: {
    where?: BrandWhereInput;
    orderBy?: BrandOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Brand>;
  brandsConnection: (args?: {
    where?: BrandWhereInput;
    orderBy?: BrandOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BrandConnectionPromise;
  cart: (where: CartWhereUniqueInput) => CartNullablePromise;
  carts: (args?: {
    where?: CartWhereInput;
    orderBy?: CartOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Cart>;
  cartsConnection: (args?: {
    where?: CartWhereInput;
    orderBy?: CartOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CartConnectionPromise;
  cartItem: (where: CartItemWhereUniqueInput) => CartItemNullablePromise;
  cartItems: (args?: {
    where?: CartItemWhereInput;
    orderBy?: CartItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<CartItem>;
  cartItemsConnection: (args?: {
    where?: CartItemWhereInput;
    orderBy?: CartItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CartItemConnectionPromise;
  category: (where: CategoryWhereUniqueInput) => CategoryNullablePromise;
  categories: (args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Category>;
  categoriesConnection: (args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CategoryConnectionPromise;
  forum: (where: ForumWhereUniqueInput) => ForumNullablePromise;
  forums: (args?: {
    where?: ForumWhereInput;
    orderBy?: ForumOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Forum>;
  forumsConnection: (args?: {
    where?: ForumWhereInput;
    orderBy?: ForumOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ForumConnectionPromise;
  forumPost: (where: ForumPostWhereUniqueInput) => ForumPostNullablePromise;
  forumPosts: (args?: {
    where?: ForumPostWhereInput;
    orderBy?: ForumPostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ForumPost>;
  forumPostsConnection: (args?: {
    where?: ForumPostWhereInput;
    orderBy?: ForumPostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ForumPostConnectionPromise;
  forumPostComment: (
    where: ForumPostCommentWhereUniqueInput
  ) => ForumPostCommentNullablePromise;
  forumPostComments: (args?: {
    where?: ForumPostCommentWhereInput;
    orderBy?: ForumPostCommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ForumPostComment>;
  forumPostCommentsConnection: (args?: {
    where?: ForumPostCommentWhereInput;
    orderBy?: ForumPostCommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ForumPostCommentConnectionPromise;
  order: (where: OrderWhereUniqueInput) => OrderNullablePromise;
  orders: (args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Order>;
  ordersConnection: (args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OrderConnectionPromise;
  product: (where: ProductWhereUniqueInput) => ProductNullablePromise;
  products: (args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Product>;
  productsConnection: (args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProductConnectionPromise;
  productImage: (
    where: ProductImageWhereUniqueInput
  ) => ProductImageNullablePromise;
  productImages: (args?: {
    where?: ProductImageWhereInput;
    orderBy?: ProductImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ProductImage>;
  productImagesConnection: (args?: {
    where?: ProductImageWhereInput;
    orderBy?: ProductImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProductImageConnectionPromise;
  productReview: (
    where: ProductReviewWhereUniqueInput
  ) => ProductReviewNullablePromise;
  productReviews: (args?: {
    where?: ProductReviewWhereInput;
    orderBy?: ProductReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ProductReview>;
  productReviewsConnection: (args?: {
    where?: ProductReviewWhereInput;
    orderBy?: ProductReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProductReviewConnectionPromise;
  shop: (where: ShopWhereUniqueInput) => ShopNullablePromise;
  shops: (args?: {
    where?: ShopWhereInput;
    orderBy?: ShopOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Shop>;
  shopsConnection: (args?: {
    where?: ShopWhereInput;
    orderBy?: ShopOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ShopConnectionPromise;
  shopImage: (where: ShopImageWhereUniqueInput) => ShopImageNullablePromise;
  shopImages: (args?: {
    where?: ShopImageWhereInput;
    orderBy?: ShopImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ShopImage>;
  shopImagesConnection: (args?: {
    where?: ShopImageWhereInput;
    orderBy?: ShopImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ShopImageConnectionPromise;
  tag: (where: TagWhereUniqueInput) => TagNullablePromise;
  tags: (args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Tag>;
  tagsConnection: (args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TagConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  userImage: (where: UserImageWhereUniqueInput) => UserImageNullablePromise;
  userImages: (args?: {
    where?: UserImageWhereInput;
    orderBy?: UserImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<UserImage>;
  userImagesConnection: (args?: {
    where?: UserImageWhereInput;
    orderBy?: UserImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserImageConnectionPromise;
  variant: (where: VariantWhereUniqueInput) => VariantNullablePromise;
  variants: (args?: {
    where?: VariantWhereInput;
    orderBy?: VariantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Variant>;
  variantsConnection: (args?: {
    where?: VariantWhereInput;
    orderBy?: VariantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => VariantConnectionPromise;
  orderItem: (where: orderItemWhereUniqueInput) => orderItemNullablePromise;
  orderItems: (args?: {
    where?: orderItemWhereInput;
    orderBy?: orderItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<orderItem>;
  orderItemsConnection: (args?: {
    where?: orderItemWhereInput;
    orderBy?: orderItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => orderItemConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBrand: (data: BrandCreateInput) => BrandPromise;
  updateBrand: (args: {
    data: BrandUpdateInput;
    where: BrandWhereUniqueInput;
  }) => BrandPromise;
  updateManyBrands: (args: {
    data: BrandUpdateManyMutationInput;
    where?: BrandWhereInput;
  }) => BatchPayloadPromise;
  upsertBrand: (args: {
    where: BrandWhereUniqueInput;
    create: BrandCreateInput;
    update: BrandUpdateInput;
  }) => BrandPromise;
  deleteBrand: (where: BrandWhereUniqueInput) => BrandPromise;
  deleteManyBrands: (where?: BrandWhereInput) => BatchPayloadPromise;
  createCart: (data: CartCreateInput) => CartPromise;
  updateCart: (args: {
    data: CartUpdateInput;
    where: CartWhereUniqueInput;
  }) => CartPromise;
  upsertCart: (args: {
    where: CartWhereUniqueInput;
    create: CartCreateInput;
    update: CartUpdateInput;
  }) => CartPromise;
  deleteCart: (where: CartWhereUniqueInput) => CartPromise;
  deleteManyCarts: (where?: CartWhereInput) => BatchPayloadPromise;
  createCartItem: (data: CartItemCreateInput) => CartItemPromise;
  updateCartItem: (args: {
    data: CartItemUpdateInput;
    where: CartItemWhereUniqueInput;
  }) => CartItemPromise;
  updateManyCartItems: (args: {
    data: CartItemUpdateManyMutationInput;
    where?: CartItemWhereInput;
  }) => BatchPayloadPromise;
  upsertCartItem: (args: {
    where: CartItemWhereUniqueInput;
    create: CartItemCreateInput;
    update: CartItemUpdateInput;
  }) => CartItemPromise;
  deleteCartItem: (where: CartItemWhereUniqueInput) => CartItemPromise;
  deleteManyCartItems: (where?: CartItemWhereInput) => BatchPayloadPromise;
  createCategory: (data: CategoryCreateInput) => CategoryPromise;
  updateCategory: (args: {
    data: CategoryUpdateInput;
    where: CategoryWhereUniqueInput;
  }) => CategoryPromise;
  updateManyCategories: (args: {
    data: CategoryUpdateManyMutationInput;
    where?: CategoryWhereInput;
  }) => BatchPayloadPromise;
  upsertCategory: (args: {
    where: CategoryWhereUniqueInput;
    create: CategoryCreateInput;
    update: CategoryUpdateInput;
  }) => CategoryPromise;
  deleteCategory: (where: CategoryWhereUniqueInput) => CategoryPromise;
  deleteManyCategories: (where?: CategoryWhereInput) => BatchPayloadPromise;
  createForum: (data: ForumCreateInput) => ForumPromise;
  updateForum: (args: {
    data: ForumUpdateInput;
    where: ForumWhereUniqueInput;
  }) => ForumPromise;
  updateManyForums: (args: {
    data: ForumUpdateManyMutationInput;
    where?: ForumWhereInput;
  }) => BatchPayloadPromise;
  upsertForum: (args: {
    where: ForumWhereUniqueInput;
    create: ForumCreateInput;
    update: ForumUpdateInput;
  }) => ForumPromise;
  deleteForum: (where: ForumWhereUniqueInput) => ForumPromise;
  deleteManyForums: (where?: ForumWhereInput) => BatchPayloadPromise;
  createForumPost: (data: ForumPostCreateInput) => ForumPostPromise;
  updateForumPost: (args: {
    data: ForumPostUpdateInput;
    where: ForumPostWhereUniqueInput;
  }) => ForumPostPromise;
  updateManyForumPosts: (args: {
    data: ForumPostUpdateManyMutationInput;
    where?: ForumPostWhereInput;
  }) => BatchPayloadPromise;
  upsertForumPost: (args: {
    where: ForumPostWhereUniqueInput;
    create: ForumPostCreateInput;
    update: ForumPostUpdateInput;
  }) => ForumPostPromise;
  deleteForumPost: (where: ForumPostWhereUniqueInput) => ForumPostPromise;
  deleteManyForumPosts: (where?: ForumPostWhereInput) => BatchPayloadPromise;
  createForumPostComment: (
    data: ForumPostCommentCreateInput
  ) => ForumPostCommentPromise;
  updateForumPostComment: (args: {
    data: ForumPostCommentUpdateInput;
    where: ForumPostCommentWhereUniqueInput;
  }) => ForumPostCommentPromise;
  updateManyForumPostComments: (args: {
    data: ForumPostCommentUpdateManyMutationInput;
    where?: ForumPostCommentWhereInput;
  }) => BatchPayloadPromise;
  upsertForumPostComment: (args: {
    where: ForumPostCommentWhereUniqueInput;
    create: ForumPostCommentCreateInput;
    update: ForumPostCommentUpdateInput;
  }) => ForumPostCommentPromise;
  deleteForumPostComment: (
    where: ForumPostCommentWhereUniqueInput
  ) => ForumPostCommentPromise;
  deleteManyForumPostComments: (
    where?: ForumPostCommentWhereInput
  ) => BatchPayloadPromise;
  createOrder: (data: OrderCreateInput) => OrderPromise;
  updateOrder: (args: {
    data: OrderUpdateInput;
    where: OrderWhereUniqueInput;
  }) => OrderPromise;
  updateManyOrders: (args: {
    data: OrderUpdateManyMutationInput;
    where?: OrderWhereInput;
  }) => BatchPayloadPromise;
  upsertOrder: (args: {
    where: OrderWhereUniqueInput;
    create: OrderCreateInput;
    update: OrderUpdateInput;
  }) => OrderPromise;
  deleteOrder: (where: OrderWhereUniqueInput) => OrderPromise;
  deleteManyOrders: (where?: OrderWhereInput) => BatchPayloadPromise;
  createProduct: (data: ProductCreateInput) => ProductPromise;
  updateProduct: (args: {
    data: ProductUpdateInput;
    where: ProductWhereUniqueInput;
  }) => ProductPromise;
  updateManyProducts: (args: {
    data: ProductUpdateManyMutationInput;
    where?: ProductWhereInput;
  }) => BatchPayloadPromise;
  upsertProduct: (args: {
    where: ProductWhereUniqueInput;
    create: ProductCreateInput;
    update: ProductUpdateInput;
  }) => ProductPromise;
  deleteProduct: (where: ProductWhereUniqueInput) => ProductPromise;
  deleteManyProducts: (where?: ProductWhereInput) => BatchPayloadPromise;
  createProductImage: (data: ProductImageCreateInput) => ProductImagePromise;
  updateProductImage: (args: {
    data: ProductImageUpdateInput;
    where: ProductImageWhereUniqueInput;
  }) => ProductImagePromise;
  updateManyProductImages: (args: {
    data: ProductImageUpdateManyMutationInput;
    where?: ProductImageWhereInput;
  }) => BatchPayloadPromise;
  upsertProductImage: (args: {
    where: ProductImageWhereUniqueInput;
    create: ProductImageCreateInput;
    update: ProductImageUpdateInput;
  }) => ProductImagePromise;
  deleteProductImage: (
    where: ProductImageWhereUniqueInput
  ) => ProductImagePromise;
  deleteManyProductImages: (
    where?: ProductImageWhereInput
  ) => BatchPayloadPromise;
  createProductReview: (data: ProductReviewCreateInput) => ProductReviewPromise;
  updateProductReview: (args: {
    data: ProductReviewUpdateInput;
    where: ProductReviewWhereUniqueInput;
  }) => ProductReviewPromise;
  updateManyProductReviews: (args: {
    data: ProductReviewUpdateManyMutationInput;
    where?: ProductReviewWhereInput;
  }) => BatchPayloadPromise;
  upsertProductReview: (args: {
    where: ProductReviewWhereUniqueInput;
    create: ProductReviewCreateInput;
    update: ProductReviewUpdateInput;
  }) => ProductReviewPromise;
  deleteProductReview: (
    where: ProductReviewWhereUniqueInput
  ) => ProductReviewPromise;
  deleteManyProductReviews: (
    where?: ProductReviewWhereInput
  ) => BatchPayloadPromise;
  createShop: (data: ShopCreateInput) => ShopPromise;
  updateShop: (args: {
    data: ShopUpdateInput;
    where: ShopWhereUniqueInput;
  }) => ShopPromise;
  updateManyShops: (args: {
    data: ShopUpdateManyMutationInput;
    where?: ShopWhereInput;
  }) => BatchPayloadPromise;
  upsertShop: (args: {
    where: ShopWhereUniqueInput;
    create: ShopCreateInput;
    update: ShopUpdateInput;
  }) => ShopPromise;
  deleteShop: (where: ShopWhereUniqueInput) => ShopPromise;
  deleteManyShops: (where?: ShopWhereInput) => BatchPayloadPromise;
  createShopImage: (data: ShopImageCreateInput) => ShopImagePromise;
  updateShopImage: (args: {
    data: ShopImageUpdateInput;
    where: ShopImageWhereUniqueInput;
  }) => ShopImagePromise;
  updateManyShopImages: (args: {
    data: ShopImageUpdateManyMutationInput;
    where?: ShopImageWhereInput;
  }) => BatchPayloadPromise;
  upsertShopImage: (args: {
    where: ShopImageWhereUniqueInput;
    create: ShopImageCreateInput;
    update: ShopImageUpdateInput;
  }) => ShopImagePromise;
  deleteShopImage: (where: ShopImageWhereUniqueInput) => ShopImagePromise;
  deleteManyShopImages: (where?: ShopImageWhereInput) => BatchPayloadPromise;
  createTag: (data: TagCreateInput) => TagPromise;
  updateTag: (args: {
    data: TagUpdateInput;
    where: TagWhereUniqueInput;
  }) => TagPromise;
  updateManyTags: (args: {
    data: TagUpdateManyMutationInput;
    where?: TagWhereInput;
  }) => BatchPayloadPromise;
  upsertTag: (args: {
    where: TagWhereUniqueInput;
    create: TagCreateInput;
    update: TagUpdateInput;
  }) => TagPromise;
  deleteTag: (where: TagWhereUniqueInput) => TagPromise;
  deleteManyTags: (where?: TagWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createUserImage: (data: UserImageCreateInput) => UserImagePromise;
  updateUserImage: (args: {
    data: UserImageUpdateInput;
    where: UserImageWhereUniqueInput;
  }) => UserImagePromise;
  updateManyUserImages: (args: {
    data: UserImageUpdateManyMutationInput;
    where?: UserImageWhereInput;
  }) => BatchPayloadPromise;
  upsertUserImage: (args: {
    where: UserImageWhereUniqueInput;
    create: UserImageCreateInput;
    update: UserImageUpdateInput;
  }) => UserImagePromise;
  deleteUserImage: (where: UserImageWhereUniqueInput) => UserImagePromise;
  deleteManyUserImages: (where?: UserImageWhereInput) => BatchPayloadPromise;
  createVariant: (data: VariantCreateInput) => VariantPromise;
  updateVariant: (args: {
    data: VariantUpdateInput;
    where: VariantWhereUniqueInput;
  }) => VariantPromise;
  updateManyVariants: (args: {
    data: VariantUpdateManyMutationInput;
    where?: VariantWhereInput;
  }) => BatchPayloadPromise;
  upsertVariant: (args: {
    where: VariantWhereUniqueInput;
    create: VariantCreateInput;
    update: VariantUpdateInput;
  }) => VariantPromise;
  deleteVariant: (where: VariantWhereUniqueInput) => VariantPromise;
  deleteManyVariants: (where?: VariantWhereInput) => BatchPayloadPromise;
  createorderItem: (data: orderItemCreateInput) => orderItemPromise;
  updateorderItem: (args: {
    data: orderItemUpdateInput;
    where: orderItemWhereUniqueInput;
  }) => orderItemPromise;
  updateManyorderItems: (args: {
    data: orderItemUpdateManyMutationInput;
    where?: orderItemWhereInput;
  }) => BatchPayloadPromise;
  upsertorderItem: (args: {
    where: orderItemWhereUniqueInput;
    create: orderItemCreateInput;
    update: orderItemUpdateInput;
  }) => orderItemPromise;
  deleteorderItem: (where: orderItemWhereUniqueInput) => orderItemPromise;
  deleteManyorderItems: (where?: orderItemWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  brand: (
    where?: BrandSubscriptionWhereInput
  ) => BrandSubscriptionPayloadSubscription;
  cart: (
    where?: CartSubscriptionWhereInput
  ) => CartSubscriptionPayloadSubscription;
  cartItem: (
    where?: CartItemSubscriptionWhereInput
  ) => CartItemSubscriptionPayloadSubscription;
  category: (
    where?: CategorySubscriptionWhereInput
  ) => CategorySubscriptionPayloadSubscription;
  forum: (
    where?: ForumSubscriptionWhereInput
  ) => ForumSubscriptionPayloadSubscription;
  forumPost: (
    where?: ForumPostSubscriptionWhereInput
  ) => ForumPostSubscriptionPayloadSubscription;
  forumPostComment: (
    where?: ForumPostCommentSubscriptionWhereInput
  ) => ForumPostCommentSubscriptionPayloadSubscription;
  order: (
    where?: OrderSubscriptionWhereInput
  ) => OrderSubscriptionPayloadSubscription;
  product: (
    where?: ProductSubscriptionWhereInput
  ) => ProductSubscriptionPayloadSubscription;
  productImage: (
    where?: ProductImageSubscriptionWhereInput
  ) => ProductImageSubscriptionPayloadSubscription;
  productReview: (
    where?: ProductReviewSubscriptionWhereInput
  ) => ProductReviewSubscriptionPayloadSubscription;
  shop: (
    where?: ShopSubscriptionWhereInput
  ) => ShopSubscriptionPayloadSubscription;
  shopImage: (
    where?: ShopImageSubscriptionWhereInput
  ) => ShopImageSubscriptionPayloadSubscription;
  tag: (
    where?: TagSubscriptionWhereInput
  ) => TagSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  userImage: (
    where?: UserImageSubscriptionWhereInput
  ) => UserImageSubscriptionPayloadSubscription;
  variant: (
    where?: VariantSubscriptionWhereInput
  ) => VariantSubscriptionPayloadSubscription;
  orderItem: (
    where?: orderItemSubscriptionWhereInput
  ) => orderItemSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ForumPostType = "POST" | "MEDIA" | "LINK";

export type ProductOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "price_ASC"
  | "price_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CategoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type TagOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProductImageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "imageUrl_ASC"
  | "imageUrl_DESC"
  | "largeImageUrl_ASC"
  | "largeImageUrl_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firebaseId_ASC"
  | "firebaseId_DESC"
  | "email_ASC"
  | "email_DESC"
  | "name_ASC"
  | "name_DESC"
  | "username_ASC"
  | "username_DESC"
  | "profilePic_ASC"
  | "profilePic_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "isAnonymous_ASC"
  | "isAnonymous_DESC"
  | "emailVerified_ASC"
  | "emailVerified_DESC";

export type ShopOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "category_ASC"
  | "category_DESC"
  | "live_ASC"
  | "live_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserImageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "imageUrl_ASC"
  | "imageUrl_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProductReviewOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "rating_ASC"
  | "rating_DESC"
  | "review_ASC"
  | "review_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CartItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "quantity_ASC"
  | "quantity_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ForumPostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "title_ASC"
  | "title_DESC"
  | "content_ASC"
  | "content_DESC"
  | "type_ASC"
  | "type_DESC";

export type ForumPostCommentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "comment_ASC"
  | "comment_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ForumOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "avatarPic_ASC"
  | "avatarPic_DESC"
  | "coverPic_ASC"
  | "coverPic_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ShopImageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "imageUrl_ASC"
  | "imageUrl_DESC"
  | "largeImageUrl_ASC"
  | "largeImageUrl_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type VariantOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type BrandOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CartOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type orderItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "price_ASC"
  | "price_DESC"
  | "quantity_ASC"
  | "quantity_DESC"
  | "imageUrl_ASC"
  | "imageUrl_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type OrderOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "total_ASC"
  | "total_DESC"
  | "paymentId_ASC"
  | "paymentId_DESC"
  | "PayerID_ASC"
  | "PayerID_DESC"
  | "imageUrl_ASC"
  | "imageUrl_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type BrandWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface ProductWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  price?: Maybe<String>;
  price_not?: Maybe<String>;
  price_in?: Maybe<String[] | String>;
  price_not_in?: Maybe<String[] | String>;
  price_lt?: Maybe<String>;
  price_lte?: Maybe<String>;
  price_gt?: Maybe<String>;
  price_gte?: Maybe<String>;
  price_contains?: Maybe<String>;
  price_not_contains?: Maybe<String>;
  price_starts_with?: Maybe<String>;
  price_not_starts_with?: Maybe<String>;
  price_ends_with?: Maybe<String>;
  price_not_ends_with?: Maybe<String>;
  categories_every?: Maybe<CategoryWhereInput>;
  categories_some?: Maybe<CategoryWhereInput>;
  categories_none?: Maybe<CategoryWhereInput>;
  brand?: Maybe<BrandWhereInput>;
  tags_every?: Maybe<TagWhereInput>;
  tags_some?: Maybe<TagWhereInput>;
  tags_none?: Maybe<TagWhereInput>;
  images_every?: Maybe<ProductImageWhereInput>;
  images_some?: Maybe<ProductImageWhereInput>;
  images_none?: Maybe<ProductImageWhereInput>;
  shop?: Maybe<ShopWhereInput>;
  variants_every?: Maybe<VariantWhereInput>;
  variants_some?: Maybe<VariantWhereInput>;
  variants_none?: Maybe<VariantWhereInput>;
  reviews_every?: Maybe<ProductReviewWhereInput>;
  reviews_some?: Maybe<ProductReviewWhereInput>;
  reviews_none?: Maybe<ProductReviewWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ProductWhereInput[] | ProductWhereInput>;
  OR?: Maybe<ProductWhereInput[] | ProductWhereInput>;
  NOT?: Maybe<ProductWhereInput[] | ProductWhereInput>;
}

export interface CategoryWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  product_every?: Maybe<ProductWhereInput>;
  product_some?: Maybe<ProductWhereInput>;
  product_none?: Maybe<ProductWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CategoryWhereInput[] | CategoryWhereInput>;
  OR?: Maybe<CategoryWhereInput[] | CategoryWhereInput>;
  NOT?: Maybe<CategoryWhereInput[] | CategoryWhereInput>;
}

export interface BrandWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  products_every?: Maybe<ProductWhereInput>;
  products_some?: Maybe<ProductWhereInput>;
  products_none?: Maybe<ProductWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<BrandWhereInput[] | BrandWhereInput>;
  OR?: Maybe<BrandWhereInput[] | BrandWhereInput>;
  NOT?: Maybe<BrandWhereInput[] | BrandWhereInput>;
}

export interface TagWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  products_every?: Maybe<ProductWhereInput>;
  products_some?: Maybe<ProductWhereInput>;
  products_none?: Maybe<ProductWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TagWhereInput[] | TagWhereInput>;
  OR?: Maybe<TagWhereInput[] | TagWhereInput>;
  NOT?: Maybe<TagWhereInput[] | TagWhereInput>;
}

export interface ProductImageWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  imageUrl?: Maybe<String>;
  imageUrl_not?: Maybe<String>;
  imageUrl_in?: Maybe<String[] | String>;
  imageUrl_not_in?: Maybe<String[] | String>;
  imageUrl_lt?: Maybe<String>;
  imageUrl_lte?: Maybe<String>;
  imageUrl_gt?: Maybe<String>;
  imageUrl_gte?: Maybe<String>;
  imageUrl_contains?: Maybe<String>;
  imageUrl_not_contains?: Maybe<String>;
  imageUrl_starts_with?: Maybe<String>;
  imageUrl_not_starts_with?: Maybe<String>;
  imageUrl_ends_with?: Maybe<String>;
  imageUrl_not_ends_with?: Maybe<String>;
  largeImageUrl?: Maybe<String>;
  largeImageUrl_not?: Maybe<String>;
  largeImageUrl_in?: Maybe<String[] | String>;
  largeImageUrl_not_in?: Maybe<String[] | String>;
  largeImageUrl_lt?: Maybe<String>;
  largeImageUrl_lte?: Maybe<String>;
  largeImageUrl_gt?: Maybe<String>;
  largeImageUrl_gte?: Maybe<String>;
  largeImageUrl_contains?: Maybe<String>;
  largeImageUrl_not_contains?: Maybe<String>;
  largeImageUrl_starts_with?: Maybe<String>;
  largeImageUrl_not_starts_with?: Maybe<String>;
  largeImageUrl_ends_with?: Maybe<String>;
  largeImageUrl_not_ends_with?: Maybe<String>;
  product?: Maybe<ProductWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ProductImageWhereInput[] | ProductImageWhereInput>;
  OR?: Maybe<ProductImageWhereInput[] | ProductImageWhereInput>;
  NOT?: Maybe<ProductImageWhereInput[] | ProductImageWhereInput>;
}

export interface ShopWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  category?: Maybe<String>;
  category_not?: Maybe<String>;
  category_in?: Maybe<String[] | String>;
  category_not_in?: Maybe<String[] | String>;
  category_lt?: Maybe<String>;
  category_lte?: Maybe<String>;
  category_gt?: Maybe<String>;
  category_gte?: Maybe<String>;
  category_contains?: Maybe<String>;
  category_not_contains?: Maybe<String>;
  category_starts_with?: Maybe<String>;
  category_not_starts_with?: Maybe<String>;
  category_ends_with?: Maybe<String>;
  category_not_ends_with?: Maybe<String>;
  live?: Maybe<Boolean>;
  live_not?: Maybe<Boolean>;
  owners_every?: Maybe<UserWhereInput>;
  owners_some?: Maybe<UserWhereInput>;
  owners_none?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  images_every?: Maybe<ShopImageWhereInput>;
  images_some?: Maybe<ShopImageWhereInput>;
  images_none?: Maybe<ShopImageWhereInput>;
  products_every?: Maybe<ProductWhereInput>;
  products_some?: Maybe<ProductWhereInput>;
  products_none?: Maybe<ProductWhereInput>;
  AND?: Maybe<ShopWhereInput[] | ShopWhereInput>;
  OR?: Maybe<ShopWhereInput[] | ShopWhereInput>;
  NOT?: Maybe<ShopWhereInput[] | ShopWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firebaseId?: Maybe<String>;
  firebaseId_not?: Maybe<String>;
  firebaseId_in?: Maybe<String[] | String>;
  firebaseId_not_in?: Maybe<String[] | String>;
  firebaseId_lt?: Maybe<String>;
  firebaseId_lte?: Maybe<String>;
  firebaseId_gt?: Maybe<String>;
  firebaseId_gte?: Maybe<String>;
  firebaseId_contains?: Maybe<String>;
  firebaseId_not_contains?: Maybe<String>;
  firebaseId_starts_with?: Maybe<String>;
  firebaseId_not_starts_with?: Maybe<String>;
  firebaseId_ends_with?: Maybe<String>;
  firebaseId_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  profilePic?: Maybe<String>;
  profilePic_not?: Maybe<String>;
  profilePic_in?: Maybe<String[] | String>;
  profilePic_not_in?: Maybe<String[] | String>;
  profilePic_lt?: Maybe<String>;
  profilePic_lte?: Maybe<String>;
  profilePic_gt?: Maybe<String>;
  profilePic_gte?: Maybe<String>;
  profilePic_contains?: Maybe<String>;
  profilePic_not_contains?: Maybe<String>;
  profilePic_starts_with?: Maybe<String>;
  profilePic_not_starts_with?: Maybe<String>;
  profilePic_ends_with?: Maybe<String>;
  profilePic_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  isAnonymous?: Maybe<Boolean>;
  isAnonymous_not?: Maybe<Boolean>;
  emailVerified?: Maybe<Boolean>;
  emailVerified_not?: Maybe<Boolean>;
  shops_every?: Maybe<ShopWhereInput>;
  shops_some?: Maybe<ShopWhereInput>;
  shops_none?: Maybe<ShopWhereInput>;
  images_every?: Maybe<UserImageWhereInput>;
  images_some?: Maybe<UserImageWhereInput>;
  images_none?: Maybe<UserImageWhereInput>;
  productReviews_every?: Maybe<ProductReviewWhereInput>;
  productReviews_some?: Maybe<ProductReviewWhereInput>;
  productReviews_none?: Maybe<ProductReviewWhereInput>;
  cartItems?: Maybe<CartWhereInput>;
  forumposts_every?: Maybe<ForumPostWhereInput>;
  forumposts_some?: Maybe<ForumPostWhereInput>;
  forumposts_none?: Maybe<ForumPostWhereInput>;
  forums_every?: Maybe<ForumWhereInput>;
  forums_some?: Maybe<ForumWhereInput>;
  forums_none?: Maybe<ForumWhereInput>;
  postComments_every?: Maybe<ForumPostCommentWhereInput>;
  postComments_some?: Maybe<ForumPostCommentWhereInput>;
  postComments_none?: Maybe<ForumPostCommentWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface UserImageWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  imageUrl?: Maybe<String>;
  imageUrl_not?: Maybe<String>;
  imageUrl_in?: Maybe<String[] | String>;
  imageUrl_not_in?: Maybe<String[] | String>;
  imageUrl_lt?: Maybe<String>;
  imageUrl_lte?: Maybe<String>;
  imageUrl_gt?: Maybe<String>;
  imageUrl_gte?: Maybe<String>;
  imageUrl_contains?: Maybe<String>;
  imageUrl_not_contains?: Maybe<String>;
  imageUrl_starts_with?: Maybe<String>;
  imageUrl_not_starts_with?: Maybe<String>;
  imageUrl_ends_with?: Maybe<String>;
  imageUrl_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserImageWhereInput[] | UserImageWhereInput>;
  OR?: Maybe<UserImageWhereInput[] | UserImageWhereInput>;
  NOT?: Maybe<UserImageWhereInput[] | UserImageWhereInput>;
}

export interface ProductReviewWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  product?: Maybe<ProductWhereInput>;
  rating?: Maybe<Int>;
  rating_not?: Maybe<Int>;
  rating_in?: Maybe<Int[] | Int>;
  rating_not_in?: Maybe<Int[] | Int>;
  rating_lt?: Maybe<Int>;
  rating_lte?: Maybe<Int>;
  rating_gt?: Maybe<Int>;
  rating_gte?: Maybe<Int>;
  review?: Maybe<String>;
  review_not?: Maybe<String>;
  review_in?: Maybe<String[] | String>;
  review_not_in?: Maybe<String[] | String>;
  review_lt?: Maybe<String>;
  review_lte?: Maybe<String>;
  review_gt?: Maybe<String>;
  review_gte?: Maybe<String>;
  review_contains?: Maybe<String>;
  review_not_contains?: Maybe<String>;
  review_starts_with?: Maybe<String>;
  review_not_starts_with?: Maybe<String>;
  review_ends_with?: Maybe<String>;
  review_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ProductReviewWhereInput[] | ProductReviewWhereInput>;
  OR?: Maybe<ProductReviewWhereInput[] | ProductReviewWhereInput>;
  NOT?: Maybe<ProductReviewWhereInput[] | ProductReviewWhereInput>;
}

export interface CartWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  items_every?: Maybe<CartItemWhereInput>;
  items_some?: Maybe<CartItemWhereInput>;
  items_none?: Maybe<CartItemWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CartWhereInput[] | CartWhereInput>;
  OR?: Maybe<CartWhereInput[] | CartWhereInput>;
  NOT?: Maybe<CartWhereInput[] | CartWhereInput>;
}

export interface CartItemWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  product?: Maybe<ProductWhereInput>;
  quantity?: Maybe<Int>;
  quantity_not?: Maybe<Int>;
  quantity_in?: Maybe<Int[] | Int>;
  quantity_not_in?: Maybe<Int[] | Int>;
  quantity_lt?: Maybe<Int>;
  quantity_lte?: Maybe<Int>;
  quantity_gt?: Maybe<Int>;
  quantity_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  cart?: Maybe<CartWhereInput>;
  AND?: Maybe<CartItemWhereInput[] | CartItemWhereInput>;
  OR?: Maybe<CartItemWhereInput[] | CartItemWhereInput>;
  NOT?: Maybe<CartItemWhereInput[] | CartItemWhereInput>;
}

export interface ForumPostWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  postedBy?: Maybe<UserWhereInput>;
  forum?: Maybe<ForumWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  type?: Maybe<ForumPostType>;
  type_not?: Maybe<ForumPostType>;
  type_in?: Maybe<ForumPostType[] | ForumPostType>;
  type_not_in?: Maybe<ForumPostType[] | ForumPostType>;
  comments_every?: Maybe<ForumPostCommentWhereInput>;
  comments_some?: Maybe<ForumPostCommentWhereInput>;
  comments_none?: Maybe<ForumPostCommentWhereInput>;
  AND?: Maybe<ForumPostWhereInput[] | ForumPostWhereInput>;
  OR?: Maybe<ForumPostWhereInput[] | ForumPostWhereInput>;
  NOT?: Maybe<ForumPostWhereInput[] | ForumPostWhereInput>;
}

export interface ForumWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  avatarPic?: Maybe<String>;
  avatarPic_not?: Maybe<String>;
  avatarPic_in?: Maybe<String[] | String>;
  avatarPic_not_in?: Maybe<String[] | String>;
  avatarPic_lt?: Maybe<String>;
  avatarPic_lte?: Maybe<String>;
  avatarPic_gt?: Maybe<String>;
  avatarPic_gte?: Maybe<String>;
  avatarPic_contains?: Maybe<String>;
  avatarPic_not_contains?: Maybe<String>;
  avatarPic_starts_with?: Maybe<String>;
  avatarPic_not_starts_with?: Maybe<String>;
  avatarPic_ends_with?: Maybe<String>;
  avatarPic_not_ends_with?: Maybe<String>;
  coverPic?: Maybe<String>;
  coverPic_not?: Maybe<String>;
  coverPic_in?: Maybe<String[] | String>;
  coverPic_not_in?: Maybe<String[] | String>;
  coverPic_lt?: Maybe<String>;
  coverPic_lte?: Maybe<String>;
  coverPic_gt?: Maybe<String>;
  coverPic_gte?: Maybe<String>;
  coverPic_contains?: Maybe<String>;
  coverPic_not_contains?: Maybe<String>;
  coverPic_starts_with?: Maybe<String>;
  coverPic_not_starts_with?: Maybe<String>;
  coverPic_ends_with?: Maybe<String>;
  coverPic_not_ends_with?: Maybe<String>;
  members_every?: Maybe<UserWhereInput>;
  members_some?: Maybe<UserWhereInput>;
  members_none?: Maybe<UserWhereInput>;
  posts_every?: Maybe<ForumPostWhereInput>;
  posts_some?: Maybe<ForumPostWhereInput>;
  posts_none?: Maybe<ForumPostWhereInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ForumWhereInput[] | ForumWhereInput>;
  OR?: Maybe<ForumWhereInput[] | ForumWhereInput>;
  NOT?: Maybe<ForumWhereInput[] | ForumWhereInput>;
}

export interface ForumPostCommentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  forumPost?: Maybe<ForumPostWhereInput>;
  comment?: Maybe<String>;
  comment_not?: Maybe<String>;
  comment_in?: Maybe<String[] | String>;
  comment_not_in?: Maybe<String[] | String>;
  comment_lt?: Maybe<String>;
  comment_lte?: Maybe<String>;
  comment_gt?: Maybe<String>;
  comment_gte?: Maybe<String>;
  comment_contains?: Maybe<String>;
  comment_not_contains?: Maybe<String>;
  comment_starts_with?: Maybe<String>;
  comment_not_starts_with?: Maybe<String>;
  comment_ends_with?: Maybe<String>;
  comment_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ForumPostCommentWhereInput[] | ForumPostCommentWhereInput>;
  OR?: Maybe<ForumPostCommentWhereInput[] | ForumPostCommentWhereInput>;
  NOT?: Maybe<ForumPostCommentWhereInput[] | ForumPostCommentWhereInput>;
}

export interface ShopImageWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  imageUrl?: Maybe<String>;
  imageUrl_not?: Maybe<String>;
  imageUrl_in?: Maybe<String[] | String>;
  imageUrl_not_in?: Maybe<String[] | String>;
  imageUrl_lt?: Maybe<String>;
  imageUrl_lte?: Maybe<String>;
  imageUrl_gt?: Maybe<String>;
  imageUrl_gte?: Maybe<String>;
  imageUrl_contains?: Maybe<String>;
  imageUrl_not_contains?: Maybe<String>;
  imageUrl_starts_with?: Maybe<String>;
  imageUrl_not_starts_with?: Maybe<String>;
  imageUrl_ends_with?: Maybe<String>;
  imageUrl_not_ends_with?: Maybe<String>;
  largeImageUrl?: Maybe<String>;
  largeImageUrl_not?: Maybe<String>;
  largeImageUrl_in?: Maybe<String[] | String>;
  largeImageUrl_not_in?: Maybe<String[] | String>;
  largeImageUrl_lt?: Maybe<String>;
  largeImageUrl_lte?: Maybe<String>;
  largeImageUrl_gt?: Maybe<String>;
  largeImageUrl_gte?: Maybe<String>;
  largeImageUrl_contains?: Maybe<String>;
  largeImageUrl_not_contains?: Maybe<String>;
  largeImageUrl_starts_with?: Maybe<String>;
  largeImageUrl_not_starts_with?: Maybe<String>;
  largeImageUrl_ends_with?: Maybe<String>;
  largeImageUrl_not_ends_with?: Maybe<String>;
  shop?: Maybe<ShopWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ShopImageWhereInput[] | ShopImageWhereInput>;
  OR?: Maybe<ShopImageWhereInput[] | ShopImageWhereInput>;
  NOT?: Maybe<ShopImageWhereInput[] | ShopImageWhereInput>;
}

export interface VariantWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  product?: Maybe<ProductWhereInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<VariantWhereInput[] | VariantWhereInput>;
  OR?: Maybe<VariantWhereInput[] | VariantWhereInput>;
  NOT?: Maybe<VariantWhereInput[] | VariantWhereInput>;
}

export type CartWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type CartItemWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type CategoryWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export type ForumWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export type ForumPostWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ForumPostCommentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type OrderWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface orderItemWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  price?: Maybe<String>;
  price_not?: Maybe<String>;
  price_in?: Maybe<String[] | String>;
  price_not_in?: Maybe<String[] | String>;
  price_lt?: Maybe<String>;
  price_lte?: Maybe<String>;
  price_gt?: Maybe<String>;
  price_gte?: Maybe<String>;
  price_contains?: Maybe<String>;
  price_not_contains?: Maybe<String>;
  price_starts_with?: Maybe<String>;
  price_not_starts_with?: Maybe<String>;
  price_ends_with?: Maybe<String>;
  price_not_ends_with?: Maybe<String>;
  quantity?: Maybe<Int>;
  quantity_not?: Maybe<Int>;
  quantity_in?: Maybe<Int[] | Int>;
  quantity_not_in?: Maybe<Int[] | Int>;
  quantity_lt?: Maybe<Int>;
  quantity_lte?: Maybe<Int>;
  quantity_gt?: Maybe<Int>;
  quantity_gte?: Maybe<Int>;
  imageUrl?: Maybe<String>;
  imageUrl_not?: Maybe<String>;
  imageUrl_in?: Maybe<String[] | String>;
  imageUrl_not_in?: Maybe<String[] | String>;
  imageUrl_lt?: Maybe<String>;
  imageUrl_lte?: Maybe<String>;
  imageUrl_gt?: Maybe<String>;
  imageUrl_gte?: Maybe<String>;
  imageUrl_contains?: Maybe<String>;
  imageUrl_not_contains?: Maybe<String>;
  imageUrl_starts_with?: Maybe<String>;
  imageUrl_not_starts_with?: Maybe<String>;
  imageUrl_ends_with?: Maybe<String>;
  imageUrl_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<orderItemWhereInput[] | orderItemWhereInput>;
  OR?: Maybe<orderItemWhereInput[] | orderItemWhereInput>;
  NOT?: Maybe<orderItemWhereInput[] | orderItemWhereInput>;
}

export interface OrderWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  items_every?: Maybe<orderItemWhereInput>;
  items_some?: Maybe<orderItemWhereInput>;
  items_none?: Maybe<orderItemWhereInput>;
  total?: Maybe<String>;
  total_not?: Maybe<String>;
  total_in?: Maybe<String[] | String>;
  total_not_in?: Maybe<String[] | String>;
  total_lt?: Maybe<String>;
  total_lte?: Maybe<String>;
  total_gt?: Maybe<String>;
  total_gte?: Maybe<String>;
  total_contains?: Maybe<String>;
  total_not_contains?: Maybe<String>;
  total_starts_with?: Maybe<String>;
  total_not_starts_with?: Maybe<String>;
  total_ends_with?: Maybe<String>;
  total_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  paymentId?: Maybe<String>;
  paymentId_not?: Maybe<String>;
  paymentId_in?: Maybe<String[] | String>;
  paymentId_not_in?: Maybe<String[] | String>;
  paymentId_lt?: Maybe<String>;
  paymentId_lte?: Maybe<String>;
  paymentId_gt?: Maybe<String>;
  paymentId_gte?: Maybe<String>;
  paymentId_contains?: Maybe<String>;
  paymentId_not_contains?: Maybe<String>;
  paymentId_starts_with?: Maybe<String>;
  paymentId_not_starts_with?: Maybe<String>;
  paymentId_ends_with?: Maybe<String>;
  paymentId_not_ends_with?: Maybe<String>;
  PayerID?: Maybe<String>;
  PayerID_not?: Maybe<String>;
  PayerID_in?: Maybe<String[] | String>;
  PayerID_not_in?: Maybe<String[] | String>;
  PayerID_lt?: Maybe<String>;
  PayerID_lte?: Maybe<String>;
  PayerID_gt?: Maybe<String>;
  PayerID_gte?: Maybe<String>;
  PayerID_contains?: Maybe<String>;
  PayerID_not_contains?: Maybe<String>;
  PayerID_starts_with?: Maybe<String>;
  PayerID_not_starts_with?: Maybe<String>;
  PayerID_ends_with?: Maybe<String>;
  PayerID_not_ends_with?: Maybe<String>;
  imageUrl?: Maybe<String>;
  imageUrl_not?: Maybe<String>;
  imageUrl_in?: Maybe<String[] | String>;
  imageUrl_not_in?: Maybe<String[] | String>;
  imageUrl_lt?: Maybe<String>;
  imageUrl_lte?: Maybe<String>;
  imageUrl_gt?: Maybe<String>;
  imageUrl_gte?: Maybe<String>;
  imageUrl_contains?: Maybe<String>;
  imageUrl_not_contains?: Maybe<String>;
  imageUrl_starts_with?: Maybe<String>;
  imageUrl_not_starts_with?: Maybe<String>;
  imageUrl_ends_with?: Maybe<String>;
  imageUrl_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<OrderWhereInput[] | OrderWhereInput>;
  OR?: Maybe<OrderWhereInput[] | OrderWhereInput>;
  NOT?: Maybe<OrderWhereInput[] | OrderWhereInput>;
}

export type ProductWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ProductImageWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ProductReviewWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ShopWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export type ShopImageWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type TagWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  firebaseId?: Maybe<String>;
  email?: Maybe<String>;
  username?: Maybe<String>;
}>;

export type UserImageWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type VariantWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type orderItemWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface BrandCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  products?: Maybe<ProductCreateManyWithoutBrandInput>;
}

export interface ProductCreateManyWithoutBrandInput {
  create?: Maybe<
    ProductCreateWithoutBrandInput[] | ProductCreateWithoutBrandInput
  >;
  connect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
}

export interface ProductCreateWithoutBrandInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  price: String;
  categories?: Maybe<CategoryCreateManyWithoutProductInput>;
  tags?: Maybe<TagCreateManyWithoutProductsInput>;
  images?: Maybe<ProductImageCreateManyWithoutProductInput>;
  shop: ShopCreateOneWithoutProductsInput;
  variants?: Maybe<VariantCreateManyWithoutProductInput>;
  reviews?: Maybe<ProductReviewCreateManyWithoutProductInput>;
}

export interface CategoryCreateManyWithoutProductInput {
  create?: Maybe<
    CategoryCreateWithoutProductInput[] | CategoryCreateWithoutProductInput
  >;
  connect?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
}

export interface CategoryCreateWithoutProductInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface TagCreateManyWithoutProductsInput {
  create?: Maybe<
    TagCreateWithoutProductsInput[] | TagCreateWithoutProductsInput
  >;
  connect?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
}

export interface TagCreateWithoutProductsInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface ProductImageCreateManyWithoutProductInput {
  create?: Maybe<
    | ProductImageCreateWithoutProductInput[]
    | ProductImageCreateWithoutProductInput
  >;
  connect?: Maybe<
    ProductImageWhereUniqueInput[] | ProductImageWhereUniqueInput
  >;
}

export interface ProductImageCreateWithoutProductInput {
  id?: Maybe<ID_Input>;
  imageUrl: String;
  largeImageUrl?: Maybe<String>;
}

export interface ShopCreateOneWithoutProductsInput {
  create?: Maybe<ShopCreateWithoutProductsInput>;
  connect?: Maybe<ShopWhereUniqueInput>;
}

export interface ShopCreateWithoutProductsInput {
  id?: Maybe<ID_Input>;
  name: String;
  description: String;
  category: String;
  live?: Maybe<Boolean>;
  owners?: Maybe<UserCreateManyWithoutShopsInput>;
  images?: Maybe<ShopImageCreateManyWithoutShopInput>;
}

export interface UserCreateManyWithoutShopsInput {
  create?: Maybe<UserCreateWithoutShopsInput[] | UserCreateWithoutShopsInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutShopsInput {
  id?: Maybe<ID_Input>;
  firebaseId: String;
  email?: Maybe<String>;
  name: String;
  username: String;
  profilePic?: Maybe<String>;
  isAnonymous?: Maybe<Boolean>;
  emailVerified?: Maybe<Boolean>;
  images?: Maybe<UserImageCreateManyWithoutUserInput>;
  productReviews?: Maybe<ProductReviewCreateManyWithoutUserInput>;
  cartItems?: Maybe<CartCreateOneWithoutUserInput>;
  forumposts?: Maybe<ForumPostCreateManyWithoutPostedByInput>;
  forums?: Maybe<ForumCreateManyWithoutMembersInput>;
  postComments?: Maybe<ForumPostCommentCreateManyWithoutUserInput>;
}

export interface UserImageCreateManyWithoutUserInput {
  create?: Maybe<
    UserImageCreateWithoutUserInput[] | UserImageCreateWithoutUserInput
  >;
  connect?: Maybe<UserImageWhereUniqueInput[] | UserImageWhereUniqueInput>;
}

export interface UserImageCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  imageUrl: String;
}

export interface ProductReviewCreateManyWithoutUserInput {
  create?: Maybe<
    ProductReviewCreateWithoutUserInput[] | ProductReviewCreateWithoutUserInput
  >;
  connect?: Maybe<
    ProductReviewWhereUniqueInput[] | ProductReviewWhereUniqueInput
  >;
}

export interface ProductReviewCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  product: ProductCreateOneWithoutReviewsInput;
  rating: Int;
  review?: Maybe<String>;
}

export interface ProductCreateOneWithoutReviewsInput {
  create?: Maybe<ProductCreateWithoutReviewsInput>;
  connect?: Maybe<ProductWhereUniqueInput>;
}

export interface ProductCreateWithoutReviewsInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  price: String;
  categories?: Maybe<CategoryCreateManyWithoutProductInput>;
  brand?: Maybe<BrandCreateOneWithoutProductsInput>;
  tags?: Maybe<TagCreateManyWithoutProductsInput>;
  images?: Maybe<ProductImageCreateManyWithoutProductInput>;
  shop: ShopCreateOneWithoutProductsInput;
  variants?: Maybe<VariantCreateManyWithoutProductInput>;
}

export interface BrandCreateOneWithoutProductsInput {
  create?: Maybe<BrandCreateWithoutProductsInput>;
  connect?: Maybe<BrandWhereUniqueInput>;
}

export interface BrandCreateWithoutProductsInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface VariantCreateManyWithoutProductInput {
  create?: Maybe<
    VariantCreateWithoutProductInput[] | VariantCreateWithoutProductInput
  >;
  connect?: Maybe<VariantWhereUniqueInput[] | VariantWhereUniqueInput>;
}

export interface VariantCreateWithoutProductInput {
  id?: Maybe<ID_Input>;
  name: String;
  values?: Maybe<VariantCreatevaluesInput>;
}

export interface VariantCreatevaluesInput {
  set?: Maybe<String[] | String>;
}

export interface CartCreateOneWithoutUserInput {
  create?: Maybe<CartCreateWithoutUserInput>;
  connect?: Maybe<CartWhereUniqueInput>;
}

export interface CartCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  items?: Maybe<CartItemCreateManyWithoutCartInput>;
}

export interface CartItemCreateManyWithoutCartInput {
  create?: Maybe<
    CartItemCreateWithoutCartInput[] | CartItemCreateWithoutCartInput
  >;
  connect?: Maybe<CartItemWhereUniqueInput[] | CartItemWhereUniqueInput>;
}

export interface CartItemCreateWithoutCartInput {
  id?: Maybe<ID_Input>;
  product: ProductCreateOneInput;
  quantity: Int;
  variants?: Maybe<CartItemCreatevariantsInput>;
}

export interface ProductCreateOneInput {
  create?: Maybe<ProductCreateInput>;
  connect?: Maybe<ProductWhereUniqueInput>;
}

export interface ProductCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  price: String;
  categories?: Maybe<CategoryCreateManyWithoutProductInput>;
  brand?: Maybe<BrandCreateOneWithoutProductsInput>;
  tags?: Maybe<TagCreateManyWithoutProductsInput>;
  images?: Maybe<ProductImageCreateManyWithoutProductInput>;
  shop: ShopCreateOneWithoutProductsInput;
  variants?: Maybe<VariantCreateManyWithoutProductInput>;
  reviews?: Maybe<ProductReviewCreateManyWithoutProductInput>;
}

export interface ProductReviewCreateManyWithoutProductInput {
  create?: Maybe<
    | ProductReviewCreateWithoutProductInput[]
    | ProductReviewCreateWithoutProductInput
  >;
  connect?: Maybe<
    ProductReviewWhereUniqueInput[] | ProductReviewWhereUniqueInput
  >;
}

export interface ProductReviewCreateWithoutProductInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutProductReviewsInput;
  rating: Int;
  review?: Maybe<String>;
}

export interface UserCreateOneWithoutProductReviewsInput {
  create?: Maybe<UserCreateWithoutProductReviewsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutProductReviewsInput {
  id?: Maybe<ID_Input>;
  firebaseId: String;
  email?: Maybe<String>;
  name: String;
  username: String;
  profilePic?: Maybe<String>;
  isAnonymous?: Maybe<Boolean>;
  emailVerified?: Maybe<Boolean>;
  shops?: Maybe<ShopCreateManyWithoutOwnersInput>;
  images?: Maybe<UserImageCreateManyWithoutUserInput>;
  cartItems?: Maybe<CartCreateOneWithoutUserInput>;
  forumposts?: Maybe<ForumPostCreateManyWithoutPostedByInput>;
  forums?: Maybe<ForumCreateManyWithoutMembersInput>;
  postComments?: Maybe<ForumPostCommentCreateManyWithoutUserInput>;
}

export interface ShopCreateManyWithoutOwnersInput {
  create?: Maybe<ShopCreateWithoutOwnersInput[] | ShopCreateWithoutOwnersInput>;
  connect?: Maybe<ShopWhereUniqueInput[] | ShopWhereUniqueInput>;
}

export interface ShopCreateWithoutOwnersInput {
  id?: Maybe<ID_Input>;
  name: String;
  description: String;
  category: String;
  live?: Maybe<Boolean>;
  images?: Maybe<ShopImageCreateManyWithoutShopInput>;
  products?: Maybe<ProductCreateManyWithoutShopInput>;
}

export interface ShopImageCreateManyWithoutShopInput {
  create?: Maybe<
    ShopImageCreateWithoutShopInput[] | ShopImageCreateWithoutShopInput
  >;
  connect?: Maybe<ShopImageWhereUniqueInput[] | ShopImageWhereUniqueInput>;
}

export interface ShopImageCreateWithoutShopInput {
  id?: Maybe<ID_Input>;
  imageUrl: String;
  largeImageUrl?: Maybe<String>;
}

export interface ProductCreateManyWithoutShopInput {
  create?: Maybe<
    ProductCreateWithoutShopInput[] | ProductCreateWithoutShopInput
  >;
  connect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
}

export interface ProductCreateWithoutShopInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  price: String;
  categories?: Maybe<CategoryCreateManyWithoutProductInput>;
  brand?: Maybe<BrandCreateOneWithoutProductsInput>;
  tags?: Maybe<TagCreateManyWithoutProductsInput>;
  images?: Maybe<ProductImageCreateManyWithoutProductInput>;
  variants?: Maybe<VariantCreateManyWithoutProductInput>;
  reviews?: Maybe<ProductReviewCreateManyWithoutProductInput>;
}

export interface ForumPostCreateManyWithoutPostedByInput {
  create?: Maybe<
    ForumPostCreateWithoutPostedByInput[] | ForumPostCreateWithoutPostedByInput
  >;
  connect?: Maybe<ForumPostWhereUniqueInput[] | ForumPostWhereUniqueInput>;
}

export interface ForumPostCreateWithoutPostedByInput {
  id?: Maybe<ID_Input>;
  forum: ForumCreateOneWithoutPostsInput;
  title: String;
  content?: Maybe<String>;
  type: ForumPostType;
  comments?: Maybe<ForumPostCommentCreateManyWithoutForumPostInput>;
}

export interface ForumCreateOneWithoutPostsInput {
  create?: Maybe<ForumCreateWithoutPostsInput>;
  connect?: Maybe<ForumWhereUniqueInput>;
}

export interface ForumCreateWithoutPostsInput {
  id?: Maybe<ID_Input>;
  avatarPic?: Maybe<String>;
  coverPic?: Maybe<String>;
  members?: Maybe<UserCreateManyWithoutForumsInput>;
  name: String;
  description?: Maybe<String>;
}

export interface UserCreateManyWithoutForumsInput {
  create?: Maybe<UserCreateWithoutForumsInput[] | UserCreateWithoutForumsInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutForumsInput {
  id?: Maybe<ID_Input>;
  firebaseId: String;
  email?: Maybe<String>;
  name: String;
  username: String;
  profilePic?: Maybe<String>;
  isAnonymous?: Maybe<Boolean>;
  emailVerified?: Maybe<Boolean>;
  shops?: Maybe<ShopCreateManyWithoutOwnersInput>;
  images?: Maybe<UserImageCreateManyWithoutUserInput>;
  productReviews?: Maybe<ProductReviewCreateManyWithoutUserInput>;
  cartItems?: Maybe<CartCreateOneWithoutUserInput>;
  forumposts?: Maybe<ForumPostCreateManyWithoutPostedByInput>;
  postComments?: Maybe<ForumPostCommentCreateManyWithoutUserInput>;
}

export interface ForumPostCommentCreateManyWithoutUserInput {
  create?: Maybe<
    | ForumPostCommentCreateWithoutUserInput[]
    | ForumPostCommentCreateWithoutUserInput
  >;
  connect?: Maybe<
    ForumPostCommentWhereUniqueInput[] | ForumPostCommentWhereUniqueInput
  >;
}

export interface ForumPostCommentCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  forumPost: ForumPostCreateOneWithoutCommentsInput;
  comment: String;
}

export interface ForumPostCreateOneWithoutCommentsInput {
  create?: Maybe<ForumPostCreateWithoutCommentsInput>;
  connect?: Maybe<ForumPostWhereUniqueInput>;
}

export interface ForumPostCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  postedBy: UserCreateOneWithoutForumpostsInput;
  forum: ForumCreateOneWithoutPostsInput;
  title: String;
  content?: Maybe<String>;
  type: ForumPostType;
}

export interface UserCreateOneWithoutForumpostsInput {
  create?: Maybe<UserCreateWithoutForumpostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutForumpostsInput {
  id?: Maybe<ID_Input>;
  firebaseId: String;
  email?: Maybe<String>;
  name: String;
  username: String;
  profilePic?: Maybe<String>;
  isAnonymous?: Maybe<Boolean>;
  emailVerified?: Maybe<Boolean>;
  shops?: Maybe<ShopCreateManyWithoutOwnersInput>;
  images?: Maybe<UserImageCreateManyWithoutUserInput>;
  productReviews?: Maybe<ProductReviewCreateManyWithoutUserInput>;
  cartItems?: Maybe<CartCreateOneWithoutUserInput>;
  forums?: Maybe<ForumCreateManyWithoutMembersInput>;
  postComments?: Maybe<ForumPostCommentCreateManyWithoutUserInput>;
}

export interface ForumCreateManyWithoutMembersInput {
  create?: Maybe<
    ForumCreateWithoutMembersInput[] | ForumCreateWithoutMembersInput
  >;
  connect?: Maybe<ForumWhereUniqueInput[] | ForumWhereUniqueInput>;
}

export interface ForumCreateWithoutMembersInput {
  id?: Maybe<ID_Input>;
  avatarPic?: Maybe<String>;
  coverPic?: Maybe<String>;
  posts?: Maybe<ForumPostCreateManyWithoutForumInput>;
  name: String;
  description?: Maybe<String>;
}

export interface ForumPostCreateManyWithoutForumInput {
  create?: Maybe<
    ForumPostCreateWithoutForumInput[] | ForumPostCreateWithoutForumInput
  >;
  connect?: Maybe<ForumPostWhereUniqueInput[] | ForumPostWhereUniqueInput>;
}

export interface ForumPostCreateWithoutForumInput {
  id?: Maybe<ID_Input>;
  postedBy: UserCreateOneWithoutForumpostsInput;
  title: String;
  content?: Maybe<String>;
  type: ForumPostType;
  comments?: Maybe<ForumPostCommentCreateManyWithoutForumPostInput>;
}

export interface ForumPostCommentCreateManyWithoutForumPostInput {
  create?: Maybe<
    | ForumPostCommentCreateWithoutForumPostInput[]
    | ForumPostCommentCreateWithoutForumPostInput
  >;
  connect?: Maybe<
    ForumPostCommentWhereUniqueInput[] | ForumPostCommentWhereUniqueInput
  >;
}

export interface ForumPostCommentCreateWithoutForumPostInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutPostCommentsInput;
  comment: String;
}

export interface UserCreateOneWithoutPostCommentsInput {
  create?: Maybe<UserCreateWithoutPostCommentsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutPostCommentsInput {
  id?: Maybe<ID_Input>;
  firebaseId: String;
  email?: Maybe<String>;
  name: String;
  username: String;
  profilePic?: Maybe<String>;
  isAnonymous?: Maybe<Boolean>;
  emailVerified?: Maybe<Boolean>;
  shops?: Maybe<ShopCreateManyWithoutOwnersInput>;
  images?: Maybe<UserImageCreateManyWithoutUserInput>;
  productReviews?: Maybe<ProductReviewCreateManyWithoutUserInput>;
  cartItems?: Maybe<CartCreateOneWithoutUserInput>;
  forumposts?: Maybe<ForumPostCreateManyWithoutPostedByInput>;
  forums?: Maybe<ForumCreateManyWithoutMembersInput>;
}

export interface CartItemCreatevariantsInput {
  set?: Maybe<String[] | String>;
}

export interface BrandUpdateInput {
  name?: Maybe<String>;
  products?: Maybe<ProductUpdateManyWithoutBrandInput>;
}

export interface ProductUpdateManyWithoutBrandInput {
  create?: Maybe<
    ProductCreateWithoutBrandInput[] | ProductCreateWithoutBrandInput
  >;
  delete?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  connect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  set?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  disconnect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  update?: Maybe<
    | ProductUpdateWithWhereUniqueWithoutBrandInput[]
    | ProductUpdateWithWhereUniqueWithoutBrandInput
  >;
  upsert?: Maybe<
    | ProductUpsertWithWhereUniqueWithoutBrandInput[]
    | ProductUpsertWithWhereUniqueWithoutBrandInput
  >;
  deleteMany?: Maybe<ProductScalarWhereInput[] | ProductScalarWhereInput>;
  updateMany?: Maybe<
    | ProductUpdateManyWithWhereNestedInput[]
    | ProductUpdateManyWithWhereNestedInput
  >;
}

export interface ProductUpdateWithWhereUniqueWithoutBrandInput {
  where: ProductWhereUniqueInput;
  data: ProductUpdateWithoutBrandDataInput;
}

export interface ProductUpdateWithoutBrandDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  price?: Maybe<String>;
  categories?: Maybe<CategoryUpdateManyWithoutProductInput>;
  tags?: Maybe<TagUpdateManyWithoutProductsInput>;
  images?: Maybe<ProductImageUpdateManyWithoutProductInput>;
  shop?: Maybe<ShopUpdateOneRequiredWithoutProductsInput>;
  variants?: Maybe<VariantUpdateManyWithoutProductInput>;
  reviews?: Maybe<ProductReviewUpdateManyWithoutProductInput>;
}

export interface CategoryUpdateManyWithoutProductInput {
  create?: Maybe<
    CategoryCreateWithoutProductInput[] | CategoryCreateWithoutProductInput
  >;
  delete?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  connect?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  set?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  disconnect?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  update?: Maybe<
    | CategoryUpdateWithWhereUniqueWithoutProductInput[]
    | CategoryUpdateWithWhereUniqueWithoutProductInput
  >;
  upsert?: Maybe<
    | CategoryUpsertWithWhereUniqueWithoutProductInput[]
    | CategoryUpsertWithWhereUniqueWithoutProductInput
  >;
  deleteMany?: Maybe<CategoryScalarWhereInput[] | CategoryScalarWhereInput>;
  updateMany?: Maybe<
    | CategoryUpdateManyWithWhereNestedInput[]
    | CategoryUpdateManyWithWhereNestedInput
  >;
}

export interface CategoryUpdateWithWhereUniqueWithoutProductInput {
  where: CategoryWhereUniqueInput;
  data: CategoryUpdateWithoutProductDataInput;
}

export interface CategoryUpdateWithoutProductDataInput {
  name?: Maybe<String>;
}

export interface CategoryUpsertWithWhereUniqueWithoutProductInput {
  where: CategoryWhereUniqueInput;
  update: CategoryUpdateWithoutProductDataInput;
  create: CategoryCreateWithoutProductInput;
}

export interface CategoryScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CategoryScalarWhereInput[] | CategoryScalarWhereInput>;
  OR?: Maybe<CategoryScalarWhereInput[] | CategoryScalarWhereInput>;
  NOT?: Maybe<CategoryScalarWhereInput[] | CategoryScalarWhereInput>;
}

export interface CategoryUpdateManyWithWhereNestedInput {
  where: CategoryScalarWhereInput;
  data: CategoryUpdateManyDataInput;
}

export interface CategoryUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface TagUpdateManyWithoutProductsInput {
  create?: Maybe<
    TagCreateWithoutProductsInput[] | TagCreateWithoutProductsInput
  >;
  delete?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  connect?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  set?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  disconnect?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  update?: Maybe<
    | TagUpdateWithWhereUniqueWithoutProductsInput[]
    | TagUpdateWithWhereUniqueWithoutProductsInput
  >;
  upsert?: Maybe<
    | TagUpsertWithWhereUniqueWithoutProductsInput[]
    | TagUpsertWithWhereUniqueWithoutProductsInput
  >;
  deleteMany?: Maybe<TagScalarWhereInput[] | TagScalarWhereInput>;
  updateMany?: Maybe<
    TagUpdateManyWithWhereNestedInput[] | TagUpdateManyWithWhereNestedInput
  >;
}

export interface TagUpdateWithWhereUniqueWithoutProductsInput {
  where: TagWhereUniqueInput;
  data: TagUpdateWithoutProductsDataInput;
}

export interface TagUpdateWithoutProductsDataInput {
  name?: Maybe<String>;
}

export interface TagUpsertWithWhereUniqueWithoutProductsInput {
  where: TagWhereUniqueInput;
  update: TagUpdateWithoutProductsDataInput;
  create: TagCreateWithoutProductsInput;
}

export interface TagScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TagScalarWhereInput[] | TagScalarWhereInput>;
  OR?: Maybe<TagScalarWhereInput[] | TagScalarWhereInput>;
  NOT?: Maybe<TagScalarWhereInput[] | TagScalarWhereInput>;
}

export interface TagUpdateManyWithWhereNestedInput {
  where: TagScalarWhereInput;
  data: TagUpdateManyDataInput;
}

export interface TagUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface ProductImageUpdateManyWithoutProductInput {
  create?: Maybe<
    | ProductImageCreateWithoutProductInput[]
    | ProductImageCreateWithoutProductInput
  >;
  delete?: Maybe<ProductImageWhereUniqueInput[] | ProductImageWhereUniqueInput>;
  connect?: Maybe<
    ProductImageWhereUniqueInput[] | ProductImageWhereUniqueInput
  >;
  set?: Maybe<ProductImageWhereUniqueInput[] | ProductImageWhereUniqueInput>;
  disconnect?: Maybe<
    ProductImageWhereUniqueInput[] | ProductImageWhereUniqueInput
  >;
  update?: Maybe<
    | ProductImageUpdateWithWhereUniqueWithoutProductInput[]
    | ProductImageUpdateWithWhereUniqueWithoutProductInput
  >;
  upsert?: Maybe<
    | ProductImageUpsertWithWhereUniqueWithoutProductInput[]
    | ProductImageUpsertWithWhereUniqueWithoutProductInput
  >;
  deleteMany?: Maybe<
    ProductImageScalarWhereInput[] | ProductImageScalarWhereInput
  >;
  updateMany?: Maybe<
    | ProductImageUpdateManyWithWhereNestedInput[]
    | ProductImageUpdateManyWithWhereNestedInput
  >;
}

export interface ProductImageUpdateWithWhereUniqueWithoutProductInput {
  where: ProductImageWhereUniqueInput;
  data: ProductImageUpdateWithoutProductDataInput;
}

export interface ProductImageUpdateWithoutProductDataInput {
  imageUrl?: Maybe<String>;
  largeImageUrl?: Maybe<String>;
}

export interface ProductImageUpsertWithWhereUniqueWithoutProductInput {
  where: ProductImageWhereUniqueInput;
  update: ProductImageUpdateWithoutProductDataInput;
  create: ProductImageCreateWithoutProductInput;
}

export interface ProductImageScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  imageUrl?: Maybe<String>;
  imageUrl_not?: Maybe<String>;
  imageUrl_in?: Maybe<String[] | String>;
  imageUrl_not_in?: Maybe<String[] | String>;
  imageUrl_lt?: Maybe<String>;
  imageUrl_lte?: Maybe<String>;
  imageUrl_gt?: Maybe<String>;
  imageUrl_gte?: Maybe<String>;
  imageUrl_contains?: Maybe<String>;
  imageUrl_not_contains?: Maybe<String>;
  imageUrl_starts_with?: Maybe<String>;
  imageUrl_not_starts_with?: Maybe<String>;
  imageUrl_ends_with?: Maybe<String>;
  imageUrl_not_ends_with?: Maybe<String>;
  largeImageUrl?: Maybe<String>;
  largeImageUrl_not?: Maybe<String>;
  largeImageUrl_in?: Maybe<String[] | String>;
  largeImageUrl_not_in?: Maybe<String[] | String>;
  largeImageUrl_lt?: Maybe<String>;
  largeImageUrl_lte?: Maybe<String>;
  largeImageUrl_gt?: Maybe<String>;
  largeImageUrl_gte?: Maybe<String>;
  largeImageUrl_contains?: Maybe<String>;
  largeImageUrl_not_contains?: Maybe<String>;
  largeImageUrl_starts_with?: Maybe<String>;
  largeImageUrl_not_starts_with?: Maybe<String>;
  largeImageUrl_ends_with?: Maybe<String>;
  largeImageUrl_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ProductImageScalarWhereInput[] | ProductImageScalarWhereInput>;
  OR?: Maybe<ProductImageScalarWhereInput[] | ProductImageScalarWhereInput>;
  NOT?: Maybe<ProductImageScalarWhereInput[] | ProductImageScalarWhereInput>;
}

export interface ProductImageUpdateManyWithWhereNestedInput {
  where: ProductImageScalarWhereInput;
  data: ProductImageUpdateManyDataInput;
}

export interface ProductImageUpdateManyDataInput {
  imageUrl?: Maybe<String>;
  largeImageUrl?: Maybe<String>;
}

export interface ShopUpdateOneRequiredWithoutProductsInput {
  create?: Maybe<ShopCreateWithoutProductsInput>;
  update?: Maybe<ShopUpdateWithoutProductsDataInput>;
  upsert?: Maybe<ShopUpsertWithoutProductsInput>;
  connect?: Maybe<ShopWhereUniqueInput>;
}

export interface ShopUpdateWithoutProductsDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  category?: Maybe<String>;
  live?: Maybe<Boolean>;
  owners?: Maybe<UserUpdateManyWithoutShopsInput>;
  images?: Maybe<ShopImageUpdateManyWithoutShopInput>;
}

export interface UserUpdateManyWithoutShopsInput {
  create?: Maybe<UserCreateWithoutShopsInput[] | UserCreateWithoutShopsInput>;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutShopsInput[]
    | UserUpdateWithWhereUniqueWithoutShopsInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutShopsInput[]
    | UserUpsertWithWhereUniqueWithoutShopsInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutShopsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutShopsDataInput;
}

export interface UserUpdateWithoutShopsDataInput {
  firebaseId?: Maybe<String>;
  email?: Maybe<String>;
  name?: Maybe<String>;
  username?: Maybe<String>;
  profilePic?: Maybe<String>;
  isAnonymous?: Maybe<Boolean>;
  emailVerified?: Maybe<Boolean>;
  images?: Maybe<UserImageUpdateManyWithoutUserInput>;
  productReviews?: Maybe<ProductReviewUpdateManyWithoutUserInput>;
  cartItems?: Maybe<CartUpdateOneWithoutUserInput>;
  forumposts?: Maybe<ForumPostUpdateManyWithoutPostedByInput>;
  forums?: Maybe<ForumUpdateManyWithoutMembersInput>;
  postComments?: Maybe<ForumPostCommentUpdateManyWithoutUserInput>;
}

export interface UserImageUpdateManyWithoutUserInput {
  create?: Maybe<
    UserImageCreateWithoutUserInput[] | UserImageCreateWithoutUserInput
  >;
  delete?: Maybe<UserImageWhereUniqueInput[] | UserImageWhereUniqueInput>;
  connect?: Maybe<UserImageWhereUniqueInput[] | UserImageWhereUniqueInput>;
  set?: Maybe<UserImageWhereUniqueInput[] | UserImageWhereUniqueInput>;
  disconnect?: Maybe<UserImageWhereUniqueInput[] | UserImageWhereUniqueInput>;
  update?: Maybe<
    | UserImageUpdateWithWhereUniqueWithoutUserInput[]
    | UserImageUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | UserImageUpsertWithWhereUniqueWithoutUserInput[]
    | UserImageUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<UserImageScalarWhereInput[] | UserImageScalarWhereInput>;
  updateMany?: Maybe<
    | UserImageUpdateManyWithWhereNestedInput[]
    | UserImageUpdateManyWithWhereNestedInput
  >;
}

export interface UserImageUpdateWithWhereUniqueWithoutUserInput {
  where: UserImageWhereUniqueInput;
  data: UserImageUpdateWithoutUserDataInput;
}

export interface UserImageUpdateWithoutUserDataInput {
  imageUrl?: Maybe<String>;
}

export interface UserImageUpsertWithWhereUniqueWithoutUserInput {
  where: UserImageWhereUniqueInput;
  update: UserImageUpdateWithoutUserDataInput;
  create: UserImageCreateWithoutUserInput;
}

export interface UserImageScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  imageUrl?: Maybe<String>;
  imageUrl_not?: Maybe<String>;
  imageUrl_in?: Maybe<String[] | String>;
  imageUrl_not_in?: Maybe<String[] | String>;
  imageUrl_lt?: Maybe<String>;
  imageUrl_lte?: Maybe<String>;
  imageUrl_gt?: Maybe<String>;
  imageUrl_gte?: Maybe<String>;
  imageUrl_contains?: Maybe<String>;
  imageUrl_not_contains?: Maybe<String>;
  imageUrl_starts_with?: Maybe<String>;
  imageUrl_not_starts_with?: Maybe<String>;
  imageUrl_ends_with?: Maybe<String>;
  imageUrl_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserImageScalarWhereInput[] | UserImageScalarWhereInput>;
  OR?: Maybe<UserImageScalarWhereInput[] | UserImageScalarWhereInput>;
  NOT?: Maybe<UserImageScalarWhereInput[] | UserImageScalarWhereInput>;
}

export interface UserImageUpdateManyWithWhereNestedInput {
  where: UserImageScalarWhereInput;
  data: UserImageUpdateManyDataInput;
}

export interface UserImageUpdateManyDataInput {
  imageUrl?: Maybe<String>;
}

export interface ProductReviewUpdateManyWithoutUserInput {
  create?: Maybe<
    ProductReviewCreateWithoutUserInput[] | ProductReviewCreateWithoutUserInput
  >;
  delete?: Maybe<
    ProductReviewWhereUniqueInput[] | ProductReviewWhereUniqueInput
  >;
  connect?: Maybe<
    ProductReviewWhereUniqueInput[] | ProductReviewWhereUniqueInput
  >;
  set?: Maybe<ProductReviewWhereUniqueInput[] | ProductReviewWhereUniqueInput>;
  disconnect?: Maybe<
    ProductReviewWhereUniqueInput[] | ProductReviewWhereUniqueInput
  >;
  update?: Maybe<
    | ProductReviewUpdateWithWhereUniqueWithoutUserInput[]
    | ProductReviewUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | ProductReviewUpsertWithWhereUniqueWithoutUserInput[]
    | ProductReviewUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<
    ProductReviewScalarWhereInput[] | ProductReviewScalarWhereInput
  >;
  updateMany?: Maybe<
    | ProductReviewUpdateManyWithWhereNestedInput[]
    | ProductReviewUpdateManyWithWhereNestedInput
  >;
}

export interface ProductReviewUpdateWithWhereUniqueWithoutUserInput {
  where: ProductReviewWhereUniqueInput;
  data: ProductReviewUpdateWithoutUserDataInput;
}

export interface ProductReviewUpdateWithoutUserDataInput {
  product?: Maybe<ProductUpdateOneRequiredWithoutReviewsInput>;
  rating?: Maybe<Int>;
  review?: Maybe<String>;
}

export interface ProductUpdateOneRequiredWithoutReviewsInput {
  create?: Maybe<ProductCreateWithoutReviewsInput>;
  update?: Maybe<ProductUpdateWithoutReviewsDataInput>;
  upsert?: Maybe<ProductUpsertWithoutReviewsInput>;
  connect?: Maybe<ProductWhereUniqueInput>;
}

export interface ProductUpdateWithoutReviewsDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  price?: Maybe<String>;
  categories?: Maybe<CategoryUpdateManyWithoutProductInput>;
  brand?: Maybe<BrandUpdateOneWithoutProductsInput>;
  tags?: Maybe<TagUpdateManyWithoutProductsInput>;
  images?: Maybe<ProductImageUpdateManyWithoutProductInput>;
  shop?: Maybe<ShopUpdateOneRequiredWithoutProductsInput>;
  variants?: Maybe<VariantUpdateManyWithoutProductInput>;
}

export interface BrandUpdateOneWithoutProductsInput {
  create?: Maybe<BrandCreateWithoutProductsInput>;
  update?: Maybe<BrandUpdateWithoutProductsDataInput>;
  upsert?: Maybe<BrandUpsertWithoutProductsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<BrandWhereUniqueInput>;
}

export interface BrandUpdateWithoutProductsDataInput {
  name?: Maybe<String>;
}

export interface BrandUpsertWithoutProductsInput {
  update: BrandUpdateWithoutProductsDataInput;
  create: BrandCreateWithoutProductsInput;
}

export interface VariantUpdateManyWithoutProductInput {
  create?: Maybe<
    VariantCreateWithoutProductInput[] | VariantCreateWithoutProductInput
  >;
  delete?: Maybe<VariantWhereUniqueInput[] | VariantWhereUniqueInput>;
  connect?: Maybe<VariantWhereUniqueInput[] | VariantWhereUniqueInput>;
  set?: Maybe<VariantWhereUniqueInput[] | VariantWhereUniqueInput>;
  disconnect?: Maybe<VariantWhereUniqueInput[] | VariantWhereUniqueInput>;
  update?: Maybe<
    | VariantUpdateWithWhereUniqueWithoutProductInput[]
    | VariantUpdateWithWhereUniqueWithoutProductInput
  >;
  upsert?: Maybe<
    | VariantUpsertWithWhereUniqueWithoutProductInput[]
    | VariantUpsertWithWhereUniqueWithoutProductInput
  >;
  deleteMany?: Maybe<VariantScalarWhereInput[] | VariantScalarWhereInput>;
  updateMany?: Maybe<
    | VariantUpdateManyWithWhereNestedInput[]
    | VariantUpdateManyWithWhereNestedInput
  >;
}

export interface VariantUpdateWithWhereUniqueWithoutProductInput {
  where: VariantWhereUniqueInput;
  data: VariantUpdateWithoutProductDataInput;
}

export interface VariantUpdateWithoutProductDataInput {
  name?: Maybe<String>;
  values?: Maybe<VariantUpdatevaluesInput>;
}

export interface VariantUpdatevaluesInput {
  set?: Maybe<String[] | String>;
}

export interface VariantUpsertWithWhereUniqueWithoutProductInput {
  where: VariantWhereUniqueInput;
  update: VariantUpdateWithoutProductDataInput;
  create: VariantCreateWithoutProductInput;
}

export interface VariantScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<VariantScalarWhereInput[] | VariantScalarWhereInput>;
  OR?: Maybe<VariantScalarWhereInput[] | VariantScalarWhereInput>;
  NOT?: Maybe<VariantScalarWhereInput[] | VariantScalarWhereInput>;
}

export interface VariantUpdateManyWithWhereNestedInput {
  where: VariantScalarWhereInput;
  data: VariantUpdateManyDataInput;
}

export interface VariantUpdateManyDataInput {
  name?: Maybe<String>;
  values?: Maybe<VariantUpdatevaluesInput>;
}

export interface ProductUpsertWithoutReviewsInput {
  update: ProductUpdateWithoutReviewsDataInput;
  create: ProductCreateWithoutReviewsInput;
}

export interface ProductReviewUpsertWithWhereUniqueWithoutUserInput {
  where: ProductReviewWhereUniqueInput;
  update: ProductReviewUpdateWithoutUserDataInput;
  create: ProductReviewCreateWithoutUserInput;
}

export interface ProductReviewScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  rating?: Maybe<Int>;
  rating_not?: Maybe<Int>;
  rating_in?: Maybe<Int[] | Int>;
  rating_not_in?: Maybe<Int[] | Int>;
  rating_lt?: Maybe<Int>;
  rating_lte?: Maybe<Int>;
  rating_gt?: Maybe<Int>;
  rating_gte?: Maybe<Int>;
  review?: Maybe<String>;
  review_not?: Maybe<String>;
  review_in?: Maybe<String[] | String>;
  review_not_in?: Maybe<String[] | String>;
  review_lt?: Maybe<String>;
  review_lte?: Maybe<String>;
  review_gt?: Maybe<String>;
  review_gte?: Maybe<String>;
  review_contains?: Maybe<String>;
  review_not_contains?: Maybe<String>;
  review_starts_with?: Maybe<String>;
  review_not_starts_with?: Maybe<String>;
  review_ends_with?: Maybe<String>;
  review_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ProductReviewScalarWhereInput[] | ProductReviewScalarWhereInput>;
  OR?: Maybe<ProductReviewScalarWhereInput[] | ProductReviewScalarWhereInput>;
  NOT?: Maybe<ProductReviewScalarWhereInput[] | ProductReviewScalarWhereInput>;
}

export interface ProductReviewUpdateManyWithWhereNestedInput {
  where: ProductReviewScalarWhereInput;
  data: ProductReviewUpdateManyDataInput;
}

export interface ProductReviewUpdateManyDataInput {
  rating?: Maybe<Int>;
  review?: Maybe<String>;
}

export interface CartUpdateOneWithoutUserInput {
  create?: Maybe<CartCreateWithoutUserInput>;
  update?: Maybe<CartUpdateWithoutUserDataInput>;
  upsert?: Maybe<CartUpsertWithoutUserInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<CartWhereUniqueInput>;
}

export interface CartUpdateWithoutUserDataInput {
  items?: Maybe<CartItemUpdateManyWithoutCartInput>;
}

export interface CartItemUpdateManyWithoutCartInput {
  create?: Maybe<
    CartItemCreateWithoutCartInput[] | CartItemCreateWithoutCartInput
  >;
  delete?: Maybe<CartItemWhereUniqueInput[] | CartItemWhereUniqueInput>;
  connect?: Maybe<CartItemWhereUniqueInput[] | CartItemWhereUniqueInput>;
  set?: Maybe<CartItemWhereUniqueInput[] | CartItemWhereUniqueInput>;
  disconnect?: Maybe<CartItemWhereUniqueInput[] | CartItemWhereUniqueInput>;
  update?: Maybe<
    | CartItemUpdateWithWhereUniqueWithoutCartInput[]
    | CartItemUpdateWithWhereUniqueWithoutCartInput
  >;
  upsert?: Maybe<
    | CartItemUpsertWithWhereUniqueWithoutCartInput[]
    | CartItemUpsertWithWhereUniqueWithoutCartInput
  >;
  deleteMany?: Maybe<CartItemScalarWhereInput[] | CartItemScalarWhereInput>;
  updateMany?: Maybe<
    | CartItemUpdateManyWithWhereNestedInput[]
    | CartItemUpdateManyWithWhereNestedInput
  >;
}

export interface CartItemUpdateWithWhereUniqueWithoutCartInput {
  where: CartItemWhereUniqueInput;
  data: CartItemUpdateWithoutCartDataInput;
}

export interface CartItemUpdateWithoutCartDataInput {
  product?: Maybe<ProductUpdateOneRequiredInput>;
  quantity?: Maybe<Int>;
  variants?: Maybe<CartItemUpdatevariantsInput>;
}

export interface ProductUpdateOneRequiredInput {
  create?: Maybe<ProductCreateInput>;
  update?: Maybe<ProductUpdateDataInput>;
  upsert?: Maybe<ProductUpsertNestedInput>;
  connect?: Maybe<ProductWhereUniqueInput>;
}

export interface ProductUpdateDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  price?: Maybe<String>;
  categories?: Maybe<CategoryUpdateManyWithoutProductInput>;
  brand?: Maybe<BrandUpdateOneWithoutProductsInput>;
  tags?: Maybe<TagUpdateManyWithoutProductsInput>;
  images?: Maybe<ProductImageUpdateManyWithoutProductInput>;
  shop?: Maybe<ShopUpdateOneRequiredWithoutProductsInput>;
  variants?: Maybe<VariantUpdateManyWithoutProductInput>;
  reviews?: Maybe<ProductReviewUpdateManyWithoutProductInput>;
}

export interface ProductReviewUpdateManyWithoutProductInput {
  create?: Maybe<
    | ProductReviewCreateWithoutProductInput[]
    | ProductReviewCreateWithoutProductInput
  >;
  delete?: Maybe<
    ProductReviewWhereUniqueInput[] | ProductReviewWhereUniqueInput
  >;
  connect?: Maybe<
    ProductReviewWhereUniqueInput[] | ProductReviewWhereUniqueInput
  >;
  set?: Maybe<ProductReviewWhereUniqueInput[] | ProductReviewWhereUniqueInput>;
  disconnect?: Maybe<
    ProductReviewWhereUniqueInput[] | ProductReviewWhereUniqueInput
  >;
  update?: Maybe<
    | ProductReviewUpdateWithWhereUniqueWithoutProductInput[]
    | ProductReviewUpdateWithWhereUniqueWithoutProductInput
  >;
  upsert?: Maybe<
    | ProductReviewUpsertWithWhereUniqueWithoutProductInput[]
    | ProductReviewUpsertWithWhereUniqueWithoutProductInput
  >;
  deleteMany?: Maybe<
    ProductReviewScalarWhereInput[] | ProductReviewScalarWhereInput
  >;
  updateMany?: Maybe<
    | ProductReviewUpdateManyWithWhereNestedInput[]
    | ProductReviewUpdateManyWithWhereNestedInput
  >;
}

export interface ProductReviewUpdateWithWhereUniqueWithoutProductInput {
  where: ProductReviewWhereUniqueInput;
  data: ProductReviewUpdateWithoutProductDataInput;
}

export interface ProductReviewUpdateWithoutProductDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutProductReviewsInput>;
  rating?: Maybe<Int>;
  review?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutProductReviewsInput {
  create?: Maybe<UserCreateWithoutProductReviewsInput>;
  update?: Maybe<UserUpdateWithoutProductReviewsDataInput>;
  upsert?: Maybe<UserUpsertWithoutProductReviewsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutProductReviewsDataInput {
  firebaseId?: Maybe<String>;
  email?: Maybe<String>;
  name?: Maybe<String>;
  username?: Maybe<String>;
  profilePic?: Maybe<String>;
  isAnonymous?: Maybe<Boolean>;
  emailVerified?: Maybe<Boolean>;
  shops?: Maybe<ShopUpdateManyWithoutOwnersInput>;
  images?: Maybe<UserImageUpdateManyWithoutUserInput>;
  cartItems?: Maybe<CartUpdateOneWithoutUserInput>;
  forumposts?: Maybe<ForumPostUpdateManyWithoutPostedByInput>;
  forums?: Maybe<ForumUpdateManyWithoutMembersInput>;
  postComments?: Maybe<ForumPostCommentUpdateManyWithoutUserInput>;
}

export interface ShopUpdateManyWithoutOwnersInput {
  create?: Maybe<ShopCreateWithoutOwnersInput[] | ShopCreateWithoutOwnersInput>;
  delete?: Maybe<ShopWhereUniqueInput[] | ShopWhereUniqueInput>;
  connect?: Maybe<ShopWhereUniqueInput[] | ShopWhereUniqueInput>;
  set?: Maybe<ShopWhereUniqueInput[] | ShopWhereUniqueInput>;
  disconnect?: Maybe<ShopWhereUniqueInput[] | ShopWhereUniqueInput>;
  update?: Maybe<
    | ShopUpdateWithWhereUniqueWithoutOwnersInput[]
    | ShopUpdateWithWhereUniqueWithoutOwnersInput
  >;
  upsert?: Maybe<
    | ShopUpsertWithWhereUniqueWithoutOwnersInput[]
    | ShopUpsertWithWhereUniqueWithoutOwnersInput
  >;
  deleteMany?: Maybe<ShopScalarWhereInput[] | ShopScalarWhereInput>;
  updateMany?: Maybe<
    ShopUpdateManyWithWhereNestedInput[] | ShopUpdateManyWithWhereNestedInput
  >;
}

export interface ShopUpdateWithWhereUniqueWithoutOwnersInput {
  where: ShopWhereUniqueInput;
  data: ShopUpdateWithoutOwnersDataInput;
}

export interface ShopUpdateWithoutOwnersDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  category?: Maybe<String>;
  live?: Maybe<Boolean>;
  images?: Maybe<ShopImageUpdateManyWithoutShopInput>;
  products?: Maybe<ProductUpdateManyWithoutShopInput>;
}

export interface ShopImageUpdateManyWithoutShopInput {
  create?: Maybe<
    ShopImageCreateWithoutShopInput[] | ShopImageCreateWithoutShopInput
  >;
  delete?: Maybe<ShopImageWhereUniqueInput[] | ShopImageWhereUniqueInput>;
  connect?: Maybe<ShopImageWhereUniqueInput[] | ShopImageWhereUniqueInput>;
  set?: Maybe<ShopImageWhereUniqueInput[] | ShopImageWhereUniqueInput>;
  disconnect?: Maybe<ShopImageWhereUniqueInput[] | ShopImageWhereUniqueInput>;
  update?: Maybe<
    | ShopImageUpdateWithWhereUniqueWithoutShopInput[]
    | ShopImageUpdateWithWhereUniqueWithoutShopInput
  >;
  upsert?: Maybe<
    | ShopImageUpsertWithWhereUniqueWithoutShopInput[]
    | ShopImageUpsertWithWhereUniqueWithoutShopInput
  >;
  deleteMany?: Maybe<ShopImageScalarWhereInput[] | ShopImageScalarWhereInput>;
  updateMany?: Maybe<
    | ShopImageUpdateManyWithWhereNestedInput[]
    | ShopImageUpdateManyWithWhereNestedInput
  >;
}

export interface ShopImageUpdateWithWhereUniqueWithoutShopInput {
  where: ShopImageWhereUniqueInput;
  data: ShopImageUpdateWithoutShopDataInput;
}

export interface ShopImageUpdateWithoutShopDataInput {
  imageUrl?: Maybe<String>;
  largeImageUrl?: Maybe<String>;
}

export interface ShopImageUpsertWithWhereUniqueWithoutShopInput {
  where: ShopImageWhereUniqueInput;
  update: ShopImageUpdateWithoutShopDataInput;
  create: ShopImageCreateWithoutShopInput;
}

export interface ShopImageScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  imageUrl?: Maybe<String>;
  imageUrl_not?: Maybe<String>;
  imageUrl_in?: Maybe<String[] | String>;
  imageUrl_not_in?: Maybe<String[] | String>;
  imageUrl_lt?: Maybe<String>;
  imageUrl_lte?: Maybe<String>;
  imageUrl_gt?: Maybe<String>;
  imageUrl_gte?: Maybe<String>;
  imageUrl_contains?: Maybe<String>;
  imageUrl_not_contains?: Maybe<String>;
  imageUrl_starts_with?: Maybe<String>;
  imageUrl_not_starts_with?: Maybe<String>;
  imageUrl_ends_with?: Maybe<String>;
  imageUrl_not_ends_with?: Maybe<String>;
  largeImageUrl?: Maybe<String>;
  largeImageUrl_not?: Maybe<String>;
  largeImageUrl_in?: Maybe<String[] | String>;
  largeImageUrl_not_in?: Maybe<String[] | String>;
  largeImageUrl_lt?: Maybe<String>;
  largeImageUrl_lte?: Maybe<String>;
  largeImageUrl_gt?: Maybe<String>;
  largeImageUrl_gte?: Maybe<String>;
  largeImageUrl_contains?: Maybe<String>;
  largeImageUrl_not_contains?: Maybe<String>;
  largeImageUrl_starts_with?: Maybe<String>;
  largeImageUrl_not_starts_with?: Maybe<String>;
  largeImageUrl_ends_with?: Maybe<String>;
  largeImageUrl_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ShopImageScalarWhereInput[] | ShopImageScalarWhereInput>;
  OR?: Maybe<ShopImageScalarWhereInput[] | ShopImageScalarWhereInput>;
  NOT?: Maybe<ShopImageScalarWhereInput[] | ShopImageScalarWhereInput>;
}

export interface ShopImageUpdateManyWithWhereNestedInput {
  where: ShopImageScalarWhereInput;
  data: ShopImageUpdateManyDataInput;
}

export interface ShopImageUpdateManyDataInput {
  imageUrl?: Maybe<String>;
  largeImageUrl?: Maybe<String>;
}

export interface ProductUpdateManyWithoutShopInput {
  create?: Maybe<
    ProductCreateWithoutShopInput[] | ProductCreateWithoutShopInput
  >;
  delete?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  connect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  set?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  disconnect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  update?: Maybe<
    | ProductUpdateWithWhereUniqueWithoutShopInput[]
    | ProductUpdateWithWhereUniqueWithoutShopInput
  >;
  upsert?: Maybe<
    | ProductUpsertWithWhereUniqueWithoutShopInput[]
    | ProductUpsertWithWhereUniqueWithoutShopInput
  >;
  deleteMany?: Maybe<ProductScalarWhereInput[] | ProductScalarWhereInput>;
  updateMany?: Maybe<
    | ProductUpdateManyWithWhereNestedInput[]
    | ProductUpdateManyWithWhereNestedInput
  >;
}

export interface ProductUpdateWithWhereUniqueWithoutShopInput {
  where: ProductWhereUniqueInput;
  data: ProductUpdateWithoutShopDataInput;
}

export interface ProductUpdateWithoutShopDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  price?: Maybe<String>;
  categories?: Maybe<CategoryUpdateManyWithoutProductInput>;
  brand?: Maybe<BrandUpdateOneWithoutProductsInput>;
  tags?: Maybe<TagUpdateManyWithoutProductsInput>;
  images?: Maybe<ProductImageUpdateManyWithoutProductInput>;
  variants?: Maybe<VariantUpdateManyWithoutProductInput>;
  reviews?: Maybe<ProductReviewUpdateManyWithoutProductInput>;
}

export interface ProductUpsertWithWhereUniqueWithoutShopInput {
  where: ProductWhereUniqueInput;
  update: ProductUpdateWithoutShopDataInput;
  create: ProductCreateWithoutShopInput;
}

export interface ProductScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  price?: Maybe<String>;
  price_not?: Maybe<String>;
  price_in?: Maybe<String[] | String>;
  price_not_in?: Maybe<String[] | String>;
  price_lt?: Maybe<String>;
  price_lte?: Maybe<String>;
  price_gt?: Maybe<String>;
  price_gte?: Maybe<String>;
  price_contains?: Maybe<String>;
  price_not_contains?: Maybe<String>;
  price_starts_with?: Maybe<String>;
  price_not_starts_with?: Maybe<String>;
  price_ends_with?: Maybe<String>;
  price_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ProductScalarWhereInput[] | ProductScalarWhereInput>;
  OR?: Maybe<ProductScalarWhereInput[] | ProductScalarWhereInput>;
  NOT?: Maybe<ProductScalarWhereInput[] | ProductScalarWhereInput>;
}

export interface ProductUpdateManyWithWhereNestedInput {
  where: ProductScalarWhereInput;
  data: ProductUpdateManyDataInput;
}

export interface ProductUpdateManyDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  price?: Maybe<String>;
}

export interface ShopUpsertWithWhereUniqueWithoutOwnersInput {
  where: ShopWhereUniqueInput;
  update: ShopUpdateWithoutOwnersDataInput;
  create: ShopCreateWithoutOwnersInput;
}

export interface ShopScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  category?: Maybe<String>;
  category_not?: Maybe<String>;
  category_in?: Maybe<String[] | String>;
  category_not_in?: Maybe<String[] | String>;
  category_lt?: Maybe<String>;
  category_lte?: Maybe<String>;
  category_gt?: Maybe<String>;
  category_gte?: Maybe<String>;
  category_contains?: Maybe<String>;
  category_not_contains?: Maybe<String>;
  category_starts_with?: Maybe<String>;
  category_not_starts_with?: Maybe<String>;
  category_ends_with?: Maybe<String>;
  category_not_ends_with?: Maybe<String>;
  live?: Maybe<Boolean>;
  live_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ShopScalarWhereInput[] | ShopScalarWhereInput>;
  OR?: Maybe<ShopScalarWhereInput[] | ShopScalarWhereInput>;
  NOT?: Maybe<ShopScalarWhereInput[] | ShopScalarWhereInput>;
}

export interface ShopUpdateManyWithWhereNestedInput {
  where: ShopScalarWhereInput;
  data: ShopUpdateManyDataInput;
}

export interface ShopUpdateManyDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  category?: Maybe<String>;
  live?: Maybe<Boolean>;
}

export interface ForumPostUpdateManyWithoutPostedByInput {
  create?: Maybe<
    ForumPostCreateWithoutPostedByInput[] | ForumPostCreateWithoutPostedByInput
  >;
  delete?: Maybe<ForumPostWhereUniqueInput[] | ForumPostWhereUniqueInput>;
  connect?: Maybe<ForumPostWhereUniqueInput[] | ForumPostWhereUniqueInput>;
  set?: Maybe<ForumPostWhereUniqueInput[] | ForumPostWhereUniqueInput>;
  disconnect?: Maybe<ForumPostWhereUniqueInput[] | ForumPostWhereUniqueInput>;
  update?: Maybe<
    | ForumPostUpdateWithWhereUniqueWithoutPostedByInput[]
    | ForumPostUpdateWithWhereUniqueWithoutPostedByInput
  >;
  upsert?: Maybe<
    | ForumPostUpsertWithWhereUniqueWithoutPostedByInput[]
    | ForumPostUpsertWithWhereUniqueWithoutPostedByInput
  >;
  deleteMany?: Maybe<ForumPostScalarWhereInput[] | ForumPostScalarWhereInput>;
  updateMany?: Maybe<
    | ForumPostUpdateManyWithWhereNestedInput[]
    | ForumPostUpdateManyWithWhereNestedInput
  >;
}

export interface ForumPostUpdateWithWhereUniqueWithoutPostedByInput {
  where: ForumPostWhereUniqueInput;
  data: ForumPostUpdateWithoutPostedByDataInput;
}

export interface ForumPostUpdateWithoutPostedByDataInput {
  forum?: Maybe<ForumUpdateOneRequiredWithoutPostsInput>;
  title?: Maybe<String>;
  content?: Maybe<String>;
  type?: Maybe<ForumPostType>;
  comments?: Maybe<ForumPostCommentUpdateManyWithoutForumPostInput>;
}

export interface ForumUpdateOneRequiredWithoutPostsInput {
  create?: Maybe<ForumCreateWithoutPostsInput>;
  update?: Maybe<ForumUpdateWithoutPostsDataInput>;
  upsert?: Maybe<ForumUpsertWithoutPostsInput>;
  connect?: Maybe<ForumWhereUniqueInput>;
}

export interface ForumUpdateWithoutPostsDataInput {
  avatarPic?: Maybe<String>;
  coverPic?: Maybe<String>;
  members?: Maybe<UserUpdateManyWithoutForumsInput>;
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface UserUpdateManyWithoutForumsInput {
  create?: Maybe<UserCreateWithoutForumsInput[] | UserCreateWithoutForumsInput>;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutForumsInput[]
    | UserUpdateWithWhereUniqueWithoutForumsInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutForumsInput[]
    | UserUpsertWithWhereUniqueWithoutForumsInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutForumsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutForumsDataInput;
}

export interface UserUpdateWithoutForumsDataInput {
  firebaseId?: Maybe<String>;
  email?: Maybe<String>;
  name?: Maybe<String>;
  username?: Maybe<String>;
  profilePic?: Maybe<String>;
  isAnonymous?: Maybe<Boolean>;
  emailVerified?: Maybe<Boolean>;
  shops?: Maybe<ShopUpdateManyWithoutOwnersInput>;
  images?: Maybe<UserImageUpdateManyWithoutUserInput>;
  productReviews?: Maybe<ProductReviewUpdateManyWithoutUserInput>;
  cartItems?: Maybe<CartUpdateOneWithoutUserInput>;
  forumposts?: Maybe<ForumPostUpdateManyWithoutPostedByInput>;
  postComments?: Maybe<ForumPostCommentUpdateManyWithoutUserInput>;
}

export interface ForumPostCommentUpdateManyWithoutUserInput {
  create?: Maybe<
    | ForumPostCommentCreateWithoutUserInput[]
    | ForumPostCommentCreateWithoutUserInput
  >;
  delete?: Maybe<
    ForumPostCommentWhereUniqueInput[] | ForumPostCommentWhereUniqueInput
  >;
  connect?: Maybe<
    ForumPostCommentWhereUniqueInput[] | ForumPostCommentWhereUniqueInput
  >;
  set?: Maybe<
    ForumPostCommentWhereUniqueInput[] | ForumPostCommentWhereUniqueInput
  >;
  disconnect?: Maybe<
    ForumPostCommentWhereUniqueInput[] | ForumPostCommentWhereUniqueInput
  >;
  update?: Maybe<
    | ForumPostCommentUpdateWithWhereUniqueWithoutUserInput[]
    | ForumPostCommentUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | ForumPostCommentUpsertWithWhereUniqueWithoutUserInput[]
    | ForumPostCommentUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<
    ForumPostCommentScalarWhereInput[] | ForumPostCommentScalarWhereInput
  >;
  updateMany?: Maybe<
    | ForumPostCommentUpdateManyWithWhereNestedInput[]
    | ForumPostCommentUpdateManyWithWhereNestedInput
  >;
}

export interface ForumPostCommentUpdateWithWhereUniqueWithoutUserInput {
  where: ForumPostCommentWhereUniqueInput;
  data: ForumPostCommentUpdateWithoutUserDataInput;
}

export interface ForumPostCommentUpdateWithoutUserDataInput {
  forumPost?: Maybe<ForumPostUpdateOneRequiredWithoutCommentsInput>;
  comment?: Maybe<String>;
}

export interface ForumPostUpdateOneRequiredWithoutCommentsInput {
  create?: Maybe<ForumPostCreateWithoutCommentsInput>;
  update?: Maybe<ForumPostUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<ForumPostUpsertWithoutCommentsInput>;
  connect?: Maybe<ForumPostWhereUniqueInput>;
}

export interface ForumPostUpdateWithoutCommentsDataInput {
  postedBy?: Maybe<UserUpdateOneRequiredWithoutForumpostsInput>;
  forum?: Maybe<ForumUpdateOneRequiredWithoutPostsInput>;
  title?: Maybe<String>;
  content?: Maybe<String>;
  type?: Maybe<ForumPostType>;
}

export interface UserUpdateOneRequiredWithoutForumpostsInput {
  create?: Maybe<UserCreateWithoutForumpostsInput>;
  update?: Maybe<UserUpdateWithoutForumpostsDataInput>;
  upsert?: Maybe<UserUpsertWithoutForumpostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutForumpostsDataInput {
  firebaseId?: Maybe<String>;
  email?: Maybe<String>;
  name?: Maybe<String>;
  username?: Maybe<String>;
  profilePic?: Maybe<String>;
  isAnonymous?: Maybe<Boolean>;
  emailVerified?: Maybe<Boolean>;
  shops?: Maybe<ShopUpdateManyWithoutOwnersInput>;
  images?: Maybe<UserImageUpdateManyWithoutUserInput>;
  productReviews?: Maybe<ProductReviewUpdateManyWithoutUserInput>;
  cartItems?: Maybe<CartUpdateOneWithoutUserInput>;
  forums?: Maybe<ForumUpdateManyWithoutMembersInput>;
  postComments?: Maybe<ForumPostCommentUpdateManyWithoutUserInput>;
}

export interface ForumUpdateManyWithoutMembersInput {
  create?: Maybe<
    ForumCreateWithoutMembersInput[] | ForumCreateWithoutMembersInput
  >;
  delete?: Maybe<ForumWhereUniqueInput[] | ForumWhereUniqueInput>;
  connect?: Maybe<ForumWhereUniqueInput[] | ForumWhereUniqueInput>;
  set?: Maybe<ForumWhereUniqueInput[] | ForumWhereUniqueInput>;
  disconnect?: Maybe<ForumWhereUniqueInput[] | ForumWhereUniqueInput>;
  update?: Maybe<
    | ForumUpdateWithWhereUniqueWithoutMembersInput[]
    | ForumUpdateWithWhereUniqueWithoutMembersInput
  >;
  upsert?: Maybe<
    | ForumUpsertWithWhereUniqueWithoutMembersInput[]
    | ForumUpsertWithWhereUniqueWithoutMembersInput
  >;
  deleteMany?: Maybe<ForumScalarWhereInput[] | ForumScalarWhereInput>;
  updateMany?: Maybe<
    ForumUpdateManyWithWhereNestedInput[] | ForumUpdateManyWithWhereNestedInput
  >;
}

export interface ForumUpdateWithWhereUniqueWithoutMembersInput {
  where: ForumWhereUniqueInput;
  data: ForumUpdateWithoutMembersDataInput;
}

export interface ForumUpdateWithoutMembersDataInput {
  avatarPic?: Maybe<String>;
  coverPic?: Maybe<String>;
  posts?: Maybe<ForumPostUpdateManyWithoutForumInput>;
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface ForumPostUpdateManyWithoutForumInput {
  create?: Maybe<
    ForumPostCreateWithoutForumInput[] | ForumPostCreateWithoutForumInput
  >;
  delete?: Maybe<ForumPostWhereUniqueInput[] | ForumPostWhereUniqueInput>;
  connect?: Maybe<ForumPostWhereUniqueInput[] | ForumPostWhereUniqueInput>;
  set?: Maybe<ForumPostWhereUniqueInput[] | ForumPostWhereUniqueInput>;
  disconnect?: Maybe<ForumPostWhereUniqueInput[] | ForumPostWhereUniqueInput>;
  update?: Maybe<
    | ForumPostUpdateWithWhereUniqueWithoutForumInput[]
    | ForumPostUpdateWithWhereUniqueWithoutForumInput
  >;
  upsert?: Maybe<
    | ForumPostUpsertWithWhereUniqueWithoutForumInput[]
    | ForumPostUpsertWithWhereUniqueWithoutForumInput
  >;
  deleteMany?: Maybe<ForumPostScalarWhereInput[] | ForumPostScalarWhereInput>;
  updateMany?: Maybe<
    | ForumPostUpdateManyWithWhereNestedInput[]
    | ForumPostUpdateManyWithWhereNestedInput
  >;
}

export interface ForumPostUpdateWithWhereUniqueWithoutForumInput {
  where: ForumPostWhereUniqueInput;
  data: ForumPostUpdateWithoutForumDataInput;
}

export interface ForumPostUpdateWithoutForumDataInput {
  postedBy?: Maybe<UserUpdateOneRequiredWithoutForumpostsInput>;
  title?: Maybe<String>;
  content?: Maybe<String>;
  type?: Maybe<ForumPostType>;
  comments?: Maybe<ForumPostCommentUpdateManyWithoutForumPostInput>;
}

export interface ForumPostCommentUpdateManyWithoutForumPostInput {
  create?: Maybe<
    | ForumPostCommentCreateWithoutForumPostInput[]
    | ForumPostCommentCreateWithoutForumPostInput
  >;
  delete?: Maybe<
    ForumPostCommentWhereUniqueInput[] | ForumPostCommentWhereUniqueInput
  >;
  connect?: Maybe<
    ForumPostCommentWhereUniqueInput[] | ForumPostCommentWhereUniqueInput
  >;
  set?: Maybe<
    ForumPostCommentWhereUniqueInput[] | ForumPostCommentWhereUniqueInput
  >;
  disconnect?: Maybe<
    ForumPostCommentWhereUniqueInput[] | ForumPostCommentWhereUniqueInput
  >;
  update?: Maybe<
    | ForumPostCommentUpdateWithWhereUniqueWithoutForumPostInput[]
    | ForumPostCommentUpdateWithWhereUniqueWithoutForumPostInput
  >;
  upsert?: Maybe<
    | ForumPostCommentUpsertWithWhereUniqueWithoutForumPostInput[]
    | ForumPostCommentUpsertWithWhereUniqueWithoutForumPostInput
  >;
  deleteMany?: Maybe<
    ForumPostCommentScalarWhereInput[] | ForumPostCommentScalarWhereInput
  >;
  updateMany?: Maybe<
    | ForumPostCommentUpdateManyWithWhereNestedInput[]
    | ForumPostCommentUpdateManyWithWhereNestedInput
  >;
}

export interface ForumPostCommentUpdateWithWhereUniqueWithoutForumPostInput {
  where: ForumPostCommentWhereUniqueInput;
  data: ForumPostCommentUpdateWithoutForumPostDataInput;
}

export interface ForumPostCommentUpdateWithoutForumPostDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutPostCommentsInput>;
  comment?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutPostCommentsInput {
  create?: Maybe<UserCreateWithoutPostCommentsInput>;
  update?: Maybe<UserUpdateWithoutPostCommentsDataInput>;
  upsert?: Maybe<UserUpsertWithoutPostCommentsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutPostCommentsDataInput {
  firebaseId?: Maybe<String>;
  email?: Maybe<String>;
  name?: Maybe<String>;
  username?: Maybe<String>;
  profilePic?: Maybe<String>;
  isAnonymous?: Maybe<Boolean>;
  emailVerified?: Maybe<Boolean>;
  shops?: Maybe<ShopUpdateManyWithoutOwnersInput>;
  images?: Maybe<UserImageUpdateManyWithoutUserInput>;
  productReviews?: Maybe<ProductReviewUpdateManyWithoutUserInput>;
  cartItems?: Maybe<CartUpdateOneWithoutUserInput>;
  forumposts?: Maybe<ForumPostUpdateManyWithoutPostedByInput>;
  forums?: Maybe<ForumUpdateManyWithoutMembersInput>;
}

export interface UserUpsertWithoutPostCommentsInput {
  update: UserUpdateWithoutPostCommentsDataInput;
  create: UserCreateWithoutPostCommentsInput;
}

export interface ForumPostCommentUpsertWithWhereUniqueWithoutForumPostInput {
  where: ForumPostCommentWhereUniqueInput;
  update: ForumPostCommentUpdateWithoutForumPostDataInput;
  create: ForumPostCommentCreateWithoutForumPostInput;
}

export interface ForumPostCommentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  comment?: Maybe<String>;
  comment_not?: Maybe<String>;
  comment_in?: Maybe<String[] | String>;
  comment_not_in?: Maybe<String[] | String>;
  comment_lt?: Maybe<String>;
  comment_lte?: Maybe<String>;
  comment_gt?: Maybe<String>;
  comment_gte?: Maybe<String>;
  comment_contains?: Maybe<String>;
  comment_not_contains?: Maybe<String>;
  comment_starts_with?: Maybe<String>;
  comment_not_starts_with?: Maybe<String>;
  comment_ends_with?: Maybe<String>;
  comment_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    ForumPostCommentScalarWhereInput[] | ForumPostCommentScalarWhereInput
  >;
  OR?: Maybe<
    ForumPostCommentScalarWhereInput[] | ForumPostCommentScalarWhereInput
  >;
  NOT?: Maybe<
    ForumPostCommentScalarWhereInput[] | ForumPostCommentScalarWhereInput
  >;
}

export interface ForumPostCommentUpdateManyWithWhereNestedInput {
  where: ForumPostCommentScalarWhereInput;
  data: ForumPostCommentUpdateManyDataInput;
}

export interface ForumPostCommentUpdateManyDataInput {
  comment?: Maybe<String>;
}

export interface ForumPostUpsertWithWhereUniqueWithoutForumInput {
  where: ForumPostWhereUniqueInput;
  update: ForumPostUpdateWithoutForumDataInput;
  create: ForumPostCreateWithoutForumInput;
}

export interface ForumPostScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  type?: Maybe<ForumPostType>;
  type_not?: Maybe<ForumPostType>;
  type_in?: Maybe<ForumPostType[] | ForumPostType>;
  type_not_in?: Maybe<ForumPostType[] | ForumPostType>;
  AND?: Maybe<ForumPostScalarWhereInput[] | ForumPostScalarWhereInput>;
  OR?: Maybe<ForumPostScalarWhereInput[] | ForumPostScalarWhereInput>;
  NOT?: Maybe<ForumPostScalarWhereInput[] | ForumPostScalarWhereInput>;
}

export interface ForumPostUpdateManyWithWhereNestedInput {
  where: ForumPostScalarWhereInput;
  data: ForumPostUpdateManyDataInput;
}

export interface ForumPostUpdateManyDataInput {
  title?: Maybe<String>;
  content?: Maybe<String>;
  type?: Maybe<ForumPostType>;
}

export interface ForumUpsertWithWhereUniqueWithoutMembersInput {
  where: ForumWhereUniqueInput;
  update: ForumUpdateWithoutMembersDataInput;
  create: ForumCreateWithoutMembersInput;
}

export interface ForumScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  avatarPic?: Maybe<String>;
  avatarPic_not?: Maybe<String>;
  avatarPic_in?: Maybe<String[] | String>;
  avatarPic_not_in?: Maybe<String[] | String>;
  avatarPic_lt?: Maybe<String>;
  avatarPic_lte?: Maybe<String>;
  avatarPic_gt?: Maybe<String>;
  avatarPic_gte?: Maybe<String>;
  avatarPic_contains?: Maybe<String>;
  avatarPic_not_contains?: Maybe<String>;
  avatarPic_starts_with?: Maybe<String>;
  avatarPic_not_starts_with?: Maybe<String>;
  avatarPic_ends_with?: Maybe<String>;
  avatarPic_not_ends_with?: Maybe<String>;
  coverPic?: Maybe<String>;
  coverPic_not?: Maybe<String>;
  coverPic_in?: Maybe<String[] | String>;
  coverPic_not_in?: Maybe<String[] | String>;
  coverPic_lt?: Maybe<String>;
  coverPic_lte?: Maybe<String>;
  coverPic_gt?: Maybe<String>;
  coverPic_gte?: Maybe<String>;
  coverPic_contains?: Maybe<String>;
  coverPic_not_contains?: Maybe<String>;
  coverPic_starts_with?: Maybe<String>;
  coverPic_not_starts_with?: Maybe<String>;
  coverPic_ends_with?: Maybe<String>;
  coverPic_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ForumScalarWhereInput[] | ForumScalarWhereInput>;
  OR?: Maybe<ForumScalarWhereInput[] | ForumScalarWhereInput>;
  NOT?: Maybe<ForumScalarWhereInput[] | ForumScalarWhereInput>;
}

export interface ForumUpdateManyWithWhereNestedInput {
  where: ForumScalarWhereInput;
  data: ForumUpdateManyDataInput;
}

export interface ForumUpdateManyDataInput {
  avatarPic?: Maybe<String>;
  coverPic?: Maybe<String>;
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface UserUpsertWithoutForumpostsInput {
  update: UserUpdateWithoutForumpostsDataInput;
  create: UserCreateWithoutForumpostsInput;
}

export interface ForumPostUpsertWithoutCommentsInput {
  update: ForumPostUpdateWithoutCommentsDataInput;
  create: ForumPostCreateWithoutCommentsInput;
}

export interface ForumPostCommentUpsertWithWhereUniqueWithoutUserInput {
  where: ForumPostCommentWhereUniqueInput;
  update: ForumPostCommentUpdateWithoutUserDataInput;
  create: ForumPostCommentCreateWithoutUserInput;
}

export interface UserUpsertWithWhereUniqueWithoutForumsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutForumsDataInput;
  create: UserCreateWithoutForumsInput;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firebaseId?: Maybe<String>;
  firebaseId_not?: Maybe<String>;
  firebaseId_in?: Maybe<String[] | String>;
  firebaseId_not_in?: Maybe<String[] | String>;
  firebaseId_lt?: Maybe<String>;
  firebaseId_lte?: Maybe<String>;
  firebaseId_gt?: Maybe<String>;
  firebaseId_gte?: Maybe<String>;
  firebaseId_contains?: Maybe<String>;
  firebaseId_not_contains?: Maybe<String>;
  firebaseId_starts_with?: Maybe<String>;
  firebaseId_not_starts_with?: Maybe<String>;
  firebaseId_ends_with?: Maybe<String>;
  firebaseId_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  profilePic?: Maybe<String>;
  profilePic_not?: Maybe<String>;
  profilePic_in?: Maybe<String[] | String>;
  profilePic_not_in?: Maybe<String[] | String>;
  profilePic_lt?: Maybe<String>;
  profilePic_lte?: Maybe<String>;
  profilePic_gt?: Maybe<String>;
  profilePic_gte?: Maybe<String>;
  profilePic_contains?: Maybe<String>;
  profilePic_not_contains?: Maybe<String>;
  profilePic_starts_with?: Maybe<String>;
  profilePic_not_starts_with?: Maybe<String>;
  profilePic_ends_with?: Maybe<String>;
  profilePic_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  isAnonymous?: Maybe<Boolean>;
  isAnonymous_not?: Maybe<Boolean>;
  emailVerified?: Maybe<Boolean>;
  emailVerified_not?: Maybe<Boolean>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  firebaseId?: Maybe<String>;
  email?: Maybe<String>;
  name?: Maybe<String>;
  username?: Maybe<String>;
  profilePic?: Maybe<String>;
  isAnonymous?: Maybe<Boolean>;
  emailVerified?: Maybe<Boolean>;
}

export interface ForumUpsertWithoutPostsInput {
  update: ForumUpdateWithoutPostsDataInput;
  create: ForumCreateWithoutPostsInput;
}

export interface ForumPostUpsertWithWhereUniqueWithoutPostedByInput {
  where: ForumPostWhereUniqueInput;
  update: ForumPostUpdateWithoutPostedByDataInput;
  create: ForumPostCreateWithoutPostedByInput;
}

export interface UserUpsertWithoutProductReviewsInput {
  update: UserUpdateWithoutProductReviewsDataInput;
  create: UserCreateWithoutProductReviewsInput;
}

export interface ProductReviewUpsertWithWhereUniqueWithoutProductInput {
  where: ProductReviewWhereUniqueInput;
  update: ProductReviewUpdateWithoutProductDataInput;
  create: ProductReviewCreateWithoutProductInput;
}

export interface ProductUpsertNestedInput {
  update: ProductUpdateDataInput;
  create: ProductCreateInput;
}

export interface CartItemUpdatevariantsInput {
  set?: Maybe<String[] | String>;
}

export interface CartItemUpsertWithWhereUniqueWithoutCartInput {
  where: CartItemWhereUniqueInput;
  update: CartItemUpdateWithoutCartDataInput;
  create: CartItemCreateWithoutCartInput;
}

export interface CartItemScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  quantity?: Maybe<Int>;
  quantity_not?: Maybe<Int>;
  quantity_in?: Maybe<Int[] | Int>;
  quantity_not_in?: Maybe<Int[] | Int>;
  quantity_lt?: Maybe<Int>;
  quantity_lte?: Maybe<Int>;
  quantity_gt?: Maybe<Int>;
  quantity_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CartItemScalarWhereInput[] | CartItemScalarWhereInput>;
  OR?: Maybe<CartItemScalarWhereInput[] | CartItemScalarWhereInput>;
  NOT?: Maybe<CartItemScalarWhereInput[] | CartItemScalarWhereInput>;
}

export interface CartItemUpdateManyWithWhereNestedInput {
  where: CartItemScalarWhereInput;
  data: CartItemUpdateManyDataInput;
}

export interface CartItemUpdateManyDataInput {
  quantity?: Maybe<Int>;
  variants?: Maybe<CartItemUpdatevariantsInput>;
}

export interface CartUpsertWithoutUserInput {
  update: CartUpdateWithoutUserDataInput;
  create: CartCreateWithoutUserInput;
}

export interface UserUpsertWithWhereUniqueWithoutShopsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutShopsDataInput;
  create: UserCreateWithoutShopsInput;
}

export interface ShopUpsertWithoutProductsInput {
  update: ShopUpdateWithoutProductsDataInput;
  create: ShopCreateWithoutProductsInput;
}

export interface ProductUpsertWithWhereUniqueWithoutBrandInput {
  where: ProductWhereUniqueInput;
  update: ProductUpdateWithoutBrandDataInput;
  create: ProductCreateWithoutBrandInput;
}

export interface BrandUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface CartCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutCartItemsInput;
  items?: Maybe<CartItemCreateManyWithoutCartInput>;
}

export interface UserCreateOneWithoutCartItemsInput {
  create?: Maybe<UserCreateWithoutCartItemsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutCartItemsInput {
  id?: Maybe<ID_Input>;
  firebaseId: String;
  email?: Maybe<String>;
  name: String;
  username: String;
  profilePic?: Maybe<String>;
  isAnonymous?: Maybe<Boolean>;
  emailVerified?: Maybe<Boolean>;
  shops?: Maybe<ShopCreateManyWithoutOwnersInput>;
  images?: Maybe<UserImageCreateManyWithoutUserInput>;
  productReviews?: Maybe<ProductReviewCreateManyWithoutUserInput>;
  forumposts?: Maybe<ForumPostCreateManyWithoutPostedByInput>;
  forums?: Maybe<ForumCreateManyWithoutMembersInput>;
  postComments?: Maybe<ForumPostCommentCreateManyWithoutUserInput>;
}

export interface CartUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutCartItemsInput>;
  items?: Maybe<CartItemUpdateManyWithoutCartInput>;
}

export interface UserUpdateOneRequiredWithoutCartItemsInput {
  create?: Maybe<UserCreateWithoutCartItemsInput>;
  update?: Maybe<UserUpdateWithoutCartItemsDataInput>;
  upsert?: Maybe<UserUpsertWithoutCartItemsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutCartItemsDataInput {
  firebaseId?: Maybe<String>;
  email?: Maybe<String>;
  name?: Maybe<String>;
  username?: Maybe<String>;
  profilePic?: Maybe<String>;
  isAnonymous?: Maybe<Boolean>;
  emailVerified?: Maybe<Boolean>;
  shops?: Maybe<ShopUpdateManyWithoutOwnersInput>;
  images?: Maybe<UserImageUpdateManyWithoutUserInput>;
  productReviews?: Maybe<ProductReviewUpdateManyWithoutUserInput>;
  forumposts?: Maybe<ForumPostUpdateManyWithoutPostedByInput>;
  forums?: Maybe<ForumUpdateManyWithoutMembersInput>;
  postComments?: Maybe<ForumPostCommentUpdateManyWithoutUserInput>;
}

export interface UserUpsertWithoutCartItemsInput {
  update: UserUpdateWithoutCartItemsDataInput;
  create: UserCreateWithoutCartItemsInput;
}

export interface CartItemCreateInput {
  id?: Maybe<ID_Input>;
  product: ProductCreateOneInput;
  quantity: Int;
  variants?: Maybe<CartItemCreatevariantsInput>;
  cart: CartCreateOneWithoutItemsInput;
}

export interface CartCreateOneWithoutItemsInput {
  create?: Maybe<CartCreateWithoutItemsInput>;
  connect?: Maybe<CartWhereUniqueInput>;
}

export interface CartCreateWithoutItemsInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutCartItemsInput;
}

export interface CartItemUpdateInput {
  product?: Maybe<ProductUpdateOneRequiredInput>;
  quantity?: Maybe<Int>;
  variants?: Maybe<CartItemUpdatevariantsInput>;
  cart?: Maybe<CartUpdateOneRequiredWithoutItemsInput>;
}

export interface CartUpdateOneRequiredWithoutItemsInput {
  create?: Maybe<CartCreateWithoutItemsInput>;
  update?: Maybe<CartUpdateWithoutItemsDataInput>;
  upsert?: Maybe<CartUpsertWithoutItemsInput>;
  connect?: Maybe<CartWhereUniqueInput>;
}

export interface CartUpdateWithoutItemsDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutCartItemsInput>;
}

export interface CartUpsertWithoutItemsInput {
  update: CartUpdateWithoutItemsDataInput;
  create: CartCreateWithoutItemsInput;
}

export interface CartItemUpdateManyMutationInput {
  quantity?: Maybe<Int>;
  variants?: Maybe<CartItemUpdatevariantsInput>;
}

export interface CategoryCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  product?: Maybe<ProductCreateManyWithoutCategoriesInput>;
}

export interface ProductCreateManyWithoutCategoriesInput {
  create?: Maybe<
    ProductCreateWithoutCategoriesInput[] | ProductCreateWithoutCategoriesInput
  >;
  connect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
}

export interface ProductCreateWithoutCategoriesInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  price: String;
  brand?: Maybe<BrandCreateOneWithoutProductsInput>;
  tags?: Maybe<TagCreateManyWithoutProductsInput>;
  images?: Maybe<ProductImageCreateManyWithoutProductInput>;
  shop: ShopCreateOneWithoutProductsInput;
  variants?: Maybe<VariantCreateManyWithoutProductInput>;
  reviews?: Maybe<ProductReviewCreateManyWithoutProductInput>;
}

export interface CategoryUpdateInput {
  name?: Maybe<String>;
  product?: Maybe<ProductUpdateManyWithoutCategoriesInput>;
}

export interface ProductUpdateManyWithoutCategoriesInput {
  create?: Maybe<
    ProductCreateWithoutCategoriesInput[] | ProductCreateWithoutCategoriesInput
  >;
  delete?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  connect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  set?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  disconnect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  update?: Maybe<
    | ProductUpdateWithWhereUniqueWithoutCategoriesInput[]
    | ProductUpdateWithWhereUniqueWithoutCategoriesInput
  >;
  upsert?: Maybe<
    | ProductUpsertWithWhereUniqueWithoutCategoriesInput[]
    | ProductUpsertWithWhereUniqueWithoutCategoriesInput
  >;
  deleteMany?: Maybe<ProductScalarWhereInput[] | ProductScalarWhereInput>;
  updateMany?: Maybe<
    | ProductUpdateManyWithWhereNestedInput[]
    | ProductUpdateManyWithWhereNestedInput
  >;
}

export interface ProductUpdateWithWhereUniqueWithoutCategoriesInput {
  where: ProductWhereUniqueInput;
  data: ProductUpdateWithoutCategoriesDataInput;
}

export interface ProductUpdateWithoutCategoriesDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  price?: Maybe<String>;
  brand?: Maybe<BrandUpdateOneWithoutProductsInput>;
  tags?: Maybe<TagUpdateManyWithoutProductsInput>;
  images?: Maybe<ProductImageUpdateManyWithoutProductInput>;
  shop?: Maybe<ShopUpdateOneRequiredWithoutProductsInput>;
  variants?: Maybe<VariantUpdateManyWithoutProductInput>;
  reviews?: Maybe<ProductReviewUpdateManyWithoutProductInput>;
}

export interface ProductUpsertWithWhereUniqueWithoutCategoriesInput {
  where: ProductWhereUniqueInput;
  update: ProductUpdateWithoutCategoriesDataInput;
  create: ProductCreateWithoutCategoriesInput;
}

export interface CategoryUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface ForumCreateInput {
  id?: Maybe<ID_Input>;
  avatarPic?: Maybe<String>;
  coverPic?: Maybe<String>;
  members?: Maybe<UserCreateManyWithoutForumsInput>;
  posts?: Maybe<ForumPostCreateManyWithoutForumInput>;
  name: String;
  description?: Maybe<String>;
}

export interface ForumUpdateInput {
  avatarPic?: Maybe<String>;
  coverPic?: Maybe<String>;
  members?: Maybe<UserUpdateManyWithoutForumsInput>;
  posts?: Maybe<ForumPostUpdateManyWithoutForumInput>;
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface ForumUpdateManyMutationInput {
  avatarPic?: Maybe<String>;
  coverPic?: Maybe<String>;
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface ForumPostCreateInput {
  id?: Maybe<ID_Input>;
  postedBy: UserCreateOneWithoutForumpostsInput;
  forum: ForumCreateOneWithoutPostsInput;
  title: String;
  content?: Maybe<String>;
  type: ForumPostType;
  comments?: Maybe<ForumPostCommentCreateManyWithoutForumPostInput>;
}

export interface ForumPostUpdateInput {
  postedBy?: Maybe<UserUpdateOneRequiredWithoutForumpostsInput>;
  forum?: Maybe<ForumUpdateOneRequiredWithoutPostsInput>;
  title?: Maybe<String>;
  content?: Maybe<String>;
  type?: Maybe<ForumPostType>;
  comments?: Maybe<ForumPostCommentUpdateManyWithoutForumPostInput>;
}

export interface ForumPostUpdateManyMutationInput {
  title?: Maybe<String>;
  content?: Maybe<String>;
  type?: Maybe<ForumPostType>;
}

export interface ForumPostCommentCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutPostCommentsInput;
  forumPost: ForumPostCreateOneWithoutCommentsInput;
  comment: String;
}

export interface ForumPostCommentUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutPostCommentsInput>;
  forumPost?: Maybe<ForumPostUpdateOneRequiredWithoutCommentsInput>;
  comment?: Maybe<String>;
}

export interface ForumPostCommentUpdateManyMutationInput {
  comment?: Maybe<String>;
}

export interface OrderCreateInput {
  id?: Maybe<ID_Input>;
  items?: Maybe<orderItemCreateManyInput>;
  total: String;
  user: UserCreateOneInput;
  paymentId: String;
  PayerID: String;
  imageUrl?: Maybe<String>;
}

export interface orderItemCreateManyInput {
  create?: Maybe<orderItemCreateInput[] | orderItemCreateInput>;
  connect?: Maybe<orderItemWhereUniqueInput[] | orderItemWhereUniqueInput>;
}

export interface orderItemCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  price: String;
  quantity: Int;
  imageUrl?: Maybe<String>;
  variants?: Maybe<orderItemCreatevariantsInput>;
}

export interface orderItemCreatevariantsInput {
  set?: Maybe<String[] | String>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  firebaseId: String;
  email?: Maybe<String>;
  name: String;
  username: String;
  profilePic?: Maybe<String>;
  isAnonymous?: Maybe<Boolean>;
  emailVerified?: Maybe<Boolean>;
  shops?: Maybe<ShopCreateManyWithoutOwnersInput>;
  images?: Maybe<UserImageCreateManyWithoutUserInput>;
  productReviews?: Maybe<ProductReviewCreateManyWithoutUserInput>;
  cartItems?: Maybe<CartCreateOneWithoutUserInput>;
  forumposts?: Maybe<ForumPostCreateManyWithoutPostedByInput>;
  forums?: Maybe<ForumCreateManyWithoutMembersInput>;
  postComments?: Maybe<ForumPostCommentCreateManyWithoutUserInput>;
}

export interface OrderUpdateInput {
  items?: Maybe<orderItemUpdateManyInput>;
  total?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredInput>;
  paymentId?: Maybe<String>;
  PayerID?: Maybe<String>;
  imageUrl?: Maybe<String>;
}

export interface orderItemUpdateManyInput {
  create?: Maybe<orderItemCreateInput[] | orderItemCreateInput>;
  update?: Maybe<
    | orderItemUpdateWithWhereUniqueNestedInput[]
    | orderItemUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | orderItemUpsertWithWhereUniqueNestedInput[]
    | orderItemUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<orderItemWhereUniqueInput[] | orderItemWhereUniqueInput>;
  connect?: Maybe<orderItemWhereUniqueInput[] | orderItemWhereUniqueInput>;
  set?: Maybe<orderItemWhereUniqueInput[] | orderItemWhereUniqueInput>;
  disconnect?: Maybe<orderItemWhereUniqueInput[] | orderItemWhereUniqueInput>;
  deleteMany?: Maybe<orderItemScalarWhereInput[] | orderItemScalarWhereInput>;
  updateMany?: Maybe<
    | orderItemUpdateManyWithWhereNestedInput[]
    | orderItemUpdateManyWithWhereNestedInput
  >;
}

export interface orderItemUpdateWithWhereUniqueNestedInput {
  where: orderItemWhereUniqueInput;
  data: orderItemUpdateDataInput;
}

export interface orderItemUpdateDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  price?: Maybe<String>;
  quantity?: Maybe<Int>;
  imageUrl?: Maybe<String>;
  variants?: Maybe<orderItemUpdatevariantsInput>;
}

export interface orderItemUpdatevariantsInput {
  set?: Maybe<String[] | String>;
}

export interface orderItemUpsertWithWhereUniqueNestedInput {
  where: orderItemWhereUniqueInput;
  update: orderItemUpdateDataInput;
  create: orderItemCreateInput;
}

export interface orderItemScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  price?: Maybe<String>;
  price_not?: Maybe<String>;
  price_in?: Maybe<String[] | String>;
  price_not_in?: Maybe<String[] | String>;
  price_lt?: Maybe<String>;
  price_lte?: Maybe<String>;
  price_gt?: Maybe<String>;
  price_gte?: Maybe<String>;
  price_contains?: Maybe<String>;
  price_not_contains?: Maybe<String>;
  price_starts_with?: Maybe<String>;
  price_not_starts_with?: Maybe<String>;
  price_ends_with?: Maybe<String>;
  price_not_ends_with?: Maybe<String>;
  quantity?: Maybe<Int>;
  quantity_not?: Maybe<Int>;
  quantity_in?: Maybe<Int[] | Int>;
  quantity_not_in?: Maybe<Int[] | Int>;
  quantity_lt?: Maybe<Int>;
  quantity_lte?: Maybe<Int>;
  quantity_gt?: Maybe<Int>;
  quantity_gte?: Maybe<Int>;
  imageUrl?: Maybe<String>;
  imageUrl_not?: Maybe<String>;
  imageUrl_in?: Maybe<String[] | String>;
  imageUrl_not_in?: Maybe<String[] | String>;
  imageUrl_lt?: Maybe<String>;
  imageUrl_lte?: Maybe<String>;
  imageUrl_gt?: Maybe<String>;
  imageUrl_gte?: Maybe<String>;
  imageUrl_contains?: Maybe<String>;
  imageUrl_not_contains?: Maybe<String>;
  imageUrl_starts_with?: Maybe<String>;
  imageUrl_not_starts_with?: Maybe<String>;
  imageUrl_ends_with?: Maybe<String>;
  imageUrl_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<orderItemScalarWhereInput[] | orderItemScalarWhereInput>;
  OR?: Maybe<orderItemScalarWhereInput[] | orderItemScalarWhereInput>;
  NOT?: Maybe<orderItemScalarWhereInput[] | orderItemScalarWhereInput>;
}

export interface orderItemUpdateManyWithWhereNestedInput {
  where: orderItemScalarWhereInput;
  data: orderItemUpdateManyDataInput;
}

export interface orderItemUpdateManyDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  price?: Maybe<String>;
  quantity?: Maybe<Int>;
  imageUrl?: Maybe<String>;
  variants?: Maybe<orderItemUpdatevariantsInput>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  firebaseId?: Maybe<String>;
  email?: Maybe<String>;
  name?: Maybe<String>;
  username?: Maybe<String>;
  profilePic?: Maybe<String>;
  isAnonymous?: Maybe<Boolean>;
  emailVerified?: Maybe<Boolean>;
  shops?: Maybe<ShopUpdateManyWithoutOwnersInput>;
  images?: Maybe<UserImageUpdateManyWithoutUserInput>;
  productReviews?: Maybe<ProductReviewUpdateManyWithoutUserInput>;
  cartItems?: Maybe<CartUpdateOneWithoutUserInput>;
  forumposts?: Maybe<ForumPostUpdateManyWithoutPostedByInput>;
  forums?: Maybe<ForumUpdateManyWithoutMembersInput>;
  postComments?: Maybe<ForumPostCommentUpdateManyWithoutUserInput>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface OrderUpdateManyMutationInput {
  total?: Maybe<String>;
  paymentId?: Maybe<String>;
  PayerID?: Maybe<String>;
  imageUrl?: Maybe<String>;
}

export interface ProductUpdateInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  price?: Maybe<String>;
  categories?: Maybe<CategoryUpdateManyWithoutProductInput>;
  brand?: Maybe<BrandUpdateOneWithoutProductsInput>;
  tags?: Maybe<TagUpdateManyWithoutProductsInput>;
  images?: Maybe<ProductImageUpdateManyWithoutProductInput>;
  shop?: Maybe<ShopUpdateOneRequiredWithoutProductsInput>;
  variants?: Maybe<VariantUpdateManyWithoutProductInput>;
  reviews?: Maybe<ProductReviewUpdateManyWithoutProductInput>;
}

export interface ProductUpdateManyMutationInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  price?: Maybe<String>;
}

export interface ProductImageCreateInput {
  id?: Maybe<ID_Input>;
  imageUrl: String;
  largeImageUrl?: Maybe<String>;
  product?: Maybe<ProductCreateOneWithoutImagesInput>;
}

export interface ProductCreateOneWithoutImagesInput {
  create?: Maybe<ProductCreateWithoutImagesInput>;
  connect?: Maybe<ProductWhereUniqueInput>;
}

export interface ProductCreateWithoutImagesInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  price: String;
  categories?: Maybe<CategoryCreateManyWithoutProductInput>;
  brand?: Maybe<BrandCreateOneWithoutProductsInput>;
  tags?: Maybe<TagCreateManyWithoutProductsInput>;
  shop: ShopCreateOneWithoutProductsInput;
  variants?: Maybe<VariantCreateManyWithoutProductInput>;
  reviews?: Maybe<ProductReviewCreateManyWithoutProductInput>;
}

export interface ProductImageUpdateInput {
  imageUrl?: Maybe<String>;
  largeImageUrl?: Maybe<String>;
  product?: Maybe<ProductUpdateOneWithoutImagesInput>;
}

export interface ProductUpdateOneWithoutImagesInput {
  create?: Maybe<ProductCreateWithoutImagesInput>;
  update?: Maybe<ProductUpdateWithoutImagesDataInput>;
  upsert?: Maybe<ProductUpsertWithoutImagesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ProductWhereUniqueInput>;
}

export interface ProductUpdateWithoutImagesDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  price?: Maybe<String>;
  categories?: Maybe<CategoryUpdateManyWithoutProductInput>;
  brand?: Maybe<BrandUpdateOneWithoutProductsInput>;
  tags?: Maybe<TagUpdateManyWithoutProductsInput>;
  shop?: Maybe<ShopUpdateOneRequiredWithoutProductsInput>;
  variants?: Maybe<VariantUpdateManyWithoutProductInput>;
  reviews?: Maybe<ProductReviewUpdateManyWithoutProductInput>;
}

export interface ProductUpsertWithoutImagesInput {
  update: ProductUpdateWithoutImagesDataInput;
  create: ProductCreateWithoutImagesInput;
}

export interface ProductImageUpdateManyMutationInput {
  imageUrl?: Maybe<String>;
  largeImageUrl?: Maybe<String>;
}

export interface ProductReviewCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutProductReviewsInput;
  product: ProductCreateOneWithoutReviewsInput;
  rating: Int;
  review?: Maybe<String>;
}

export interface ProductReviewUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutProductReviewsInput>;
  product?: Maybe<ProductUpdateOneRequiredWithoutReviewsInput>;
  rating?: Maybe<Int>;
  review?: Maybe<String>;
}

export interface ProductReviewUpdateManyMutationInput {
  rating?: Maybe<Int>;
  review?: Maybe<String>;
}

export interface ShopCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  description: String;
  category: String;
  live?: Maybe<Boolean>;
  owners?: Maybe<UserCreateManyWithoutShopsInput>;
  images?: Maybe<ShopImageCreateManyWithoutShopInput>;
  products?: Maybe<ProductCreateManyWithoutShopInput>;
}

export interface ShopUpdateInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  category?: Maybe<String>;
  live?: Maybe<Boolean>;
  owners?: Maybe<UserUpdateManyWithoutShopsInput>;
  images?: Maybe<ShopImageUpdateManyWithoutShopInput>;
  products?: Maybe<ProductUpdateManyWithoutShopInput>;
}

export interface ShopUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  category?: Maybe<String>;
  live?: Maybe<Boolean>;
}

export interface ShopImageCreateInput {
  id?: Maybe<ID_Input>;
  imageUrl: String;
  largeImageUrl?: Maybe<String>;
  shop?: Maybe<ShopCreateOneWithoutImagesInput>;
}

export interface ShopCreateOneWithoutImagesInput {
  create?: Maybe<ShopCreateWithoutImagesInput>;
  connect?: Maybe<ShopWhereUniqueInput>;
}

export interface ShopCreateWithoutImagesInput {
  id?: Maybe<ID_Input>;
  name: String;
  description: String;
  category: String;
  live?: Maybe<Boolean>;
  owners?: Maybe<UserCreateManyWithoutShopsInput>;
  products?: Maybe<ProductCreateManyWithoutShopInput>;
}

export interface ShopImageUpdateInput {
  imageUrl?: Maybe<String>;
  largeImageUrl?: Maybe<String>;
  shop?: Maybe<ShopUpdateOneWithoutImagesInput>;
}

export interface ShopUpdateOneWithoutImagesInput {
  create?: Maybe<ShopCreateWithoutImagesInput>;
  update?: Maybe<ShopUpdateWithoutImagesDataInput>;
  upsert?: Maybe<ShopUpsertWithoutImagesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ShopWhereUniqueInput>;
}

export interface ShopUpdateWithoutImagesDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  category?: Maybe<String>;
  live?: Maybe<Boolean>;
  owners?: Maybe<UserUpdateManyWithoutShopsInput>;
  products?: Maybe<ProductUpdateManyWithoutShopInput>;
}

export interface ShopUpsertWithoutImagesInput {
  update: ShopUpdateWithoutImagesDataInput;
  create: ShopCreateWithoutImagesInput;
}

export interface ShopImageUpdateManyMutationInput {
  imageUrl?: Maybe<String>;
  largeImageUrl?: Maybe<String>;
}

export interface TagCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  products?: Maybe<ProductCreateManyWithoutTagsInput>;
}

export interface ProductCreateManyWithoutTagsInput {
  create?: Maybe<
    ProductCreateWithoutTagsInput[] | ProductCreateWithoutTagsInput
  >;
  connect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
}

export interface ProductCreateWithoutTagsInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  price: String;
  categories?: Maybe<CategoryCreateManyWithoutProductInput>;
  brand?: Maybe<BrandCreateOneWithoutProductsInput>;
  images?: Maybe<ProductImageCreateManyWithoutProductInput>;
  shop: ShopCreateOneWithoutProductsInput;
  variants?: Maybe<VariantCreateManyWithoutProductInput>;
  reviews?: Maybe<ProductReviewCreateManyWithoutProductInput>;
}

export interface TagUpdateInput {
  name?: Maybe<String>;
  products?: Maybe<ProductUpdateManyWithoutTagsInput>;
}

export interface ProductUpdateManyWithoutTagsInput {
  create?: Maybe<
    ProductCreateWithoutTagsInput[] | ProductCreateWithoutTagsInput
  >;
  delete?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  connect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  set?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  disconnect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  update?: Maybe<
    | ProductUpdateWithWhereUniqueWithoutTagsInput[]
    | ProductUpdateWithWhereUniqueWithoutTagsInput
  >;
  upsert?: Maybe<
    | ProductUpsertWithWhereUniqueWithoutTagsInput[]
    | ProductUpsertWithWhereUniqueWithoutTagsInput
  >;
  deleteMany?: Maybe<ProductScalarWhereInput[] | ProductScalarWhereInput>;
  updateMany?: Maybe<
    | ProductUpdateManyWithWhereNestedInput[]
    | ProductUpdateManyWithWhereNestedInput
  >;
}

export interface ProductUpdateWithWhereUniqueWithoutTagsInput {
  where: ProductWhereUniqueInput;
  data: ProductUpdateWithoutTagsDataInput;
}

export interface ProductUpdateWithoutTagsDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  price?: Maybe<String>;
  categories?: Maybe<CategoryUpdateManyWithoutProductInput>;
  brand?: Maybe<BrandUpdateOneWithoutProductsInput>;
  images?: Maybe<ProductImageUpdateManyWithoutProductInput>;
  shop?: Maybe<ShopUpdateOneRequiredWithoutProductsInput>;
  variants?: Maybe<VariantUpdateManyWithoutProductInput>;
  reviews?: Maybe<ProductReviewUpdateManyWithoutProductInput>;
}

export interface ProductUpsertWithWhereUniqueWithoutTagsInput {
  where: ProductWhereUniqueInput;
  update: ProductUpdateWithoutTagsDataInput;
  create: ProductCreateWithoutTagsInput;
}

export interface TagUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface UserUpdateInput {
  firebaseId?: Maybe<String>;
  email?: Maybe<String>;
  name?: Maybe<String>;
  username?: Maybe<String>;
  profilePic?: Maybe<String>;
  isAnonymous?: Maybe<Boolean>;
  emailVerified?: Maybe<Boolean>;
  shops?: Maybe<ShopUpdateManyWithoutOwnersInput>;
  images?: Maybe<UserImageUpdateManyWithoutUserInput>;
  productReviews?: Maybe<ProductReviewUpdateManyWithoutUserInput>;
  cartItems?: Maybe<CartUpdateOneWithoutUserInput>;
  forumposts?: Maybe<ForumPostUpdateManyWithoutPostedByInput>;
  forums?: Maybe<ForumUpdateManyWithoutMembersInput>;
  postComments?: Maybe<ForumPostCommentUpdateManyWithoutUserInput>;
}

export interface UserUpdateManyMutationInput {
  firebaseId?: Maybe<String>;
  email?: Maybe<String>;
  name?: Maybe<String>;
  username?: Maybe<String>;
  profilePic?: Maybe<String>;
  isAnonymous?: Maybe<Boolean>;
  emailVerified?: Maybe<Boolean>;
}

export interface UserImageCreateInput {
  id?: Maybe<ID_Input>;
  imageUrl: String;
  user?: Maybe<UserCreateOneWithoutImagesInput>;
}

export interface UserCreateOneWithoutImagesInput {
  create?: Maybe<UserCreateWithoutImagesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutImagesInput {
  id?: Maybe<ID_Input>;
  firebaseId: String;
  email?: Maybe<String>;
  name: String;
  username: String;
  profilePic?: Maybe<String>;
  isAnonymous?: Maybe<Boolean>;
  emailVerified?: Maybe<Boolean>;
  shops?: Maybe<ShopCreateManyWithoutOwnersInput>;
  productReviews?: Maybe<ProductReviewCreateManyWithoutUserInput>;
  cartItems?: Maybe<CartCreateOneWithoutUserInput>;
  forumposts?: Maybe<ForumPostCreateManyWithoutPostedByInput>;
  forums?: Maybe<ForumCreateManyWithoutMembersInput>;
  postComments?: Maybe<ForumPostCommentCreateManyWithoutUserInput>;
}

export interface UserImageUpdateInput {
  imageUrl?: Maybe<String>;
  user?: Maybe<UserUpdateOneWithoutImagesInput>;
}

export interface UserUpdateOneWithoutImagesInput {
  create?: Maybe<UserCreateWithoutImagesInput>;
  update?: Maybe<UserUpdateWithoutImagesDataInput>;
  upsert?: Maybe<UserUpsertWithoutImagesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutImagesDataInput {
  firebaseId?: Maybe<String>;
  email?: Maybe<String>;
  name?: Maybe<String>;
  username?: Maybe<String>;
  profilePic?: Maybe<String>;
  isAnonymous?: Maybe<Boolean>;
  emailVerified?: Maybe<Boolean>;
  shops?: Maybe<ShopUpdateManyWithoutOwnersInput>;
  productReviews?: Maybe<ProductReviewUpdateManyWithoutUserInput>;
  cartItems?: Maybe<CartUpdateOneWithoutUserInput>;
  forumposts?: Maybe<ForumPostUpdateManyWithoutPostedByInput>;
  forums?: Maybe<ForumUpdateManyWithoutMembersInput>;
  postComments?: Maybe<ForumPostCommentUpdateManyWithoutUserInput>;
}

export interface UserUpsertWithoutImagesInput {
  update: UserUpdateWithoutImagesDataInput;
  create: UserCreateWithoutImagesInput;
}

export interface UserImageUpdateManyMutationInput {
  imageUrl?: Maybe<String>;
}

export interface VariantCreateInput {
  id?: Maybe<ID_Input>;
  product: ProductCreateOneWithoutVariantsInput;
  name: String;
  values?: Maybe<VariantCreatevaluesInput>;
}

export interface ProductCreateOneWithoutVariantsInput {
  create?: Maybe<ProductCreateWithoutVariantsInput>;
  connect?: Maybe<ProductWhereUniqueInput>;
}

export interface ProductCreateWithoutVariantsInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  price: String;
  categories?: Maybe<CategoryCreateManyWithoutProductInput>;
  brand?: Maybe<BrandCreateOneWithoutProductsInput>;
  tags?: Maybe<TagCreateManyWithoutProductsInput>;
  images?: Maybe<ProductImageCreateManyWithoutProductInput>;
  shop: ShopCreateOneWithoutProductsInput;
  reviews?: Maybe<ProductReviewCreateManyWithoutProductInput>;
}

export interface VariantUpdateInput {
  product?: Maybe<ProductUpdateOneRequiredWithoutVariantsInput>;
  name?: Maybe<String>;
  values?: Maybe<VariantUpdatevaluesInput>;
}

export interface ProductUpdateOneRequiredWithoutVariantsInput {
  create?: Maybe<ProductCreateWithoutVariantsInput>;
  update?: Maybe<ProductUpdateWithoutVariantsDataInput>;
  upsert?: Maybe<ProductUpsertWithoutVariantsInput>;
  connect?: Maybe<ProductWhereUniqueInput>;
}

export interface ProductUpdateWithoutVariantsDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  price?: Maybe<String>;
  categories?: Maybe<CategoryUpdateManyWithoutProductInput>;
  brand?: Maybe<BrandUpdateOneWithoutProductsInput>;
  tags?: Maybe<TagUpdateManyWithoutProductsInput>;
  images?: Maybe<ProductImageUpdateManyWithoutProductInput>;
  shop?: Maybe<ShopUpdateOneRequiredWithoutProductsInput>;
  reviews?: Maybe<ProductReviewUpdateManyWithoutProductInput>;
}

export interface ProductUpsertWithoutVariantsInput {
  update: ProductUpdateWithoutVariantsDataInput;
  create: ProductCreateWithoutVariantsInput;
}

export interface VariantUpdateManyMutationInput {
  name?: Maybe<String>;
  values?: Maybe<VariantUpdatevaluesInput>;
}

export interface orderItemUpdateInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  price?: Maybe<String>;
  quantity?: Maybe<Int>;
  imageUrl?: Maybe<String>;
  variants?: Maybe<orderItemUpdatevariantsInput>;
}

export interface orderItemUpdateManyMutationInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  price?: Maybe<String>;
  quantity?: Maybe<Int>;
  imageUrl?: Maybe<String>;
  variants?: Maybe<orderItemUpdatevariantsInput>;
}

export interface BrandSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BrandWhereInput>;
  AND?: Maybe<BrandSubscriptionWhereInput[] | BrandSubscriptionWhereInput>;
  OR?: Maybe<BrandSubscriptionWhereInput[] | BrandSubscriptionWhereInput>;
  NOT?: Maybe<BrandSubscriptionWhereInput[] | BrandSubscriptionWhereInput>;
}

export interface CartSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CartWhereInput>;
  AND?: Maybe<CartSubscriptionWhereInput[] | CartSubscriptionWhereInput>;
  OR?: Maybe<CartSubscriptionWhereInput[] | CartSubscriptionWhereInput>;
  NOT?: Maybe<CartSubscriptionWhereInput[] | CartSubscriptionWhereInput>;
}

export interface CartItemSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CartItemWhereInput>;
  AND?: Maybe<
    CartItemSubscriptionWhereInput[] | CartItemSubscriptionWhereInput
  >;
  OR?: Maybe<CartItemSubscriptionWhereInput[] | CartItemSubscriptionWhereInput>;
  NOT?: Maybe<
    CartItemSubscriptionWhereInput[] | CartItemSubscriptionWhereInput
  >;
}

export interface CategorySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CategoryWhereInput>;
  AND?: Maybe<
    CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput
  >;
  OR?: Maybe<CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput>;
  NOT?: Maybe<
    CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput
  >;
}

export interface ForumSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ForumWhereInput>;
  AND?: Maybe<ForumSubscriptionWhereInput[] | ForumSubscriptionWhereInput>;
  OR?: Maybe<ForumSubscriptionWhereInput[] | ForumSubscriptionWhereInput>;
  NOT?: Maybe<ForumSubscriptionWhereInput[] | ForumSubscriptionWhereInput>;
}

export interface ForumPostSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ForumPostWhereInput>;
  AND?: Maybe<
    ForumPostSubscriptionWhereInput[] | ForumPostSubscriptionWhereInput
  >;
  OR?: Maybe<
    ForumPostSubscriptionWhereInput[] | ForumPostSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ForumPostSubscriptionWhereInput[] | ForumPostSubscriptionWhereInput
  >;
}

export interface ForumPostCommentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ForumPostCommentWhereInput>;
  AND?: Maybe<
    | ForumPostCommentSubscriptionWhereInput[]
    | ForumPostCommentSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ForumPostCommentSubscriptionWhereInput[]
    | ForumPostCommentSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ForumPostCommentSubscriptionWhereInput[]
    | ForumPostCommentSubscriptionWhereInput
  >;
}

export interface OrderSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OrderWhereInput>;
  AND?: Maybe<OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput>;
  OR?: Maybe<OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput>;
  NOT?: Maybe<OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput>;
}

export interface ProductSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProductWhereInput>;
  AND?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
  OR?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
  NOT?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
}

export interface ProductImageSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProductImageWhereInput>;
  AND?: Maybe<
    ProductImageSubscriptionWhereInput[] | ProductImageSubscriptionWhereInput
  >;
  OR?: Maybe<
    ProductImageSubscriptionWhereInput[] | ProductImageSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ProductImageSubscriptionWhereInput[] | ProductImageSubscriptionWhereInput
  >;
}

export interface ProductReviewSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProductReviewWhereInput>;
  AND?: Maybe<
    ProductReviewSubscriptionWhereInput[] | ProductReviewSubscriptionWhereInput
  >;
  OR?: Maybe<
    ProductReviewSubscriptionWhereInput[] | ProductReviewSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ProductReviewSubscriptionWhereInput[] | ProductReviewSubscriptionWhereInput
  >;
}

export interface ShopSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ShopWhereInput>;
  AND?: Maybe<ShopSubscriptionWhereInput[] | ShopSubscriptionWhereInput>;
  OR?: Maybe<ShopSubscriptionWhereInput[] | ShopSubscriptionWhereInput>;
  NOT?: Maybe<ShopSubscriptionWhereInput[] | ShopSubscriptionWhereInput>;
}

export interface ShopImageSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ShopImageWhereInput>;
  AND?: Maybe<
    ShopImageSubscriptionWhereInput[] | ShopImageSubscriptionWhereInput
  >;
  OR?: Maybe<
    ShopImageSubscriptionWhereInput[] | ShopImageSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ShopImageSubscriptionWhereInput[] | ShopImageSubscriptionWhereInput
  >;
}

export interface TagSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TagWhereInput>;
  AND?: Maybe<TagSubscriptionWhereInput[] | TagSubscriptionWhereInput>;
  OR?: Maybe<TagSubscriptionWhereInput[] | TagSubscriptionWhereInput>;
  NOT?: Maybe<TagSubscriptionWhereInput[] | TagSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface UserImageSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserImageWhereInput>;
  AND?: Maybe<
    UserImageSubscriptionWhereInput[] | UserImageSubscriptionWhereInput
  >;
  OR?: Maybe<
    UserImageSubscriptionWhereInput[] | UserImageSubscriptionWhereInput
  >;
  NOT?: Maybe<
    UserImageSubscriptionWhereInput[] | UserImageSubscriptionWhereInput
  >;
}

export interface VariantSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<VariantWhereInput>;
  AND?: Maybe<VariantSubscriptionWhereInput[] | VariantSubscriptionWhereInput>;
  OR?: Maybe<VariantSubscriptionWhereInput[] | VariantSubscriptionWhereInput>;
  NOT?: Maybe<VariantSubscriptionWhereInput[] | VariantSubscriptionWhereInput>;
}

export interface orderItemSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<orderItemWhereInput>;
  AND?: Maybe<
    orderItemSubscriptionWhereInput[] | orderItemSubscriptionWhereInput
  >;
  OR?: Maybe<
    orderItemSubscriptionWhereInput[] | orderItemSubscriptionWhereInput
  >;
  NOT?: Maybe<
    orderItemSubscriptionWhereInput[] | orderItemSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Brand {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface BrandPromise extends Promise<Brand>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  products: <T = FragmentableArray<Product>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface BrandSubscription
  extends Promise<AsyncIterator<Brand>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  products: <T = Promise<AsyncIterator<ProductSubscription>>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface BrandNullablePromise
  extends Promise<Brand | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  products: <T = FragmentableArray<Product>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Product {
  id: ID_Output;
  title: String;
  description: String;
  price: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProductPromise extends Promise<Product>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  price: () => Promise<String>;
  categories: <T = FragmentableArray<Category>>(args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  brand: <T = BrandPromise>() => T;
  tags: <T = FragmentableArray<Tag>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  images: <T = FragmentableArray<ProductImage>>(args?: {
    where?: ProductImageWhereInput;
    orderBy?: ProductImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  shop: <T = ShopPromise>() => T;
  variants: <T = FragmentableArray<Variant>>(args?: {
    where?: VariantWhereInput;
    orderBy?: VariantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  reviews: <T = FragmentableArray<ProductReview>>(args?: {
    where?: ProductReviewWhereInput;
    orderBy?: ProductReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProductSubscription
  extends Promise<AsyncIterator<Product>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<String>>;
  categories: <T = Promise<AsyncIterator<CategorySubscription>>>(args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  brand: <T = BrandSubscription>() => T;
  tags: <T = Promise<AsyncIterator<TagSubscription>>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  images: <T = Promise<AsyncIterator<ProductImageSubscription>>>(args?: {
    where?: ProductImageWhereInput;
    orderBy?: ProductImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  shop: <T = ShopSubscription>() => T;
  variants: <T = Promise<AsyncIterator<VariantSubscription>>>(args?: {
    where?: VariantWhereInput;
    orderBy?: VariantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  reviews: <T = Promise<AsyncIterator<ProductReviewSubscription>>>(args?: {
    where?: ProductReviewWhereInput;
    orderBy?: ProductReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProductNullablePromise
  extends Promise<Product | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  price: () => Promise<String>;
  categories: <T = FragmentableArray<Category>>(args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  brand: <T = BrandPromise>() => T;
  tags: <T = FragmentableArray<Tag>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  images: <T = FragmentableArray<ProductImage>>(args?: {
    where?: ProductImageWhereInput;
    orderBy?: ProductImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  shop: <T = ShopPromise>() => T;
  variants: <T = FragmentableArray<Variant>>(args?: {
    where?: VariantWhereInput;
    orderBy?: VariantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  reviews: <T = FragmentableArray<ProductReview>>(args?: {
    where?: ProductReviewWhereInput;
    orderBy?: ProductReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Category {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CategoryPromise extends Promise<Category>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  product: <T = FragmentableArray<Product>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CategorySubscription
  extends Promise<AsyncIterator<Category>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  product: <T = Promise<AsyncIterator<ProductSubscription>>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CategoryNullablePromise
  extends Promise<Category | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  product: <T = FragmentableArray<Product>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Tag {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TagPromise extends Promise<Tag>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  products: <T = FragmentableArray<Product>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TagSubscription
  extends Promise<AsyncIterator<Tag>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  products: <T = Promise<AsyncIterator<ProductSubscription>>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TagNullablePromise extends Promise<Tag | null>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  products: <T = FragmentableArray<Product>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProductImage {
  id: ID_Output;
  imageUrl: String;
  largeImageUrl?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProductImagePromise
  extends Promise<ProductImage>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  imageUrl: () => Promise<String>;
  largeImageUrl: () => Promise<String>;
  product: <T = ProductPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProductImageSubscription
  extends Promise<AsyncIterator<ProductImage>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  imageUrl: () => Promise<AsyncIterator<String>>;
  largeImageUrl: () => Promise<AsyncIterator<String>>;
  product: <T = ProductSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProductImageNullablePromise
  extends Promise<ProductImage | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  imageUrl: () => Promise<String>;
  largeImageUrl: () => Promise<String>;
  product: <T = ProductPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Shop {
  id: ID_Output;
  name: String;
  description: String;
  category: String;
  live: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ShopPromise extends Promise<Shop>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  category: () => Promise<String>;
  live: () => Promise<Boolean>;
  owners: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  images: <T = FragmentableArray<ShopImage>>(args?: {
    where?: ShopImageWhereInput;
    orderBy?: ShopImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  products: <T = FragmentableArray<Product>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ShopSubscription
  extends Promise<AsyncIterator<Shop>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<String>>;
  live: () => Promise<AsyncIterator<Boolean>>;
  owners: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  images: <T = Promise<AsyncIterator<ShopImageSubscription>>>(args?: {
    where?: ShopImageWhereInput;
    orderBy?: ShopImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  products: <T = Promise<AsyncIterator<ProductSubscription>>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ShopNullablePromise
  extends Promise<Shop | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  category: () => Promise<String>;
  live: () => Promise<Boolean>;
  owners: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  images: <T = FragmentableArray<ShopImage>>(args?: {
    where?: ShopImageWhereInput;
    orderBy?: ShopImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  products: <T = FragmentableArray<Product>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface User {
  id: ID_Output;
  firebaseId: String;
  email?: String;
  name: String;
  username: String;
  profilePic?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  isAnonymous: Boolean;
  emailVerified?: Boolean;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  firebaseId: () => Promise<String>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  username: () => Promise<String>;
  profilePic: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  isAnonymous: () => Promise<Boolean>;
  emailVerified: () => Promise<Boolean>;
  shops: <T = FragmentableArray<Shop>>(args?: {
    where?: ShopWhereInput;
    orderBy?: ShopOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  images: <T = FragmentableArray<UserImage>>(args?: {
    where?: UserImageWhereInput;
    orderBy?: UserImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  productReviews: <T = FragmentableArray<ProductReview>>(args?: {
    where?: ProductReviewWhereInput;
    orderBy?: ProductReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  cartItems: <T = CartPromise>() => T;
  forumposts: <T = FragmentableArray<ForumPost>>(args?: {
    where?: ForumPostWhereInput;
    orderBy?: ForumPostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  forums: <T = FragmentableArray<Forum>>(args?: {
    where?: ForumWhereInput;
    orderBy?: ForumOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  postComments: <T = FragmentableArray<ForumPostComment>>(args?: {
    where?: ForumPostCommentWhereInput;
    orderBy?: ForumPostCommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firebaseId: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  profilePic: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  isAnonymous: () => Promise<AsyncIterator<Boolean>>;
  emailVerified: () => Promise<AsyncIterator<Boolean>>;
  shops: <T = Promise<AsyncIterator<ShopSubscription>>>(args?: {
    where?: ShopWhereInput;
    orderBy?: ShopOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  images: <T = Promise<AsyncIterator<UserImageSubscription>>>(args?: {
    where?: UserImageWhereInput;
    orderBy?: UserImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  productReviews: <
    T = Promise<AsyncIterator<ProductReviewSubscription>>
  >(args?: {
    where?: ProductReviewWhereInput;
    orderBy?: ProductReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  cartItems: <T = CartSubscription>() => T;
  forumposts: <T = Promise<AsyncIterator<ForumPostSubscription>>>(args?: {
    where?: ForumPostWhereInput;
    orderBy?: ForumPostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  forums: <T = Promise<AsyncIterator<ForumSubscription>>>(args?: {
    where?: ForumWhereInput;
    orderBy?: ForumOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  postComments: <
    T = Promise<AsyncIterator<ForumPostCommentSubscription>>
  >(args?: {
    where?: ForumPostCommentWhereInput;
    orderBy?: ForumPostCommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firebaseId: () => Promise<String>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  username: () => Promise<String>;
  profilePic: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  isAnonymous: () => Promise<Boolean>;
  emailVerified: () => Promise<Boolean>;
  shops: <T = FragmentableArray<Shop>>(args?: {
    where?: ShopWhereInput;
    orderBy?: ShopOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  images: <T = FragmentableArray<UserImage>>(args?: {
    where?: UserImageWhereInput;
    orderBy?: UserImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  productReviews: <T = FragmentableArray<ProductReview>>(args?: {
    where?: ProductReviewWhereInput;
    orderBy?: ProductReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  cartItems: <T = CartPromise>() => T;
  forumposts: <T = FragmentableArray<ForumPost>>(args?: {
    where?: ForumPostWhereInput;
    orderBy?: ForumPostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  forums: <T = FragmentableArray<Forum>>(args?: {
    where?: ForumWhereInput;
    orderBy?: ForumOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  postComments: <T = FragmentableArray<ForumPostComment>>(args?: {
    where?: ForumPostCommentWhereInput;
    orderBy?: ForumPostCommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserImage {
  id: ID_Output;
  imageUrl: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserImagePromise extends Promise<UserImage>, Fragmentable {
  id: () => Promise<ID_Output>;
  imageUrl: () => Promise<String>;
  user: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserImageSubscription
  extends Promise<AsyncIterator<UserImage>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  imageUrl: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserImageNullablePromise
  extends Promise<UserImage | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  imageUrl: () => Promise<String>;
  user: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProductReview {
  id: ID_Output;
  rating: Int;
  review?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProductReviewPromise
  extends Promise<ProductReview>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  product: <T = ProductPromise>() => T;
  rating: () => Promise<Int>;
  review: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProductReviewSubscription
  extends Promise<AsyncIterator<ProductReview>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  product: <T = ProductSubscription>() => T;
  rating: () => Promise<AsyncIterator<Int>>;
  review: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProductReviewNullablePromise
  extends Promise<ProductReview | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  product: <T = ProductPromise>() => T;
  rating: () => Promise<Int>;
  review: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Cart {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CartPromise extends Promise<Cart>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  items: <T = FragmentableArray<CartItem>>(args?: {
    where?: CartItemWhereInput;
    orderBy?: CartItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CartSubscription
  extends Promise<AsyncIterator<Cart>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  items: <T = Promise<AsyncIterator<CartItemSubscription>>>(args?: {
    where?: CartItemWhereInput;
    orderBy?: CartItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CartNullablePromise
  extends Promise<Cart | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  items: <T = FragmentableArray<CartItem>>(args?: {
    where?: CartItemWhereInput;
    orderBy?: CartItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CartItem {
  id: ID_Output;
  quantity: Int;
  variants: String[];
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CartItemPromise extends Promise<CartItem>, Fragmentable {
  id: () => Promise<ID_Output>;
  product: <T = ProductPromise>() => T;
  quantity: () => Promise<Int>;
  variants: () => Promise<String[]>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  cart: <T = CartPromise>() => T;
}

export interface CartItemSubscription
  extends Promise<AsyncIterator<CartItem>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  product: <T = ProductSubscription>() => T;
  quantity: () => Promise<AsyncIterator<Int>>;
  variants: () => Promise<AsyncIterator<String[]>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  cart: <T = CartSubscription>() => T;
}

export interface CartItemNullablePromise
  extends Promise<CartItem | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  product: <T = ProductPromise>() => T;
  quantity: () => Promise<Int>;
  variants: () => Promise<String[]>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  cart: <T = CartPromise>() => T;
}

export interface ForumPost {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  title: String;
  content?: String;
  type: ForumPostType;
}

export interface ForumPostPromise extends Promise<ForumPost>, Fragmentable {
  id: () => Promise<ID_Output>;
  postedBy: <T = UserPromise>() => T;
  forum: <T = ForumPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  type: () => Promise<ForumPostType>;
  comments: <T = FragmentableArray<ForumPostComment>>(args?: {
    where?: ForumPostCommentWhereInput;
    orderBy?: ForumPostCommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ForumPostSubscription
  extends Promise<AsyncIterator<ForumPost>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  postedBy: <T = UserSubscription>() => T;
  forum: <T = ForumSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<ForumPostType>>;
  comments: <T = Promise<AsyncIterator<ForumPostCommentSubscription>>>(args?: {
    where?: ForumPostCommentWhereInput;
    orderBy?: ForumPostCommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ForumPostNullablePromise
  extends Promise<ForumPost | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  postedBy: <T = UserPromise>() => T;
  forum: <T = ForumPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  type: () => Promise<ForumPostType>;
  comments: <T = FragmentableArray<ForumPostComment>>(args?: {
    where?: ForumPostCommentWhereInput;
    orderBy?: ForumPostCommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Forum {
  id: ID_Output;
  avatarPic: String;
  coverPic: String;
  name: String;
  description?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ForumPromise extends Promise<Forum>, Fragmentable {
  id: () => Promise<ID_Output>;
  avatarPic: () => Promise<String>;
  coverPic: () => Promise<String>;
  members: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  posts: <T = FragmentableArray<ForumPost>>(args?: {
    where?: ForumPostWhereInput;
    orderBy?: ForumPostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  name: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ForumSubscription
  extends Promise<AsyncIterator<Forum>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  avatarPic: () => Promise<AsyncIterator<String>>;
  coverPic: () => Promise<AsyncIterator<String>>;
  members: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  posts: <T = Promise<AsyncIterator<ForumPostSubscription>>>(args?: {
    where?: ForumPostWhereInput;
    orderBy?: ForumPostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ForumNullablePromise
  extends Promise<Forum | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  avatarPic: () => Promise<String>;
  coverPic: () => Promise<String>;
  members: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  posts: <T = FragmentableArray<ForumPost>>(args?: {
    where?: ForumPostWhereInput;
    orderBy?: ForumPostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  name: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ForumPostComment {
  id: ID_Output;
  comment: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ForumPostCommentPromise
  extends Promise<ForumPostComment>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  forumPost: <T = ForumPostPromise>() => T;
  comment: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ForumPostCommentSubscription
  extends Promise<AsyncIterator<ForumPostComment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  forumPost: <T = ForumPostSubscription>() => T;
  comment: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ForumPostCommentNullablePromise
  extends Promise<ForumPostComment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  forumPost: <T = ForumPostPromise>() => T;
  comment: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ShopImage {
  id: ID_Output;
  imageUrl: String;
  largeImageUrl?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ShopImagePromise extends Promise<ShopImage>, Fragmentable {
  id: () => Promise<ID_Output>;
  imageUrl: () => Promise<String>;
  largeImageUrl: () => Promise<String>;
  shop: <T = ShopPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ShopImageSubscription
  extends Promise<AsyncIterator<ShopImage>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  imageUrl: () => Promise<AsyncIterator<String>>;
  largeImageUrl: () => Promise<AsyncIterator<String>>;
  shop: <T = ShopSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ShopImageNullablePromise
  extends Promise<ShopImage | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  imageUrl: () => Promise<String>;
  largeImageUrl: () => Promise<String>;
  shop: <T = ShopPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Variant {
  id: ID_Output;
  name: String;
  values: String[];
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface VariantPromise extends Promise<Variant>, Fragmentable {
  id: () => Promise<ID_Output>;
  product: <T = ProductPromise>() => T;
  name: () => Promise<String>;
  values: () => Promise<String[]>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface VariantSubscription
  extends Promise<AsyncIterator<Variant>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  product: <T = ProductSubscription>() => T;
  name: () => Promise<AsyncIterator<String>>;
  values: () => Promise<AsyncIterator<String[]>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface VariantNullablePromise
  extends Promise<Variant | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  product: <T = ProductPromise>() => T;
  name: () => Promise<String>;
  values: () => Promise<String[]>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface BrandConnection {
  pageInfo: PageInfo;
  edges: BrandEdge[];
}

export interface BrandConnectionPromise
  extends Promise<BrandConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BrandEdge>>() => T;
  aggregate: <T = AggregateBrandPromise>() => T;
}

export interface BrandConnectionSubscription
  extends Promise<AsyncIterator<BrandConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BrandEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBrandSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BrandEdge {
  node: Brand;
  cursor: String;
}

export interface BrandEdgePromise extends Promise<BrandEdge>, Fragmentable {
  node: <T = BrandPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BrandEdgeSubscription
  extends Promise<AsyncIterator<BrandEdge>>,
    Fragmentable {
  node: <T = BrandSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBrand {
  count: Int;
}

export interface AggregateBrandPromise
  extends Promise<AggregateBrand>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBrandSubscription
  extends Promise<AsyncIterator<AggregateBrand>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CartConnection {
  pageInfo: PageInfo;
  edges: CartEdge[];
}

export interface CartConnectionPromise
  extends Promise<CartConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CartEdge>>() => T;
  aggregate: <T = AggregateCartPromise>() => T;
}

export interface CartConnectionSubscription
  extends Promise<AsyncIterator<CartConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CartEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCartSubscription>() => T;
}

export interface CartEdge {
  node: Cart;
  cursor: String;
}

export interface CartEdgePromise extends Promise<CartEdge>, Fragmentable {
  node: <T = CartPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CartEdgeSubscription
  extends Promise<AsyncIterator<CartEdge>>,
    Fragmentable {
  node: <T = CartSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCart {
  count: Int;
}

export interface AggregateCartPromise
  extends Promise<AggregateCart>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCartSubscription
  extends Promise<AsyncIterator<AggregateCart>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CartItemConnection {
  pageInfo: PageInfo;
  edges: CartItemEdge[];
}

export interface CartItemConnectionPromise
  extends Promise<CartItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CartItemEdge>>() => T;
  aggregate: <T = AggregateCartItemPromise>() => T;
}

export interface CartItemConnectionSubscription
  extends Promise<AsyncIterator<CartItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CartItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCartItemSubscription>() => T;
}

export interface CartItemEdge {
  node: CartItem;
  cursor: String;
}

export interface CartItemEdgePromise
  extends Promise<CartItemEdge>,
    Fragmentable {
  node: <T = CartItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CartItemEdgeSubscription
  extends Promise<AsyncIterator<CartItemEdge>>,
    Fragmentable {
  node: <T = CartItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCartItem {
  count: Int;
}

export interface AggregateCartItemPromise
  extends Promise<AggregateCartItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCartItemSubscription
  extends Promise<AsyncIterator<AggregateCartItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CategoryConnection {
  pageInfo: PageInfo;
  edges: CategoryEdge[];
}

export interface CategoryConnectionPromise
  extends Promise<CategoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CategoryEdge>>() => T;
  aggregate: <T = AggregateCategoryPromise>() => T;
}

export interface CategoryConnectionSubscription
  extends Promise<AsyncIterator<CategoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CategoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCategorySubscription>() => T;
}

export interface CategoryEdge {
  node: Category;
  cursor: String;
}

export interface CategoryEdgePromise
  extends Promise<CategoryEdge>,
    Fragmentable {
  node: <T = CategoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CategoryEdgeSubscription
  extends Promise<AsyncIterator<CategoryEdge>>,
    Fragmentable {
  node: <T = CategorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCategory {
  count: Int;
}

export interface AggregateCategoryPromise
  extends Promise<AggregateCategory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCategorySubscription
  extends Promise<AsyncIterator<AggregateCategory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ForumConnection {
  pageInfo: PageInfo;
  edges: ForumEdge[];
}

export interface ForumConnectionPromise
  extends Promise<ForumConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ForumEdge>>() => T;
  aggregate: <T = AggregateForumPromise>() => T;
}

export interface ForumConnectionSubscription
  extends Promise<AsyncIterator<ForumConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ForumEdgeSubscription>>>() => T;
  aggregate: <T = AggregateForumSubscription>() => T;
}

export interface ForumEdge {
  node: Forum;
  cursor: String;
}

export interface ForumEdgePromise extends Promise<ForumEdge>, Fragmentable {
  node: <T = ForumPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ForumEdgeSubscription
  extends Promise<AsyncIterator<ForumEdge>>,
    Fragmentable {
  node: <T = ForumSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateForum {
  count: Int;
}

export interface AggregateForumPromise
  extends Promise<AggregateForum>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateForumSubscription
  extends Promise<AsyncIterator<AggregateForum>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ForumPostConnection {
  pageInfo: PageInfo;
  edges: ForumPostEdge[];
}

export interface ForumPostConnectionPromise
  extends Promise<ForumPostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ForumPostEdge>>() => T;
  aggregate: <T = AggregateForumPostPromise>() => T;
}

export interface ForumPostConnectionSubscription
  extends Promise<AsyncIterator<ForumPostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ForumPostEdgeSubscription>>>() => T;
  aggregate: <T = AggregateForumPostSubscription>() => T;
}

export interface ForumPostEdge {
  node: ForumPost;
  cursor: String;
}

export interface ForumPostEdgePromise
  extends Promise<ForumPostEdge>,
    Fragmentable {
  node: <T = ForumPostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ForumPostEdgeSubscription
  extends Promise<AsyncIterator<ForumPostEdge>>,
    Fragmentable {
  node: <T = ForumPostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateForumPost {
  count: Int;
}

export interface AggregateForumPostPromise
  extends Promise<AggregateForumPost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateForumPostSubscription
  extends Promise<AsyncIterator<AggregateForumPost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ForumPostCommentConnection {
  pageInfo: PageInfo;
  edges: ForumPostCommentEdge[];
}

export interface ForumPostCommentConnectionPromise
  extends Promise<ForumPostCommentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ForumPostCommentEdge>>() => T;
  aggregate: <T = AggregateForumPostCommentPromise>() => T;
}

export interface ForumPostCommentConnectionSubscription
  extends Promise<AsyncIterator<ForumPostCommentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ForumPostCommentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateForumPostCommentSubscription>() => T;
}

export interface ForumPostCommentEdge {
  node: ForumPostComment;
  cursor: String;
}

export interface ForumPostCommentEdgePromise
  extends Promise<ForumPostCommentEdge>,
    Fragmentable {
  node: <T = ForumPostCommentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ForumPostCommentEdgeSubscription
  extends Promise<AsyncIterator<ForumPostCommentEdge>>,
    Fragmentable {
  node: <T = ForumPostCommentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateForumPostComment {
  count: Int;
}

export interface AggregateForumPostCommentPromise
  extends Promise<AggregateForumPostComment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateForumPostCommentSubscription
  extends Promise<AsyncIterator<AggregateForumPostComment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Order {
  id: ID_Output;
  total: String;
  paymentId: String;
  PayerID: String;
  imageUrl?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface OrderPromise extends Promise<Order>, Fragmentable {
  id: () => Promise<ID_Output>;
  items: <T = FragmentableArray<orderItem>>(args?: {
    where?: orderItemWhereInput;
    orderBy?: orderItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  total: () => Promise<String>;
  user: <T = UserPromise>() => T;
  paymentId: () => Promise<String>;
  PayerID: () => Promise<String>;
  imageUrl: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface OrderSubscription
  extends Promise<AsyncIterator<Order>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  items: <T = Promise<AsyncIterator<orderItemSubscription>>>(args?: {
    where?: orderItemWhereInput;
    orderBy?: orderItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  total: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  paymentId: () => Promise<AsyncIterator<String>>;
  PayerID: () => Promise<AsyncIterator<String>>;
  imageUrl: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface OrderNullablePromise
  extends Promise<Order | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  items: <T = FragmentableArray<orderItem>>(args?: {
    where?: orderItemWhereInput;
    orderBy?: orderItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  total: () => Promise<String>;
  user: <T = UserPromise>() => T;
  paymentId: () => Promise<String>;
  PayerID: () => Promise<String>;
  imageUrl: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface orderItem {
  id: ID_Output;
  title: String;
  description: String;
  price: String;
  quantity: Int;
  imageUrl?: String;
  variants: String[];
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface orderItemPromise extends Promise<orderItem>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  price: () => Promise<String>;
  quantity: () => Promise<Int>;
  imageUrl: () => Promise<String>;
  variants: () => Promise<String[]>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface orderItemSubscription
  extends Promise<AsyncIterator<orderItem>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<String>>;
  quantity: () => Promise<AsyncIterator<Int>>;
  imageUrl: () => Promise<AsyncIterator<String>>;
  variants: () => Promise<AsyncIterator<String[]>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface orderItemNullablePromise
  extends Promise<orderItem | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  price: () => Promise<String>;
  quantity: () => Promise<Int>;
  imageUrl: () => Promise<String>;
  variants: () => Promise<String[]>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface OrderConnection {
  pageInfo: PageInfo;
  edges: OrderEdge[];
}

export interface OrderConnectionPromise
  extends Promise<OrderConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrderEdge>>() => T;
  aggregate: <T = AggregateOrderPromise>() => T;
}

export interface OrderConnectionSubscription
  extends Promise<AsyncIterator<OrderConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrderEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrderSubscription>() => T;
}

export interface OrderEdge {
  node: Order;
  cursor: String;
}

export interface OrderEdgePromise extends Promise<OrderEdge>, Fragmentable {
  node: <T = OrderPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrderEdgeSubscription
  extends Promise<AsyncIterator<OrderEdge>>,
    Fragmentable {
  node: <T = OrderSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOrder {
  count: Int;
}

export interface AggregateOrderPromise
  extends Promise<AggregateOrder>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrderSubscription
  extends Promise<AsyncIterator<AggregateOrder>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProductConnection {
  pageInfo: PageInfo;
  edges: ProductEdge[];
}

export interface ProductConnectionPromise
  extends Promise<ProductConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductEdge>>() => T;
  aggregate: <T = AggregateProductPromise>() => T;
}

export interface ProductConnectionSubscription
  extends Promise<AsyncIterator<ProductConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductSubscription>() => T;
}

export interface ProductEdge {
  node: Product;
  cursor: String;
}

export interface ProductEdgePromise extends Promise<ProductEdge>, Fragmentable {
  node: <T = ProductPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductEdgeSubscription
  extends Promise<AsyncIterator<ProductEdge>>,
    Fragmentable {
  node: <T = ProductSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProduct {
  count: Int;
}

export interface AggregateProductPromise
  extends Promise<AggregateProduct>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductSubscription
  extends Promise<AsyncIterator<AggregateProduct>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProductImageConnection {
  pageInfo: PageInfo;
  edges: ProductImageEdge[];
}

export interface ProductImageConnectionPromise
  extends Promise<ProductImageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductImageEdge>>() => T;
  aggregate: <T = AggregateProductImagePromise>() => T;
}

export interface ProductImageConnectionSubscription
  extends Promise<AsyncIterator<ProductImageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductImageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductImageSubscription>() => T;
}

export interface ProductImageEdge {
  node: ProductImage;
  cursor: String;
}

export interface ProductImageEdgePromise
  extends Promise<ProductImageEdge>,
    Fragmentable {
  node: <T = ProductImagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductImageEdgeSubscription
  extends Promise<AsyncIterator<ProductImageEdge>>,
    Fragmentable {
  node: <T = ProductImageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProductImage {
  count: Int;
}

export interface AggregateProductImagePromise
  extends Promise<AggregateProductImage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductImageSubscription
  extends Promise<AsyncIterator<AggregateProductImage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProductReviewConnection {
  pageInfo: PageInfo;
  edges: ProductReviewEdge[];
}

export interface ProductReviewConnectionPromise
  extends Promise<ProductReviewConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductReviewEdge>>() => T;
  aggregate: <T = AggregateProductReviewPromise>() => T;
}

export interface ProductReviewConnectionSubscription
  extends Promise<AsyncIterator<ProductReviewConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductReviewEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductReviewSubscription>() => T;
}

export interface ProductReviewEdge {
  node: ProductReview;
  cursor: String;
}

export interface ProductReviewEdgePromise
  extends Promise<ProductReviewEdge>,
    Fragmentable {
  node: <T = ProductReviewPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductReviewEdgeSubscription
  extends Promise<AsyncIterator<ProductReviewEdge>>,
    Fragmentable {
  node: <T = ProductReviewSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProductReview {
  count: Int;
}

export interface AggregateProductReviewPromise
  extends Promise<AggregateProductReview>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductReviewSubscription
  extends Promise<AsyncIterator<AggregateProductReview>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ShopConnection {
  pageInfo: PageInfo;
  edges: ShopEdge[];
}

export interface ShopConnectionPromise
  extends Promise<ShopConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ShopEdge>>() => T;
  aggregate: <T = AggregateShopPromise>() => T;
}

export interface ShopConnectionSubscription
  extends Promise<AsyncIterator<ShopConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ShopEdgeSubscription>>>() => T;
  aggregate: <T = AggregateShopSubscription>() => T;
}

export interface ShopEdge {
  node: Shop;
  cursor: String;
}

export interface ShopEdgePromise extends Promise<ShopEdge>, Fragmentable {
  node: <T = ShopPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ShopEdgeSubscription
  extends Promise<AsyncIterator<ShopEdge>>,
    Fragmentable {
  node: <T = ShopSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateShop {
  count: Int;
}

export interface AggregateShopPromise
  extends Promise<AggregateShop>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateShopSubscription
  extends Promise<AsyncIterator<AggregateShop>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ShopImageConnection {
  pageInfo: PageInfo;
  edges: ShopImageEdge[];
}

export interface ShopImageConnectionPromise
  extends Promise<ShopImageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ShopImageEdge>>() => T;
  aggregate: <T = AggregateShopImagePromise>() => T;
}

export interface ShopImageConnectionSubscription
  extends Promise<AsyncIterator<ShopImageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ShopImageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateShopImageSubscription>() => T;
}

export interface ShopImageEdge {
  node: ShopImage;
  cursor: String;
}

export interface ShopImageEdgePromise
  extends Promise<ShopImageEdge>,
    Fragmentable {
  node: <T = ShopImagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ShopImageEdgeSubscription
  extends Promise<AsyncIterator<ShopImageEdge>>,
    Fragmentable {
  node: <T = ShopImageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateShopImage {
  count: Int;
}

export interface AggregateShopImagePromise
  extends Promise<AggregateShopImage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateShopImageSubscription
  extends Promise<AsyncIterator<AggregateShopImage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TagConnection {
  pageInfo: PageInfo;
  edges: TagEdge[];
}

export interface TagConnectionPromise
  extends Promise<TagConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TagEdge>>() => T;
  aggregate: <T = AggregateTagPromise>() => T;
}

export interface TagConnectionSubscription
  extends Promise<AsyncIterator<TagConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TagEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTagSubscription>() => T;
}

export interface TagEdge {
  node: Tag;
  cursor: String;
}

export interface TagEdgePromise extends Promise<TagEdge>, Fragmentable {
  node: <T = TagPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TagEdgeSubscription
  extends Promise<AsyncIterator<TagEdge>>,
    Fragmentable {
  node: <T = TagSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTag {
  count: Int;
}

export interface AggregateTagPromise
  extends Promise<AggregateTag>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTagSubscription
  extends Promise<AsyncIterator<AggregateTag>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserImageConnection {
  pageInfo: PageInfo;
  edges: UserImageEdge[];
}

export interface UserImageConnectionPromise
  extends Promise<UserImageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserImageEdge>>() => T;
  aggregate: <T = AggregateUserImagePromise>() => T;
}

export interface UserImageConnectionSubscription
  extends Promise<AsyncIterator<UserImageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserImageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserImageSubscription>() => T;
}

export interface UserImageEdge {
  node: UserImage;
  cursor: String;
}

export interface UserImageEdgePromise
  extends Promise<UserImageEdge>,
    Fragmentable {
  node: <T = UserImagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserImageEdgeSubscription
  extends Promise<AsyncIterator<UserImageEdge>>,
    Fragmentable {
  node: <T = UserImageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUserImage {
  count: Int;
}

export interface AggregateUserImagePromise
  extends Promise<AggregateUserImage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserImageSubscription
  extends Promise<AsyncIterator<AggregateUserImage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface VariantConnection {
  pageInfo: PageInfo;
  edges: VariantEdge[];
}

export interface VariantConnectionPromise
  extends Promise<VariantConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<VariantEdge>>() => T;
  aggregate: <T = AggregateVariantPromise>() => T;
}

export interface VariantConnectionSubscription
  extends Promise<AsyncIterator<VariantConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VariantEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVariantSubscription>() => T;
}

export interface VariantEdge {
  node: Variant;
  cursor: String;
}

export interface VariantEdgePromise extends Promise<VariantEdge>, Fragmentable {
  node: <T = VariantPromise>() => T;
  cursor: () => Promise<String>;
}

export interface VariantEdgeSubscription
  extends Promise<AsyncIterator<VariantEdge>>,
    Fragmentable {
  node: <T = VariantSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateVariant {
  count: Int;
}

export interface AggregateVariantPromise
  extends Promise<AggregateVariant>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVariantSubscription
  extends Promise<AsyncIterator<AggregateVariant>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface orderItemConnection {
  pageInfo: PageInfo;
  edges: orderItemEdge[];
}

export interface orderItemConnectionPromise
  extends Promise<orderItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<orderItemEdge>>() => T;
  aggregate: <T = AggregateorderItemPromise>() => T;
}

export interface orderItemConnectionSubscription
  extends Promise<AsyncIterator<orderItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<orderItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateorderItemSubscription>() => T;
}

export interface orderItemEdge {
  node: orderItem;
  cursor: String;
}

export interface orderItemEdgePromise
  extends Promise<orderItemEdge>,
    Fragmentable {
  node: <T = orderItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface orderItemEdgeSubscription
  extends Promise<AsyncIterator<orderItemEdge>>,
    Fragmentable {
  node: <T = orderItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateorderItem {
  count: Int;
}

export interface AggregateorderItemPromise
  extends Promise<AggregateorderItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateorderItemSubscription
  extends Promise<AsyncIterator<AggregateorderItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface BrandSubscriptionPayload {
  mutation: MutationType;
  node: Brand;
  updatedFields: String[];
  previousValues: BrandPreviousValues;
}

export interface BrandSubscriptionPayloadPromise
  extends Promise<BrandSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BrandPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BrandPreviousValuesPromise>() => T;
}

export interface BrandSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BrandSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BrandSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BrandPreviousValuesSubscription>() => T;
}

export interface BrandPreviousValues {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface BrandPreviousValuesPromise
  extends Promise<BrandPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface BrandPreviousValuesSubscription
  extends Promise<AsyncIterator<BrandPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CartSubscriptionPayload {
  mutation: MutationType;
  node: Cart;
  updatedFields: String[];
  previousValues: CartPreviousValues;
}

export interface CartSubscriptionPayloadPromise
  extends Promise<CartSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CartPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CartPreviousValuesPromise>() => T;
}

export interface CartSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CartSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CartSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CartPreviousValuesSubscription>() => T;
}

export interface CartPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CartPreviousValuesPromise
  extends Promise<CartPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CartPreviousValuesSubscription
  extends Promise<AsyncIterator<CartPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CartItemSubscriptionPayload {
  mutation: MutationType;
  node: CartItem;
  updatedFields: String[];
  previousValues: CartItemPreviousValues;
}

export interface CartItemSubscriptionPayloadPromise
  extends Promise<CartItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CartItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CartItemPreviousValuesPromise>() => T;
}

export interface CartItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CartItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CartItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CartItemPreviousValuesSubscription>() => T;
}

export interface CartItemPreviousValues {
  id: ID_Output;
  quantity: Int;
  variants: String[];
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CartItemPreviousValuesPromise
  extends Promise<CartItemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  quantity: () => Promise<Int>;
  variants: () => Promise<String[]>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CartItemPreviousValuesSubscription
  extends Promise<AsyncIterator<CartItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  quantity: () => Promise<AsyncIterator<Int>>;
  variants: () => Promise<AsyncIterator<String[]>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CategorySubscriptionPayload {
  mutation: MutationType;
  node: Category;
  updatedFields: String[];
  previousValues: CategoryPreviousValues;
}

export interface CategorySubscriptionPayloadPromise
  extends Promise<CategorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CategoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CategoryPreviousValuesPromise>() => T;
}

export interface CategorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CategorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CategorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CategoryPreviousValuesSubscription>() => T;
}

export interface CategoryPreviousValues {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CategoryPreviousValuesPromise
  extends Promise<CategoryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CategoryPreviousValuesSubscription
  extends Promise<AsyncIterator<CategoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ForumSubscriptionPayload {
  mutation: MutationType;
  node: Forum;
  updatedFields: String[];
  previousValues: ForumPreviousValues;
}

export interface ForumSubscriptionPayloadPromise
  extends Promise<ForumSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ForumPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ForumPreviousValuesPromise>() => T;
}

export interface ForumSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ForumSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ForumSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ForumPreviousValuesSubscription>() => T;
}

export interface ForumPreviousValues {
  id: ID_Output;
  avatarPic: String;
  coverPic: String;
  name: String;
  description?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ForumPreviousValuesPromise
  extends Promise<ForumPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  avatarPic: () => Promise<String>;
  coverPic: () => Promise<String>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ForumPreviousValuesSubscription
  extends Promise<AsyncIterator<ForumPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  avatarPic: () => Promise<AsyncIterator<String>>;
  coverPic: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ForumPostSubscriptionPayload {
  mutation: MutationType;
  node: ForumPost;
  updatedFields: String[];
  previousValues: ForumPostPreviousValues;
}

export interface ForumPostSubscriptionPayloadPromise
  extends Promise<ForumPostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ForumPostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ForumPostPreviousValuesPromise>() => T;
}

export interface ForumPostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ForumPostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ForumPostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ForumPostPreviousValuesSubscription>() => T;
}

export interface ForumPostPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  title: String;
  content?: String;
  type: ForumPostType;
}

export interface ForumPostPreviousValuesPromise
  extends Promise<ForumPostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  type: () => Promise<ForumPostType>;
}

export interface ForumPostPreviousValuesSubscription
  extends Promise<AsyncIterator<ForumPostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<ForumPostType>>;
}

export interface ForumPostCommentSubscriptionPayload {
  mutation: MutationType;
  node: ForumPostComment;
  updatedFields: String[];
  previousValues: ForumPostCommentPreviousValues;
}

export interface ForumPostCommentSubscriptionPayloadPromise
  extends Promise<ForumPostCommentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ForumPostCommentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ForumPostCommentPreviousValuesPromise>() => T;
}

export interface ForumPostCommentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ForumPostCommentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ForumPostCommentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ForumPostCommentPreviousValuesSubscription>() => T;
}

export interface ForumPostCommentPreviousValues {
  id: ID_Output;
  comment: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ForumPostCommentPreviousValuesPromise
  extends Promise<ForumPostCommentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  comment: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ForumPostCommentPreviousValuesSubscription
  extends Promise<AsyncIterator<ForumPostCommentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  comment: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface OrderSubscriptionPayload {
  mutation: MutationType;
  node: Order;
  updatedFields: String[];
  previousValues: OrderPreviousValues;
}

export interface OrderSubscriptionPayloadPromise
  extends Promise<OrderSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrderPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrderPreviousValuesPromise>() => T;
}

export interface OrderSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrderSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrderSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrderPreviousValuesSubscription>() => T;
}

export interface OrderPreviousValues {
  id: ID_Output;
  total: String;
  paymentId: String;
  PayerID: String;
  imageUrl?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface OrderPreviousValuesPromise
  extends Promise<OrderPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  total: () => Promise<String>;
  paymentId: () => Promise<String>;
  PayerID: () => Promise<String>;
  imageUrl: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface OrderPreviousValuesSubscription
  extends Promise<AsyncIterator<OrderPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  total: () => Promise<AsyncIterator<String>>;
  paymentId: () => Promise<AsyncIterator<String>>;
  PayerID: () => Promise<AsyncIterator<String>>;
  imageUrl: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProductSubscriptionPayload {
  mutation: MutationType;
  node: Product;
  updatedFields: String[];
  previousValues: ProductPreviousValues;
}

export interface ProductSubscriptionPayloadPromise
  extends Promise<ProductSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductPreviousValuesPromise>() => T;
}

export interface ProductSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductPreviousValuesSubscription>() => T;
}

export interface ProductPreviousValues {
  id: ID_Output;
  title: String;
  description: String;
  price: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProductPreviousValuesPromise
  extends Promise<ProductPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  price: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProductPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProductImageSubscriptionPayload {
  mutation: MutationType;
  node: ProductImage;
  updatedFields: String[];
  previousValues: ProductImagePreviousValues;
}

export interface ProductImageSubscriptionPayloadPromise
  extends Promise<ProductImageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductImagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductImagePreviousValuesPromise>() => T;
}

export interface ProductImageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductImageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductImageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductImagePreviousValuesSubscription>() => T;
}

export interface ProductImagePreviousValues {
  id: ID_Output;
  imageUrl: String;
  largeImageUrl?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProductImagePreviousValuesPromise
  extends Promise<ProductImagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  imageUrl: () => Promise<String>;
  largeImageUrl: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProductImagePreviousValuesSubscription
  extends Promise<AsyncIterator<ProductImagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  imageUrl: () => Promise<AsyncIterator<String>>;
  largeImageUrl: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProductReviewSubscriptionPayload {
  mutation: MutationType;
  node: ProductReview;
  updatedFields: String[];
  previousValues: ProductReviewPreviousValues;
}

export interface ProductReviewSubscriptionPayloadPromise
  extends Promise<ProductReviewSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductReviewPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductReviewPreviousValuesPromise>() => T;
}

export interface ProductReviewSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductReviewSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductReviewSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductReviewPreviousValuesSubscription>() => T;
}

export interface ProductReviewPreviousValues {
  id: ID_Output;
  rating: Int;
  review?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProductReviewPreviousValuesPromise
  extends Promise<ProductReviewPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  rating: () => Promise<Int>;
  review: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProductReviewPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductReviewPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  rating: () => Promise<AsyncIterator<Int>>;
  review: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ShopSubscriptionPayload {
  mutation: MutationType;
  node: Shop;
  updatedFields: String[];
  previousValues: ShopPreviousValues;
}

export interface ShopSubscriptionPayloadPromise
  extends Promise<ShopSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ShopPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ShopPreviousValuesPromise>() => T;
}

export interface ShopSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ShopSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ShopSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ShopPreviousValuesSubscription>() => T;
}

export interface ShopPreviousValues {
  id: ID_Output;
  name: String;
  description: String;
  category: String;
  live: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ShopPreviousValuesPromise
  extends Promise<ShopPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  category: () => Promise<String>;
  live: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ShopPreviousValuesSubscription
  extends Promise<AsyncIterator<ShopPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<String>>;
  live: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ShopImageSubscriptionPayload {
  mutation: MutationType;
  node: ShopImage;
  updatedFields: String[];
  previousValues: ShopImagePreviousValues;
}

export interface ShopImageSubscriptionPayloadPromise
  extends Promise<ShopImageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ShopImagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ShopImagePreviousValuesPromise>() => T;
}

export interface ShopImageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ShopImageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ShopImageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ShopImagePreviousValuesSubscription>() => T;
}

export interface ShopImagePreviousValues {
  id: ID_Output;
  imageUrl: String;
  largeImageUrl?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ShopImagePreviousValuesPromise
  extends Promise<ShopImagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  imageUrl: () => Promise<String>;
  largeImageUrl: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ShopImagePreviousValuesSubscription
  extends Promise<AsyncIterator<ShopImagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  imageUrl: () => Promise<AsyncIterator<String>>;
  largeImageUrl: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TagSubscriptionPayload {
  mutation: MutationType;
  node: Tag;
  updatedFields: String[];
  previousValues: TagPreviousValues;
}

export interface TagSubscriptionPayloadPromise
  extends Promise<TagSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TagPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TagPreviousValuesPromise>() => T;
}

export interface TagSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TagSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TagSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TagPreviousValuesSubscription>() => T;
}

export interface TagPreviousValues {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TagPreviousValuesPromise
  extends Promise<TagPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TagPreviousValuesSubscription
  extends Promise<AsyncIterator<TagPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  firebaseId: String;
  email?: String;
  name: String;
  username: String;
  profilePic?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  isAnonymous: Boolean;
  emailVerified?: Boolean;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firebaseId: () => Promise<String>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  username: () => Promise<String>;
  profilePic: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  isAnonymous: () => Promise<Boolean>;
  emailVerified: () => Promise<Boolean>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firebaseId: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  profilePic: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  isAnonymous: () => Promise<AsyncIterator<Boolean>>;
  emailVerified: () => Promise<AsyncIterator<Boolean>>;
}

export interface UserImageSubscriptionPayload {
  mutation: MutationType;
  node: UserImage;
  updatedFields: String[];
  previousValues: UserImagePreviousValues;
}

export interface UserImageSubscriptionPayloadPromise
  extends Promise<UserImageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserImagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserImagePreviousValuesPromise>() => T;
}

export interface UserImageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserImageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserImageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserImagePreviousValuesSubscription>() => T;
}

export interface UserImagePreviousValues {
  id: ID_Output;
  imageUrl: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserImagePreviousValuesPromise
  extends Promise<UserImagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  imageUrl: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserImagePreviousValuesSubscription
  extends Promise<AsyncIterator<UserImagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  imageUrl: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface VariantSubscriptionPayload {
  mutation: MutationType;
  node: Variant;
  updatedFields: String[];
  previousValues: VariantPreviousValues;
}

export interface VariantSubscriptionPayloadPromise
  extends Promise<VariantSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = VariantPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VariantPreviousValuesPromise>() => T;
}

export interface VariantSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VariantSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VariantSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VariantPreviousValuesSubscription>() => T;
}

export interface VariantPreviousValues {
  id: ID_Output;
  name: String;
  values: String[];
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface VariantPreviousValuesPromise
  extends Promise<VariantPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  values: () => Promise<String[]>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface VariantPreviousValuesSubscription
  extends Promise<AsyncIterator<VariantPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  values: () => Promise<AsyncIterator<String[]>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface orderItemSubscriptionPayload {
  mutation: MutationType;
  node: orderItem;
  updatedFields: String[];
  previousValues: orderItemPreviousValues;
}

export interface orderItemSubscriptionPayloadPromise
  extends Promise<orderItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = orderItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = orderItemPreviousValuesPromise>() => T;
}

export interface orderItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<orderItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = orderItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = orderItemPreviousValuesSubscription>() => T;
}

export interface orderItemPreviousValues {
  id: ID_Output;
  title: String;
  description: String;
  price: String;
  quantity: Int;
  imageUrl?: String;
  variants: String[];
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface orderItemPreviousValuesPromise
  extends Promise<orderItemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  price: () => Promise<String>;
  quantity: () => Promise<Int>;
  imageUrl: () => Promise<String>;
  variants: () => Promise<String[]>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface orderItemPreviousValuesSubscription
  extends Promise<AsyncIterator<orderItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<String>>;
  quantity: () => Promise<AsyncIterator<Int>>;
  imageUrl: () => Promise<AsyncIterator<String>>;
  variants: () => Promise<AsyncIterator<String[]>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Forum",
    embedded: false
  },
  {
    name: "ForumPostType",
    embedded: false
  },
  {
    name: "ForumPost",
    embedded: false
  },
  {
    name: "ForumPostComment",
    embedded: false
  },
  {
    name: "Shop",
    embedded: false
  },
  {
    name: "ShopImage",
    embedded: false
  },
  {
    name: "UserImage",
    embedded: false
  },
  {
    name: "Product",
    embedded: false
  },
  {
    name: "Cart",
    embedded: false
  },
  {
    name: "CartItem",
    embedded: false
  },
  {
    name: "orderItem",
    embedded: false
  },
  {
    name: "Order",
    embedded: false
  },
  {
    name: "Brand",
    embedded: false
  },
  {
    name: "Tag",
    embedded: false
  },
  {
    name: "Category",
    embedded: false
  },
  {
    name: "ProductImage",
    embedded: false
  },
  {
    name: "Variant",
    embedded: false
  },
  {
    name: "ProductReview",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `https://still-brook-40385.herokuapp.com/agoraexpo-production/prod`,
  secret: `111jkdsjknd$$$$**s$$**$$jkdsjnk`
});
export const prisma = new Prisma();
