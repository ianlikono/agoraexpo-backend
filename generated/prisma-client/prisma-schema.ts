// Code generated by Prisma (prisma@1.29.2). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateBrand {
  count: Int!
}

type AggregateCategory {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type AggregateProductImage {
  count: Int!
}

type AggregateShop {
  count: Int!
}

type AggregateShopImage {
  count: Int!
}

type AggregateTag {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateUserImage {
  count: Int!
}

type AggregateVariant {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Brand {
  id: ID!
  name: String!
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
}

type BrandConnection {
  pageInfo: PageInfo!
  edges: [BrandEdge]!
  aggregate: AggregateBrand!
}

input BrandCreateInput {
  name: String!
  products: ProductCreateManyWithoutBrandInput
}

input BrandCreateOneWithoutProductsInput {
  create: BrandCreateWithoutProductsInput
  connect: BrandWhereUniqueInput
}

input BrandCreateWithoutProductsInput {
  name: String!
}

type BrandEdge {
  node: Brand!
  cursor: String!
}

enum BrandOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BrandPreviousValues {
  id: ID!
  name: String!
}

type BrandSubscriptionPayload {
  mutation: MutationType!
  node: Brand
  updatedFields: [String!]
  previousValues: BrandPreviousValues
}

input BrandSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BrandWhereInput
  AND: [BrandSubscriptionWhereInput!]
  OR: [BrandSubscriptionWhereInput!]
  NOT: [BrandSubscriptionWhereInput!]
}

input BrandUpdateInput {
  name: String
  products: ProductUpdateManyWithoutBrandInput
}

input BrandUpdateManyMutationInput {
  name: String
}

input BrandUpdateOneWithoutProductsInput {
  create: BrandCreateWithoutProductsInput
  update: BrandUpdateWithoutProductsDataInput
  upsert: BrandUpsertWithoutProductsInput
  delete: Boolean
  disconnect: Boolean
  connect: BrandWhereUniqueInput
}

input BrandUpdateWithoutProductsDataInput {
  name: String
}

input BrandUpsertWithoutProductsInput {
  update: BrandUpdateWithoutProductsDataInput!
  create: BrandCreateWithoutProductsInput!
}

input BrandWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  products_every: ProductWhereInput
  products_some: ProductWhereInput
  products_none: ProductWhereInput
  AND: [BrandWhereInput!]
  OR: [BrandWhereInput!]
  NOT: [BrandWhereInput!]
}

input BrandWhereUniqueInput {
  id: ID
  name: String
}

type Category {
  id: ID!
  name: String!
  product(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
}

type CategoryConnection {
  pageInfo: PageInfo!
  edges: [CategoryEdge]!
  aggregate: AggregateCategory!
}

input CategoryCreateInput {
  name: String!
  product: ProductCreateManyWithoutCategoriesInput
}

input CategoryCreateManyWithoutProductInput {
  create: [CategoryCreateWithoutProductInput!]
  connect: [CategoryWhereUniqueInput!]
}

input CategoryCreateWithoutProductInput {
  name: String!
}

type CategoryEdge {
  node: Category!
  cursor: String!
}

enum CategoryOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CategoryPreviousValues {
  id: ID!
  name: String!
}

input CategoryScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [CategoryScalarWhereInput!]
  OR: [CategoryScalarWhereInput!]
  NOT: [CategoryScalarWhereInput!]
}

type CategorySubscriptionPayload {
  mutation: MutationType!
  node: Category
  updatedFields: [String!]
  previousValues: CategoryPreviousValues
}

input CategorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CategoryWhereInput
  AND: [CategorySubscriptionWhereInput!]
  OR: [CategorySubscriptionWhereInput!]
  NOT: [CategorySubscriptionWhereInput!]
}

input CategoryUpdateInput {
  name: String
  product: ProductUpdateManyWithoutCategoriesInput
}

input CategoryUpdateManyDataInput {
  name: String
}

input CategoryUpdateManyMutationInput {
  name: String
}

input CategoryUpdateManyWithoutProductInput {
  create: [CategoryCreateWithoutProductInput!]
  delete: [CategoryWhereUniqueInput!]
  connect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  disconnect: [CategoryWhereUniqueInput!]
  update: [CategoryUpdateWithWhereUniqueWithoutProductInput!]
  upsert: [CategoryUpsertWithWhereUniqueWithoutProductInput!]
  deleteMany: [CategoryScalarWhereInput!]
  updateMany: [CategoryUpdateManyWithWhereNestedInput!]
}

input CategoryUpdateManyWithWhereNestedInput {
  where: CategoryScalarWhereInput!
  data: CategoryUpdateManyDataInput!
}

input CategoryUpdateWithoutProductDataInput {
  name: String
}

input CategoryUpdateWithWhereUniqueWithoutProductInput {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateWithoutProductDataInput!
}

input CategoryUpsertWithWhereUniqueWithoutProductInput {
  where: CategoryWhereUniqueInput!
  update: CategoryUpdateWithoutProductDataInput!
  create: CategoryCreateWithoutProductInput!
}

input CategoryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  product_every: ProductWhereInput
  product_some: ProductWhereInput
  product_none: ProductWhereInput
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
}

input CategoryWhereUniqueInput {
  id: ID
  name: String
}

scalar DateTime

scalar Long

type Mutation {
  createBrand(data: BrandCreateInput!): Brand!
  updateBrand(data: BrandUpdateInput!, where: BrandWhereUniqueInput!): Brand
  updateManyBrands(data: BrandUpdateManyMutationInput!, where: BrandWhereInput): BatchPayload!
  upsertBrand(where: BrandWhereUniqueInput!, create: BrandCreateInput!, update: BrandUpdateInput!): Brand!
  deleteBrand(where: BrandWhereUniqueInput!): Brand
  deleteManyBrands(where: BrandWhereInput): BatchPayload!
  createCategory(data: CategoryCreateInput!): Category!
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateManyCategories(data: CategoryUpdateManyMutationInput!, where: CategoryWhereInput): BatchPayload!
  upsertCategory(where: CategoryWhereUniqueInput!, create: CategoryCreateInput!, update: CategoryUpdateInput!): Category!
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteManyCategories(where: CategoryWhereInput): BatchPayload!
  createProduct(data: ProductCreateInput!): Product!
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  createProductImage(data: ProductImageCreateInput!): ProductImage!
  updateProductImage(data: ProductImageUpdateInput!, where: ProductImageWhereUniqueInput!): ProductImage
  updateManyProductImages(data: ProductImageUpdateManyMutationInput!, where: ProductImageWhereInput): BatchPayload!
  upsertProductImage(where: ProductImageWhereUniqueInput!, create: ProductImageCreateInput!, update: ProductImageUpdateInput!): ProductImage!
  deleteProductImage(where: ProductImageWhereUniqueInput!): ProductImage
  deleteManyProductImages(where: ProductImageWhereInput): BatchPayload!
  createShop(data: ShopCreateInput!): Shop!
  updateShop(data: ShopUpdateInput!, where: ShopWhereUniqueInput!): Shop
  updateManyShops(data: ShopUpdateManyMutationInput!, where: ShopWhereInput): BatchPayload!
  upsertShop(where: ShopWhereUniqueInput!, create: ShopCreateInput!, update: ShopUpdateInput!): Shop!
  deleteShop(where: ShopWhereUniqueInput!): Shop
  deleteManyShops(where: ShopWhereInput): BatchPayload!
  createShopImage(data: ShopImageCreateInput!): ShopImage!
  updateShopImage(data: ShopImageUpdateInput!, where: ShopImageWhereUniqueInput!): ShopImage
  updateManyShopImages(data: ShopImageUpdateManyMutationInput!, where: ShopImageWhereInput): BatchPayload!
  upsertShopImage(where: ShopImageWhereUniqueInput!, create: ShopImageCreateInput!, update: ShopImageUpdateInput!): ShopImage!
  deleteShopImage(where: ShopImageWhereUniqueInput!): ShopImage
  deleteManyShopImages(where: ShopImageWhereInput): BatchPayload!
  createTag(data: TagCreateInput!): Tag!
  updateTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
  updateManyTags(data: TagUpdateManyMutationInput!, where: TagWhereInput): BatchPayload!
  upsertTag(where: TagWhereUniqueInput!, create: TagCreateInput!, update: TagUpdateInput!): Tag!
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteManyTags(where: TagWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createUserImage(data: UserImageCreateInput!): UserImage!
  updateUserImage(data: UserImageUpdateInput!, where: UserImageWhereUniqueInput!): UserImage
  updateManyUserImages(data: UserImageUpdateManyMutationInput!, where: UserImageWhereInput): BatchPayload!
  upsertUserImage(where: UserImageWhereUniqueInput!, create: UserImageCreateInput!, update: UserImageUpdateInput!): UserImage!
  deleteUserImage(where: UserImageWhereUniqueInput!): UserImage
  deleteManyUserImages(where: UserImageWhereInput): BatchPayload!
  createVariant(data: VariantCreateInput!): Variant!
  updateVariant(data: VariantUpdateInput!, where: VariantWhereUniqueInput!): Variant
  updateManyVariants(data: VariantUpdateManyMutationInput!, where: VariantWhereInput): BatchPayload!
  upsertVariant(where: VariantWhereUniqueInput!, create: VariantCreateInput!, update: VariantUpdateInput!): Variant!
  deleteVariant(where: VariantWhereUniqueInput!): Variant
  deleteManyVariants(where: VariantWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Product {
  id: ID!
  title: String!
  description: String!
  price: String!
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category!]
  brand: Brand
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag!]
  images(where: ProductImageWhereInput, orderBy: ProductImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductImage!]
  shop: Shop!
  variants(where: VariantWhereInput, orderBy: VariantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Variant!]
}

type ProductConnection {
  pageInfo: PageInfo!
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateInput {
  title: String!
  description: String!
  price: String!
  categories: CategoryCreateManyWithoutProductInput
  brand: BrandCreateOneWithoutProductsInput
  tags: TagCreateManyWithoutProductsInput
  images: ProductImageCreateManyWithoutProductInput
  shop: ShopCreateOneWithoutProductsInput!
  variants: VariantCreateManyWithoutProductInput
}

input ProductCreateManyWithoutBrandInput {
  create: [ProductCreateWithoutBrandInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateManyWithoutCategoriesInput {
  create: [ProductCreateWithoutCategoriesInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateManyWithoutShopInput {
  create: [ProductCreateWithoutShopInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateManyWithoutTagsInput {
  create: [ProductCreateWithoutTagsInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateOneWithoutImagesInput {
  create: ProductCreateWithoutImagesInput
  connect: ProductWhereUniqueInput
}

input ProductCreateOneWithoutVariantsInput {
  create: ProductCreateWithoutVariantsInput
  connect: ProductWhereUniqueInput
}

input ProductCreateWithoutBrandInput {
  title: String!
  description: String!
  price: String!
  categories: CategoryCreateManyWithoutProductInput
  tags: TagCreateManyWithoutProductsInput
  images: ProductImageCreateManyWithoutProductInput
  shop: ShopCreateOneWithoutProductsInput!
  variants: VariantCreateManyWithoutProductInput
}

input ProductCreateWithoutCategoriesInput {
  title: String!
  description: String!
  price: String!
  brand: BrandCreateOneWithoutProductsInput
  tags: TagCreateManyWithoutProductsInput
  images: ProductImageCreateManyWithoutProductInput
  shop: ShopCreateOneWithoutProductsInput!
  variants: VariantCreateManyWithoutProductInput
}

input ProductCreateWithoutImagesInput {
  title: String!
  description: String!
  price: String!
  categories: CategoryCreateManyWithoutProductInput
  brand: BrandCreateOneWithoutProductsInput
  tags: TagCreateManyWithoutProductsInput
  shop: ShopCreateOneWithoutProductsInput!
  variants: VariantCreateManyWithoutProductInput
}

input ProductCreateWithoutShopInput {
  title: String!
  description: String!
  price: String!
  categories: CategoryCreateManyWithoutProductInput
  brand: BrandCreateOneWithoutProductsInput
  tags: TagCreateManyWithoutProductsInput
  images: ProductImageCreateManyWithoutProductInput
  variants: VariantCreateManyWithoutProductInput
}

input ProductCreateWithoutTagsInput {
  title: String!
  description: String!
  price: String!
  categories: CategoryCreateManyWithoutProductInput
  brand: BrandCreateOneWithoutProductsInput
  images: ProductImageCreateManyWithoutProductInput
  shop: ShopCreateOneWithoutProductsInput!
  variants: VariantCreateManyWithoutProductInput
}

input ProductCreateWithoutVariantsInput {
  title: String!
  description: String!
  price: String!
  categories: CategoryCreateManyWithoutProductInput
  brand: BrandCreateOneWithoutProductsInput
  tags: TagCreateManyWithoutProductsInput
  images: ProductImageCreateManyWithoutProductInput
  shop: ShopCreateOneWithoutProductsInput!
}

type ProductEdge {
  node: Product!
  cursor: String!
}

type ProductImage {
  id: ID!
  imageUrl: String!
  product: Product
}

type ProductImageConnection {
  pageInfo: PageInfo!
  edges: [ProductImageEdge]!
  aggregate: AggregateProductImage!
}

input ProductImageCreateInput {
  imageUrl: String!
  product: ProductCreateOneWithoutImagesInput
}

input ProductImageCreateManyWithoutProductInput {
  create: [ProductImageCreateWithoutProductInput!]
  connect: [ProductImageWhereUniqueInput!]
}

input ProductImageCreateWithoutProductInput {
  imageUrl: String!
}

type ProductImageEdge {
  node: ProductImage!
  cursor: String!
}

enum ProductImageOrderByInput {
  id_ASC
  id_DESC
  imageUrl_ASC
  imageUrl_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProductImagePreviousValues {
  id: ID!
  imageUrl: String!
}

input ProductImageScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  imageUrl: String
  imageUrl_not: String
  imageUrl_in: [String!]
  imageUrl_not_in: [String!]
  imageUrl_lt: String
  imageUrl_lte: String
  imageUrl_gt: String
  imageUrl_gte: String
  imageUrl_contains: String
  imageUrl_not_contains: String
  imageUrl_starts_with: String
  imageUrl_not_starts_with: String
  imageUrl_ends_with: String
  imageUrl_not_ends_with: String
  AND: [ProductImageScalarWhereInput!]
  OR: [ProductImageScalarWhereInput!]
  NOT: [ProductImageScalarWhereInput!]
}

type ProductImageSubscriptionPayload {
  mutation: MutationType!
  node: ProductImage
  updatedFields: [String!]
  previousValues: ProductImagePreviousValues
}

input ProductImageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductImageWhereInput
  AND: [ProductImageSubscriptionWhereInput!]
  OR: [ProductImageSubscriptionWhereInput!]
  NOT: [ProductImageSubscriptionWhereInput!]
}

input ProductImageUpdateInput {
  imageUrl: String
  product: ProductUpdateOneWithoutImagesInput
}

input ProductImageUpdateManyDataInput {
  imageUrl: String
}

input ProductImageUpdateManyMutationInput {
  imageUrl: String
}

input ProductImageUpdateManyWithoutProductInput {
  create: [ProductImageCreateWithoutProductInput!]
  delete: [ProductImageWhereUniqueInput!]
  connect: [ProductImageWhereUniqueInput!]
  set: [ProductImageWhereUniqueInput!]
  disconnect: [ProductImageWhereUniqueInput!]
  update: [ProductImageUpdateWithWhereUniqueWithoutProductInput!]
  upsert: [ProductImageUpsertWithWhereUniqueWithoutProductInput!]
  deleteMany: [ProductImageScalarWhereInput!]
  updateMany: [ProductImageUpdateManyWithWhereNestedInput!]
}

input ProductImageUpdateManyWithWhereNestedInput {
  where: ProductImageScalarWhereInput!
  data: ProductImageUpdateManyDataInput!
}

input ProductImageUpdateWithoutProductDataInput {
  imageUrl: String
}

input ProductImageUpdateWithWhereUniqueWithoutProductInput {
  where: ProductImageWhereUniqueInput!
  data: ProductImageUpdateWithoutProductDataInput!
}

input ProductImageUpsertWithWhereUniqueWithoutProductInput {
  where: ProductImageWhereUniqueInput!
  update: ProductImageUpdateWithoutProductDataInput!
  create: ProductImageCreateWithoutProductInput!
}

input ProductImageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  imageUrl: String
  imageUrl_not: String
  imageUrl_in: [String!]
  imageUrl_not_in: [String!]
  imageUrl_lt: String
  imageUrl_lte: String
  imageUrl_gt: String
  imageUrl_gte: String
  imageUrl_contains: String
  imageUrl_not_contains: String
  imageUrl_starts_with: String
  imageUrl_not_starts_with: String
  imageUrl_ends_with: String
  imageUrl_not_ends_with: String
  product: ProductWhereInput
  AND: [ProductImageWhereInput!]
  OR: [ProductImageWhereInput!]
  NOT: [ProductImageWhereInput!]
}

input ProductImageWhereUniqueInput {
  id: ID
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  price_ASC
  price_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProductPreviousValues {
  id: ID!
  title: String!
  description: String!
  price: String!
}

input ProductScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  price: String
  price_not: String
  price_in: [String!]
  price_not_in: [String!]
  price_lt: String
  price_lte: String
  price_gt: String
  price_gte: String
  price_contains: String
  price_not_contains: String
  price_starts_with: String
  price_not_starts_with: String
  price_ends_with: String
  price_not_ends_with: String
  AND: [ProductScalarWhereInput!]
  OR: [ProductScalarWhereInput!]
  NOT: [ProductScalarWhereInput!]
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
  AND: [ProductSubscriptionWhereInput!]
  OR: [ProductSubscriptionWhereInput!]
  NOT: [ProductSubscriptionWhereInput!]
}

input ProductUpdateInput {
  title: String
  description: String
  price: String
  categories: CategoryUpdateManyWithoutProductInput
  brand: BrandUpdateOneWithoutProductsInput
  tags: TagUpdateManyWithoutProductsInput
  images: ProductImageUpdateManyWithoutProductInput
  shop: ShopUpdateOneRequiredWithoutProductsInput
  variants: VariantUpdateManyWithoutProductInput
}

input ProductUpdateManyDataInput {
  title: String
  description: String
  price: String
}

input ProductUpdateManyMutationInput {
  title: String
  description: String
  price: String
}

input ProductUpdateManyWithoutBrandInput {
  create: [ProductCreateWithoutBrandInput!]
  delete: [ProductWhereUniqueInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutBrandInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutBrandInput!]
  deleteMany: [ProductScalarWhereInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
}

input ProductUpdateManyWithoutCategoriesInput {
  create: [ProductCreateWithoutCategoriesInput!]
  delete: [ProductWhereUniqueInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutCategoriesInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutCategoriesInput!]
  deleteMany: [ProductScalarWhereInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
}

input ProductUpdateManyWithoutShopInput {
  create: [ProductCreateWithoutShopInput!]
  delete: [ProductWhereUniqueInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutShopInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutShopInput!]
  deleteMany: [ProductScalarWhereInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
}

input ProductUpdateManyWithoutTagsInput {
  create: [ProductCreateWithoutTagsInput!]
  delete: [ProductWhereUniqueInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutTagsInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutTagsInput!]
  deleteMany: [ProductScalarWhereInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
}

input ProductUpdateManyWithWhereNestedInput {
  where: ProductScalarWhereInput!
  data: ProductUpdateManyDataInput!
}

input ProductUpdateOneRequiredWithoutVariantsInput {
  create: ProductCreateWithoutVariantsInput
  update: ProductUpdateWithoutVariantsDataInput
  upsert: ProductUpsertWithoutVariantsInput
  connect: ProductWhereUniqueInput
}

input ProductUpdateOneWithoutImagesInput {
  create: ProductCreateWithoutImagesInput
  update: ProductUpdateWithoutImagesDataInput
  upsert: ProductUpsertWithoutImagesInput
  delete: Boolean
  disconnect: Boolean
  connect: ProductWhereUniqueInput
}

input ProductUpdateWithoutBrandDataInput {
  title: String
  description: String
  price: String
  categories: CategoryUpdateManyWithoutProductInput
  tags: TagUpdateManyWithoutProductsInput
  images: ProductImageUpdateManyWithoutProductInput
  shop: ShopUpdateOneRequiredWithoutProductsInput
  variants: VariantUpdateManyWithoutProductInput
}

input ProductUpdateWithoutCategoriesDataInput {
  title: String
  description: String
  price: String
  brand: BrandUpdateOneWithoutProductsInput
  tags: TagUpdateManyWithoutProductsInput
  images: ProductImageUpdateManyWithoutProductInput
  shop: ShopUpdateOneRequiredWithoutProductsInput
  variants: VariantUpdateManyWithoutProductInput
}

input ProductUpdateWithoutImagesDataInput {
  title: String
  description: String
  price: String
  categories: CategoryUpdateManyWithoutProductInput
  brand: BrandUpdateOneWithoutProductsInput
  tags: TagUpdateManyWithoutProductsInput
  shop: ShopUpdateOneRequiredWithoutProductsInput
  variants: VariantUpdateManyWithoutProductInput
}

input ProductUpdateWithoutShopDataInput {
  title: String
  description: String
  price: String
  categories: CategoryUpdateManyWithoutProductInput
  brand: BrandUpdateOneWithoutProductsInput
  tags: TagUpdateManyWithoutProductsInput
  images: ProductImageUpdateManyWithoutProductInput
  variants: VariantUpdateManyWithoutProductInput
}

input ProductUpdateWithoutTagsDataInput {
  title: String
  description: String
  price: String
  categories: CategoryUpdateManyWithoutProductInput
  brand: BrandUpdateOneWithoutProductsInput
  images: ProductImageUpdateManyWithoutProductInput
  shop: ShopUpdateOneRequiredWithoutProductsInput
  variants: VariantUpdateManyWithoutProductInput
}

input ProductUpdateWithoutVariantsDataInput {
  title: String
  description: String
  price: String
  categories: CategoryUpdateManyWithoutProductInput
  brand: BrandUpdateOneWithoutProductsInput
  tags: TagUpdateManyWithoutProductsInput
  images: ProductImageUpdateManyWithoutProductInput
  shop: ShopUpdateOneRequiredWithoutProductsInput
}

input ProductUpdateWithWhereUniqueWithoutBrandInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutBrandDataInput!
}

input ProductUpdateWithWhereUniqueWithoutCategoriesInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutCategoriesDataInput!
}

input ProductUpdateWithWhereUniqueWithoutShopInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutShopDataInput!
}

input ProductUpdateWithWhereUniqueWithoutTagsInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutTagsDataInput!
}

input ProductUpsertWithoutImagesInput {
  update: ProductUpdateWithoutImagesDataInput!
  create: ProductCreateWithoutImagesInput!
}

input ProductUpsertWithoutVariantsInput {
  update: ProductUpdateWithoutVariantsDataInput!
  create: ProductCreateWithoutVariantsInput!
}

input ProductUpsertWithWhereUniqueWithoutBrandInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutBrandDataInput!
  create: ProductCreateWithoutBrandInput!
}

input ProductUpsertWithWhereUniqueWithoutCategoriesInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutCategoriesDataInput!
  create: ProductCreateWithoutCategoriesInput!
}

input ProductUpsertWithWhereUniqueWithoutShopInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutShopDataInput!
  create: ProductCreateWithoutShopInput!
}

input ProductUpsertWithWhereUniqueWithoutTagsInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutTagsDataInput!
  create: ProductCreateWithoutTagsInput!
}

input ProductWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  price: String
  price_not: String
  price_in: [String!]
  price_not_in: [String!]
  price_lt: String
  price_lte: String
  price_gt: String
  price_gte: String
  price_contains: String
  price_not_contains: String
  price_starts_with: String
  price_not_starts_with: String
  price_ends_with: String
  price_not_ends_with: String
  categories_every: CategoryWhereInput
  categories_some: CategoryWhereInput
  categories_none: CategoryWhereInput
  brand: BrandWhereInput
  tags_every: TagWhereInput
  tags_some: TagWhereInput
  tags_none: TagWhereInput
  images_every: ProductImageWhereInput
  images_some: ProductImageWhereInput
  images_none: ProductImageWhereInput
  shop: ShopWhereInput
  variants_every: VariantWhereInput
  variants_some: VariantWhereInput
  variants_none: VariantWhereInput
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
}

input ProductWhereUniqueInput {
  id: ID
}

type Query {
  brand(where: BrandWhereUniqueInput!): Brand
  brands(where: BrandWhereInput, orderBy: BrandOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Brand]!
  brandsConnection(where: BrandWhereInput, orderBy: BrandOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BrandConnection!
  category(where: CategoryWhereUniqueInput!): Category
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category]!
  categoriesConnection(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CategoryConnection!
  product(where: ProductWhereUniqueInput!): Product
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  productImage(where: ProductImageWhereUniqueInput!): ProductImage
  productImages(where: ProductImageWhereInput, orderBy: ProductImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductImage]!
  productImagesConnection(where: ProductImageWhereInput, orderBy: ProductImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductImageConnection!
  shop(where: ShopWhereUniqueInput!): Shop
  shops(where: ShopWhereInput, orderBy: ShopOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Shop]!
  shopsConnection(where: ShopWhereInput, orderBy: ShopOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ShopConnection!
  shopImage(where: ShopImageWhereUniqueInput!): ShopImage
  shopImages(where: ShopImageWhereInput, orderBy: ShopImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ShopImage]!
  shopImagesConnection(where: ShopImageWhereInput, orderBy: ShopImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ShopImageConnection!
  tag(where: TagWhereUniqueInput!): Tag
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag]!
  tagsConnection(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TagConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  userImage(where: UserImageWhereUniqueInput!): UserImage
  userImages(where: UserImageWhereInput, orderBy: UserImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserImage]!
  userImagesConnection(where: UserImageWhereInput, orderBy: UserImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserImageConnection!
  variant(where: VariantWhereUniqueInput!): Variant
  variants(where: VariantWhereInput, orderBy: VariantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Variant]!
  variantsConnection(where: VariantWhereInput, orderBy: VariantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VariantConnection!
  node(id: ID!): Node
}

type Shop {
  id: ID!
  name: String!
  description: String!
  category: String!
  live: Boolean!
  owners(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  createdAt: DateTime!
  updatedAt: DateTime!
  images(where: ShopImageWhereInput, orderBy: ShopImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ShopImage!]
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
}

type ShopConnection {
  pageInfo: PageInfo!
  edges: [ShopEdge]!
  aggregate: AggregateShop!
}

input ShopCreateInput {
  name: String!
  description: String!
  category: String!
  live: Boolean
  owners: UserCreateManyWithoutShopsInput
  images: ShopImageCreateManyWithoutShopInput
  products: ProductCreateManyWithoutShopInput
}

input ShopCreateManyWithoutOwnersInput {
  create: [ShopCreateWithoutOwnersInput!]
  connect: [ShopWhereUniqueInput!]
}

input ShopCreateOneWithoutImagesInput {
  create: ShopCreateWithoutImagesInput
  connect: ShopWhereUniqueInput
}

input ShopCreateOneWithoutProductsInput {
  create: ShopCreateWithoutProductsInput
  connect: ShopWhereUniqueInput
}

input ShopCreateWithoutImagesInput {
  name: String!
  description: String!
  category: String!
  live: Boolean
  owners: UserCreateManyWithoutShopsInput
  products: ProductCreateManyWithoutShopInput
}

input ShopCreateWithoutOwnersInput {
  name: String!
  description: String!
  category: String!
  live: Boolean
  images: ShopImageCreateManyWithoutShopInput
  products: ProductCreateManyWithoutShopInput
}

input ShopCreateWithoutProductsInput {
  name: String!
  description: String!
  category: String!
  live: Boolean
  owners: UserCreateManyWithoutShopsInput
  images: ShopImageCreateManyWithoutShopInput
}

type ShopEdge {
  node: Shop!
  cursor: String!
}

type ShopImage {
  id: ID!
  imageUrl: String!
  shop: Shop
}

type ShopImageConnection {
  pageInfo: PageInfo!
  edges: [ShopImageEdge]!
  aggregate: AggregateShopImage!
}

input ShopImageCreateInput {
  imageUrl: String!
  shop: ShopCreateOneWithoutImagesInput
}

input ShopImageCreateManyWithoutShopInput {
  create: [ShopImageCreateWithoutShopInput!]
  connect: [ShopImageWhereUniqueInput!]
}

input ShopImageCreateWithoutShopInput {
  imageUrl: String!
}

type ShopImageEdge {
  node: ShopImage!
  cursor: String!
}

enum ShopImageOrderByInput {
  id_ASC
  id_DESC
  imageUrl_ASC
  imageUrl_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ShopImagePreviousValues {
  id: ID!
  imageUrl: String!
}

input ShopImageScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  imageUrl: String
  imageUrl_not: String
  imageUrl_in: [String!]
  imageUrl_not_in: [String!]
  imageUrl_lt: String
  imageUrl_lte: String
  imageUrl_gt: String
  imageUrl_gte: String
  imageUrl_contains: String
  imageUrl_not_contains: String
  imageUrl_starts_with: String
  imageUrl_not_starts_with: String
  imageUrl_ends_with: String
  imageUrl_not_ends_with: String
  AND: [ShopImageScalarWhereInput!]
  OR: [ShopImageScalarWhereInput!]
  NOT: [ShopImageScalarWhereInput!]
}

type ShopImageSubscriptionPayload {
  mutation: MutationType!
  node: ShopImage
  updatedFields: [String!]
  previousValues: ShopImagePreviousValues
}

input ShopImageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ShopImageWhereInput
  AND: [ShopImageSubscriptionWhereInput!]
  OR: [ShopImageSubscriptionWhereInput!]
  NOT: [ShopImageSubscriptionWhereInput!]
}

input ShopImageUpdateInput {
  imageUrl: String
  shop: ShopUpdateOneWithoutImagesInput
}

input ShopImageUpdateManyDataInput {
  imageUrl: String
}

input ShopImageUpdateManyMutationInput {
  imageUrl: String
}

input ShopImageUpdateManyWithoutShopInput {
  create: [ShopImageCreateWithoutShopInput!]
  delete: [ShopImageWhereUniqueInput!]
  connect: [ShopImageWhereUniqueInput!]
  set: [ShopImageWhereUniqueInput!]
  disconnect: [ShopImageWhereUniqueInput!]
  update: [ShopImageUpdateWithWhereUniqueWithoutShopInput!]
  upsert: [ShopImageUpsertWithWhereUniqueWithoutShopInput!]
  deleteMany: [ShopImageScalarWhereInput!]
  updateMany: [ShopImageUpdateManyWithWhereNestedInput!]
}

input ShopImageUpdateManyWithWhereNestedInput {
  where: ShopImageScalarWhereInput!
  data: ShopImageUpdateManyDataInput!
}

input ShopImageUpdateWithoutShopDataInput {
  imageUrl: String
}

input ShopImageUpdateWithWhereUniqueWithoutShopInput {
  where: ShopImageWhereUniqueInput!
  data: ShopImageUpdateWithoutShopDataInput!
}

input ShopImageUpsertWithWhereUniqueWithoutShopInput {
  where: ShopImageWhereUniqueInput!
  update: ShopImageUpdateWithoutShopDataInput!
  create: ShopImageCreateWithoutShopInput!
}

input ShopImageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  imageUrl: String
  imageUrl_not: String
  imageUrl_in: [String!]
  imageUrl_not_in: [String!]
  imageUrl_lt: String
  imageUrl_lte: String
  imageUrl_gt: String
  imageUrl_gte: String
  imageUrl_contains: String
  imageUrl_not_contains: String
  imageUrl_starts_with: String
  imageUrl_not_starts_with: String
  imageUrl_ends_with: String
  imageUrl_not_ends_with: String
  shop: ShopWhereInput
  AND: [ShopImageWhereInput!]
  OR: [ShopImageWhereInput!]
  NOT: [ShopImageWhereInput!]
}

input ShopImageWhereUniqueInput {
  id: ID
}

enum ShopOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  category_ASC
  category_DESC
  live_ASC
  live_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ShopPreviousValues {
  id: ID!
  name: String!
  description: String!
  category: String!
  live: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ShopScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  category: String
  category_not: String
  category_in: [String!]
  category_not_in: [String!]
  category_lt: String
  category_lte: String
  category_gt: String
  category_gte: String
  category_contains: String
  category_not_contains: String
  category_starts_with: String
  category_not_starts_with: String
  category_ends_with: String
  category_not_ends_with: String
  live: Boolean
  live_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ShopScalarWhereInput!]
  OR: [ShopScalarWhereInput!]
  NOT: [ShopScalarWhereInput!]
}

type ShopSubscriptionPayload {
  mutation: MutationType!
  node: Shop
  updatedFields: [String!]
  previousValues: ShopPreviousValues
}

input ShopSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ShopWhereInput
  AND: [ShopSubscriptionWhereInput!]
  OR: [ShopSubscriptionWhereInput!]
  NOT: [ShopSubscriptionWhereInput!]
}

input ShopUpdateInput {
  name: String
  description: String
  category: String
  live: Boolean
  owners: UserUpdateManyWithoutShopsInput
  images: ShopImageUpdateManyWithoutShopInput
  products: ProductUpdateManyWithoutShopInput
}

input ShopUpdateManyDataInput {
  name: String
  description: String
  category: String
  live: Boolean
}

input ShopUpdateManyMutationInput {
  name: String
  description: String
  category: String
  live: Boolean
}

input ShopUpdateManyWithoutOwnersInput {
  create: [ShopCreateWithoutOwnersInput!]
  delete: [ShopWhereUniqueInput!]
  connect: [ShopWhereUniqueInput!]
  set: [ShopWhereUniqueInput!]
  disconnect: [ShopWhereUniqueInput!]
  update: [ShopUpdateWithWhereUniqueWithoutOwnersInput!]
  upsert: [ShopUpsertWithWhereUniqueWithoutOwnersInput!]
  deleteMany: [ShopScalarWhereInput!]
  updateMany: [ShopUpdateManyWithWhereNestedInput!]
}

input ShopUpdateManyWithWhereNestedInput {
  where: ShopScalarWhereInput!
  data: ShopUpdateManyDataInput!
}

input ShopUpdateOneRequiredWithoutProductsInput {
  create: ShopCreateWithoutProductsInput
  update: ShopUpdateWithoutProductsDataInput
  upsert: ShopUpsertWithoutProductsInput
  connect: ShopWhereUniqueInput
}

input ShopUpdateOneWithoutImagesInput {
  create: ShopCreateWithoutImagesInput
  update: ShopUpdateWithoutImagesDataInput
  upsert: ShopUpsertWithoutImagesInput
  delete: Boolean
  disconnect: Boolean
  connect: ShopWhereUniqueInput
}

input ShopUpdateWithoutImagesDataInput {
  name: String
  description: String
  category: String
  live: Boolean
  owners: UserUpdateManyWithoutShopsInput
  products: ProductUpdateManyWithoutShopInput
}

input ShopUpdateWithoutOwnersDataInput {
  name: String
  description: String
  category: String
  live: Boolean
  images: ShopImageUpdateManyWithoutShopInput
  products: ProductUpdateManyWithoutShopInput
}

input ShopUpdateWithoutProductsDataInput {
  name: String
  description: String
  category: String
  live: Boolean
  owners: UserUpdateManyWithoutShopsInput
  images: ShopImageUpdateManyWithoutShopInput
}

input ShopUpdateWithWhereUniqueWithoutOwnersInput {
  where: ShopWhereUniqueInput!
  data: ShopUpdateWithoutOwnersDataInput!
}

input ShopUpsertWithoutImagesInput {
  update: ShopUpdateWithoutImagesDataInput!
  create: ShopCreateWithoutImagesInput!
}

input ShopUpsertWithoutProductsInput {
  update: ShopUpdateWithoutProductsDataInput!
  create: ShopCreateWithoutProductsInput!
}

input ShopUpsertWithWhereUniqueWithoutOwnersInput {
  where: ShopWhereUniqueInput!
  update: ShopUpdateWithoutOwnersDataInput!
  create: ShopCreateWithoutOwnersInput!
}

input ShopWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  category: String
  category_not: String
  category_in: [String!]
  category_not_in: [String!]
  category_lt: String
  category_lte: String
  category_gt: String
  category_gte: String
  category_contains: String
  category_not_contains: String
  category_starts_with: String
  category_not_starts_with: String
  category_ends_with: String
  category_not_ends_with: String
  live: Boolean
  live_not: Boolean
  owners_every: UserWhereInput
  owners_some: UserWhereInput
  owners_none: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  images_every: ShopImageWhereInput
  images_some: ShopImageWhereInput
  images_none: ShopImageWhereInput
  products_every: ProductWhereInput
  products_some: ProductWhereInput
  products_none: ProductWhereInput
  AND: [ShopWhereInput!]
  OR: [ShopWhereInput!]
  NOT: [ShopWhereInput!]
}

input ShopWhereUniqueInput {
  id: ID
  name: String
}

type Subscription {
  brand(where: BrandSubscriptionWhereInput): BrandSubscriptionPayload
  category(where: CategorySubscriptionWhereInput): CategorySubscriptionPayload
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  productImage(where: ProductImageSubscriptionWhereInput): ProductImageSubscriptionPayload
  shop(where: ShopSubscriptionWhereInput): ShopSubscriptionPayload
  shopImage(where: ShopImageSubscriptionWhereInput): ShopImageSubscriptionPayload
  tag(where: TagSubscriptionWhereInput): TagSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  userImage(where: UserImageSubscriptionWhereInput): UserImageSubscriptionPayload
  variant(where: VariantSubscriptionWhereInput): VariantSubscriptionPayload
}

type Tag {
  id: ID!
  name: String!
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
}

type TagConnection {
  pageInfo: PageInfo!
  edges: [TagEdge]!
  aggregate: AggregateTag!
}

input TagCreateInput {
  name: String!
  products: ProductCreateManyWithoutTagsInput
}

input TagCreateManyWithoutProductsInput {
  create: [TagCreateWithoutProductsInput!]
  connect: [TagWhereUniqueInput!]
}

input TagCreateWithoutProductsInput {
  name: String!
}

type TagEdge {
  node: Tag!
  cursor: String!
}

enum TagOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TagPreviousValues {
  id: ID!
  name: String!
}

input TagScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [TagScalarWhereInput!]
  OR: [TagScalarWhereInput!]
  NOT: [TagScalarWhereInput!]
}

type TagSubscriptionPayload {
  mutation: MutationType!
  node: Tag
  updatedFields: [String!]
  previousValues: TagPreviousValues
}

input TagSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TagWhereInput
  AND: [TagSubscriptionWhereInput!]
  OR: [TagSubscriptionWhereInput!]
  NOT: [TagSubscriptionWhereInput!]
}

input TagUpdateInput {
  name: String
  products: ProductUpdateManyWithoutTagsInput
}

input TagUpdateManyDataInput {
  name: String
}

input TagUpdateManyMutationInput {
  name: String
}

input TagUpdateManyWithoutProductsInput {
  create: [TagCreateWithoutProductsInput!]
  delete: [TagWhereUniqueInput!]
  connect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  disconnect: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutProductsInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutProductsInput!]
  deleteMany: [TagScalarWhereInput!]
  updateMany: [TagUpdateManyWithWhereNestedInput!]
}

input TagUpdateManyWithWhereNestedInput {
  where: TagScalarWhereInput!
  data: TagUpdateManyDataInput!
}

input TagUpdateWithoutProductsDataInput {
  name: String
}

input TagUpdateWithWhereUniqueWithoutProductsInput {
  where: TagWhereUniqueInput!
  data: TagUpdateWithoutProductsDataInput!
}

input TagUpsertWithWhereUniqueWithoutProductsInput {
  where: TagWhereUniqueInput!
  update: TagUpdateWithoutProductsDataInput!
  create: TagCreateWithoutProductsInput!
}

input TagWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  products_every: ProductWhereInput
  products_some: ProductWhereInput
  products_none: ProductWhereInput
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
}

input TagWhereUniqueInput {
  id: ID
  name: String
}

type User {
  id: ID!
  email: String!
  password: String!
  name: String!
  username: String!
  shops(where: ShopWhereInput, orderBy: ShopOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Shop!]
  images(where: UserImageWhereInput, orderBy: UserImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserImage!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
  name: String!
  username: String!
  shops: ShopCreateManyWithoutOwnersInput
  images: UserImageCreateManyWithoutUserInput
}

input UserCreateManyWithoutShopsInput {
  create: [UserCreateWithoutShopsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutImagesInput {
  create: UserCreateWithoutImagesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutImagesInput {
  email: String!
  password: String!
  name: String!
  username: String!
  shops: ShopCreateManyWithoutOwnersInput
}

input UserCreateWithoutShopsInput {
  email: String!
  password: String!
  name: String!
  username: String!
  images: UserImageCreateManyWithoutUserInput
}

type UserEdge {
  node: User!
  cursor: String!
}

type UserImage {
  id: ID!
  imageUrl: String!
  user: User
}

type UserImageConnection {
  pageInfo: PageInfo!
  edges: [UserImageEdge]!
  aggregate: AggregateUserImage!
}

input UserImageCreateInput {
  imageUrl: String!
  user: UserCreateOneWithoutImagesInput
}

input UserImageCreateManyWithoutUserInput {
  create: [UserImageCreateWithoutUserInput!]
  connect: [UserImageWhereUniqueInput!]
}

input UserImageCreateWithoutUserInput {
  imageUrl: String!
}

type UserImageEdge {
  node: UserImage!
  cursor: String!
}

enum UserImageOrderByInput {
  id_ASC
  id_DESC
  imageUrl_ASC
  imageUrl_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserImagePreviousValues {
  id: ID!
  imageUrl: String!
}

input UserImageScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  imageUrl: String
  imageUrl_not: String
  imageUrl_in: [String!]
  imageUrl_not_in: [String!]
  imageUrl_lt: String
  imageUrl_lte: String
  imageUrl_gt: String
  imageUrl_gte: String
  imageUrl_contains: String
  imageUrl_not_contains: String
  imageUrl_starts_with: String
  imageUrl_not_starts_with: String
  imageUrl_ends_with: String
  imageUrl_not_ends_with: String
  AND: [UserImageScalarWhereInput!]
  OR: [UserImageScalarWhereInput!]
  NOT: [UserImageScalarWhereInput!]
}

type UserImageSubscriptionPayload {
  mutation: MutationType!
  node: UserImage
  updatedFields: [String!]
  previousValues: UserImagePreviousValues
}

input UserImageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserImageWhereInput
  AND: [UserImageSubscriptionWhereInput!]
  OR: [UserImageSubscriptionWhereInput!]
  NOT: [UserImageSubscriptionWhereInput!]
}

input UserImageUpdateInput {
  imageUrl: String
  user: UserUpdateOneWithoutImagesInput
}

input UserImageUpdateManyDataInput {
  imageUrl: String
}

input UserImageUpdateManyMutationInput {
  imageUrl: String
}

input UserImageUpdateManyWithoutUserInput {
  create: [UserImageCreateWithoutUserInput!]
  delete: [UserImageWhereUniqueInput!]
  connect: [UserImageWhereUniqueInput!]
  set: [UserImageWhereUniqueInput!]
  disconnect: [UserImageWhereUniqueInput!]
  update: [UserImageUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [UserImageUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [UserImageScalarWhereInput!]
  updateMany: [UserImageUpdateManyWithWhereNestedInput!]
}

input UserImageUpdateManyWithWhereNestedInput {
  where: UserImageScalarWhereInput!
  data: UserImageUpdateManyDataInput!
}

input UserImageUpdateWithoutUserDataInput {
  imageUrl: String
}

input UserImageUpdateWithWhereUniqueWithoutUserInput {
  where: UserImageWhereUniqueInput!
  data: UserImageUpdateWithoutUserDataInput!
}

input UserImageUpsertWithWhereUniqueWithoutUserInput {
  where: UserImageWhereUniqueInput!
  update: UserImageUpdateWithoutUserDataInput!
  create: UserImageCreateWithoutUserInput!
}

input UserImageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  imageUrl: String
  imageUrl_not: String
  imageUrl_in: [String!]
  imageUrl_not_in: [String!]
  imageUrl_lt: String
  imageUrl_lte: String
  imageUrl_gt: String
  imageUrl_gte: String
  imageUrl_contains: String
  imageUrl_not_contains: String
  imageUrl_starts_with: String
  imageUrl_not_starts_with: String
  imageUrl_ends_with: String
  imageUrl_not_ends_with: String
  user: UserWhereInput
  AND: [UserImageWhereInput!]
  OR: [UserImageWhereInput!]
  NOT: [UserImageWhereInput!]
}

input UserImageWhereUniqueInput {
  id: ID
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
  username_ASC
  username_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  name: String!
  username: String!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  password: String
  name: String
  username: String
  shops: ShopUpdateManyWithoutOwnersInput
  images: UserImageUpdateManyWithoutUserInput
}

input UserUpdateManyDataInput {
  email: String
  password: String
  name: String
  username: String
}

input UserUpdateManyMutationInput {
  email: String
  password: String
  name: String
  username: String
}

input UserUpdateManyWithoutShopsInput {
  create: [UserCreateWithoutShopsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutShopsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutShopsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneWithoutImagesInput {
  create: UserCreateWithoutImagesInput
  update: UserUpdateWithoutImagesDataInput
  upsert: UserUpsertWithoutImagesInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutImagesDataInput {
  email: String
  password: String
  name: String
  username: String
  shops: ShopUpdateManyWithoutOwnersInput
}

input UserUpdateWithoutShopsDataInput {
  email: String
  password: String
  name: String
  username: String
  images: UserImageUpdateManyWithoutUserInput
}

input UserUpdateWithWhereUniqueWithoutShopsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutShopsDataInput!
}

input UserUpsertWithoutImagesInput {
  update: UserUpdateWithoutImagesDataInput!
  create: UserCreateWithoutImagesInput!
}

input UserUpsertWithWhereUniqueWithoutShopsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutShopsDataInput!
  create: UserCreateWithoutShopsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  shops_every: ShopWhereInput
  shops_some: ShopWhereInput
  shops_none: ShopWhereInput
  images_every: UserImageWhereInput
  images_some: UserImageWhereInput
  images_none: UserImageWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
  username: String
}

type Variant {
  id: ID!
  product: Product!
  name: String!
  values: [String!]!
}

type VariantConnection {
  pageInfo: PageInfo!
  edges: [VariantEdge]!
  aggregate: AggregateVariant!
}

input VariantCreateInput {
  product: ProductCreateOneWithoutVariantsInput!
  name: String!
  values: VariantCreatevaluesInput
}

input VariantCreateManyWithoutProductInput {
  create: [VariantCreateWithoutProductInput!]
  connect: [VariantWhereUniqueInput!]
}

input VariantCreatevaluesInput {
  set: [String!]
}

input VariantCreateWithoutProductInput {
  name: String!
  values: VariantCreatevaluesInput
}

type VariantEdge {
  node: Variant!
  cursor: String!
}

enum VariantOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type VariantPreviousValues {
  id: ID!
  name: String!
  values: [String!]!
}

input VariantScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [VariantScalarWhereInput!]
  OR: [VariantScalarWhereInput!]
  NOT: [VariantScalarWhereInput!]
}

type VariantSubscriptionPayload {
  mutation: MutationType!
  node: Variant
  updatedFields: [String!]
  previousValues: VariantPreviousValues
}

input VariantSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: VariantWhereInput
  AND: [VariantSubscriptionWhereInput!]
  OR: [VariantSubscriptionWhereInput!]
  NOT: [VariantSubscriptionWhereInput!]
}

input VariantUpdateInput {
  product: ProductUpdateOneRequiredWithoutVariantsInput
  name: String
  values: VariantUpdatevaluesInput
}

input VariantUpdateManyDataInput {
  name: String
  values: VariantUpdatevaluesInput
}

input VariantUpdateManyMutationInput {
  name: String
  values: VariantUpdatevaluesInput
}

input VariantUpdateManyWithoutProductInput {
  create: [VariantCreateWithoutProductInput!]
  delete: [VariantWhereUniqueInput!]
  connect: [VariantWhereUniqueInput!]
  set: [VariantWhereUniqueInput!]
  disconnect: [VariantWhereUniqueInput!]
  update: [VariantUpdateWithWhereUniqueWithoutProductInput!]
  upsert: [VariantUpsertWithWhereUniqueWithoutProductInput!]
  deleteMany: [VariantScalarWhereInput!]
  updateMany: [VariantUpdateManyWithWhereNestedInput!]
}

input VariantUpdateManyWithWhereNestedInput {
  where: VariantScalarWhereInput!
  data: VariantUpdateManyDataInput!
}

input VariantUpdatevaluesInput {
  set: [String!]
}

input VariantUpdateWithoutProductDataInput {
  name: String
  values: VariantUpdatevaluesInput
}

input VariantUpdateWithWhereUniqueWithoutProductInput {
  where: VariantWhereUniqueInput!
  data: VariantUpdateWithoutProductDataInput!
}

input VariantUpsertWithWhereUniqueWithoutProductInput {
  where: VariantWhereUniqueInput!
  update: VariantUpdateWithoutProductDataInput!
  create: VariantCreateWithoutProductInput!
}

input VariantWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  product: ProductWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [VariantWhereInput!]
  OR: [VariantWhereInput!]
  NOT: [VariantWhereInput!]
}

input VariantWhereUniqueInput {
  id: ID
}
`