// Code generated by Prisma (prisma@1.34.6). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateBrand {
  count: Int!
}

type AggregateCart {
  count: Int!
}

type AggregateCartItem {
  count: Int!
}

type AggregateCategory {
  count: Int!
}

type AggregateForum {
  count: Int!
}

type AggregateForumPost {
  count: Int!
}

type AggregateForumPostComment {
  count: Int!
}

type AggregateOrder {
  count: Int!
}

type AggregateorderItem {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type AggregateProductImage {
  count: Int!
}

type AggregateProductReview {
  count: Int!
}

type AggregateShop {
  count: Int!
}

type AggregateShopImage {
  count: Int!
}

type AggregateTag {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateUserImage {
  count: Int!
}

type AggregateVariant {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Brand {
  id: ID!
  name: String!
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type BrandConnection {
  pageInfo: PageInfo!
  edges: [BrandEdge]!
  aggregate: AggregateBrand!
}

input BrandCreateInput {
  id: ID
  name: String!
  products: ProductCreateManyWithoutBrandInput
}

input BrandCreateOneWithoutProductsInput {
  create: BrandCreateWithoutProductsInput
  connect: BrandWhereUniqueInput
}

input BrandCreateWithoutProductsInput {
  id: ID
  name: String!
}

type BrandEdge {
  node: Brand!
  cursor: String!
}

enum BrandOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BrandPreviousValues {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type BrandSubscriptionPayload {
  mutation: MutationType!
  node: Brand
  updatedFields: [String!]
  previousValues: BrandPreviousValues
}

input BrandSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BrandWhereInput
  AND: [BrandSubscriptionWhereInput!]
  OR: [BrandSubscriptionWhereInput!]
  NOT: [BrandSubscriptionWhereInput!]
}

input BrandUpdateInput {
  name: String
  products: ProductUpdateManyWithoutBrandInput
}

input BrandUpdateManyMutationInput {
  name: String
}

input BrandUpdateOneWithoutProductsInput {
  create: BrandCreateWithoutProductsInput
  update: BrandUpdateWithoutProductsDataInput
  upsert: BrandUpsertWithoutProductsInput
  delete: Boolean
  disconnect: Boolean
  connect: BrandWhereUniqueInput
}

input BrandUpdateWithoutProductsDataInput {
  name: String
}

input BrandUpsertWithoutProductsInput {
  update: BrandUpdateWithoutProductsDataInput!
  create: BrandCreateWithoutProductsInput!
}

input BrandWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  products_every: ProductWhereInput
  products_some: ProductWhereInput
  products_none: ProductWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [BrandWhereInput!]
  OR: [BrandWhereInput!]
  NOT: [BrandWhereInput!]
}

input BrandWhereUniqueInput {
  id: ID
  name: String
}

type Cart {
  id: ID!
  user: User!
  items(where: CartItemWhereInput, orderBy: CartItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CartItem!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CartConnection {
  pageInfo: PageInfo!
  edges: [CartEdge]!
  aggregate: AggregateCart!
}

input CartCreateInput {
  id: ID
  user: UserCreateOneWithoutCartItemsInput!
  items: CartItemCreateManyWithoutCartInput
}

input CartCreateOneWithoutItemsInput {
  create: CartCreateWithoutItemsInput
  connect: CartWhereUniqueInput
}

input CartCreateOneWithoutUserInput {
  create: CartCreateWithoutUserInput
  connect: CartWhereUniqueInput
}

input CartCreateWithoutItemsInput {
  id: ID
  user: UserCreateOneWithoutCartItemsInput!
}

input CartCreateWithoutUserInput {
  id: ID
  items: CartItemCreateManyWithoutCartInput
}

type CartEdge {
  node: Cart!
  cursor: String!
}

type CartItem {
  id: ID!
  product: Product!
  quantity: Int!
  variants: [String!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  cart: Cart!
}

type CartItemConnection {
  pageInfo: PageInfo!
  edges: [CartItemEdge]!
  aggregate: AggregateCartItem!
}

input CartItemCreateInput {
  id: ID
  product: ProductCreateOneInput!
  quantity: Int!
  variants: CartItemCreatevariantsInput
  cart: CartCreateOneWithoutItemsInput!
}

input CartItemCreateManyWithoutCartInput {
  create: [CartItemCreateWithoutCartInput!]
  connect: [CartItemWhereUniqueInput!]
}

input CartItemCreatevariantsInput {
  set: [String!]
}

input CartItemCreateWithoutCartInput {
  id: ID
  product: ProductCreateOneInput!
  quantity: Int!
  variants: CartItemCreatevariantsInput
}

type CartItemEdge {
  node: CartItem!
  cursor: String!
}

enum CartItemOrderByInput {
  id_ASC
  id_DESC
  quantity_ASC
  quantity_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CartItemPreviousValues {
  id: ID!
  quantity: Int!
  variants: [String!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CartItemScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  quantity: Int
  quantity_not: Int
  quantity_in: [Int!]
  quantity_not_in: [Int!]
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CartItemScalarWhereInput!]
  OR: [CartItemScalarWhereInput!]
  NOT: [CartItemScalarWhereInput!]
}

type CartItemSubscriptionPayload {
  mutation: MutationType!
  node: CartItem
  updatedFields: [String!]
  previousValues: CartItemPreviousValues
}

input CartItemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CartItemWhereInput
  AND: [CartItemSubscriptionWhereInput!]
  OR: [CartItemSubscriptionWhereInput!]
  NOT: [CartItemSubscriptionWhereInput!]
}

input CartItemUpdateInput {
  product: ProductUpdateOneRequiredInput
  quantity: Int
  variants: CartItemUpdatevariantsInput
  cart: CartUpdateOneRequiredWithoutItemsInput
}

input CartItemUpdateManyDataInput {
  quantity: Int
  variants: CartItemUpdatevariantsInput
}

input CartItemUpdateManyMutationInput {
  quantity: Int
  variants: CartItemUpdatevariantsInput
}

input CartItemUpdateManyWithoutCartInput {
  create: [CartItemCreateWithoutCartInput!]
  delete: [CartItemWhereUniqueInput!]
  connect: [CartItemWhereUniqueInput!]
  set: [CartItemWhereUniqueInput!]
  disconnect: [CartItemWhereUniqueInput!]
  update: [CartItemUpdateWithWhereUniqueWithoutCartInput!]
  upsert: [CartItemUpsertWithWhereUniqueWithoutCartInput!]
  deleteMany: [CartItemScalarWhereInput!]
  updateMany: [CartItemUpdateManyWithWhereNestedInput!]
}

input CartItemUpdateManyWithWhereNestedInput {
  where: CartItemScalarWhereInput!
  data: CartItemUpdateManyDataInput!
}

input CartItemUpdatevariantsInput {
  set: [String!]
}

input CartItemUpdateWithoutCartDataInput {
  product: ProductUpdateOneRequiredInput
  quantity: Int
  variants: CartItemUpdatevariantsInput
}

input CartItemUpdateWithWhereUniqueWithoutCartInput {
  where: CartItemWhereUniqueInput!
  data: CartItemUpdateWithoutCartDataInput!
}

input CartItemUpsertWithWhereUniqueWithoutCartInput {
  where: CartItemWhereUniqueInput!
  update: CartItemUpdateWithoutCartDataInput!
  create: CartItemCreateWithoutCartInput!
}

input CartItemWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  product: ProductWhereInput
  quantity: Int
  quantity_not: Int
  quantity_in: [Int!]
  quantity_not_in: [Int!]
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  cart: CartWhereInput
  AND: [CartItemWhereInput!]
  OR: [CartItemWhereInput!]
  NOT: [CartItemWhereInput!]
}

input CartItemWhereUniqueInput {
  id: ID
}

enum CartOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CartPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CartSubscriptionPayload {
  mutation: MutationType!
  node: Cart
  updatedFields: [String!]
  previousValues: CartPreviousValues
}

input CartSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CartWhereInput
  AND: [CartSubscriptionWhereInput!]
  OR: [CartSubscriptionWhereInput!]
  NOT: [CartSubscriptionWhereInput!]
}

input CartUpdateInput {
  user: UserUpdateOneRequiredWithoutCartItemsInput
  items: CartItemUpdateManyWithoutCartInput
}

input CartUpdateOneRequiredWithoutItemsInput {
  create: CartCreateWithoutItemsInput
  update: CartUpdateWithoutItemsDataInput
  upsert: CartUpsertWithoutItemsInput
  connect: CartWhereUniqueInput
}

input CartUpdateOneWithoutUserInput {
  create: CartCreateWithoutUserInput
  update: CartUpdateWithoutUserDataInput
  upsert: CartUpsertWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  connect: CartWhereUniqueInput
}

input CartUpdateWithoutItemsDataInput {
  user: UserUpdateOneRequiredWithoutCartItemsInput
}

input CartUpdateWithoutUserDataInput {
  items: CartItemUpdateManyWithoutCartInput
}

input CartUpsertWithoutItemsInput {
  update: CartUpdateWithoutItemsDataInput!
  create: CartCreateWithoutItemsInput!
}

input CartUpsertWithoutUserInput {
  update: CartUpdateWithoutUserDataInput!
  create: CartCreateWithoutUserInput!
}

input CartWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  items_every: CartItemWhereInput
  items_some: CartItemWhereInput
  items_none: CartItemWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CartWhereInput!]
  OR: [CartWhereInput!]
  NOT: [CartWhereInput!]
}

input CartWhereUniqueInput {
  id: ID
}

type Category {
  id: ID!
  name: String!
  product(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CategoryConnection {
  pageInfo: PageInfo!
  edges: [CategoryEdge]!
  aggregate: AggregateCategory!
}

input CategoryCreateInput {
  id: ID
  name: String!
  product: ProductCreateManyWithoutCategoriesInput
}

input CategoryCreateManyWithoutProductInput {
  create: [CategoryCreateWithoutProductInput!]
  connect: [CategoryWhereUniqueInput!]
}

input CategoryCreateWithoutProductInput {
  id: ID
  name: String!
}

type CategoryEdge {
  node: Category!
  cursor: String!
}

enum CategoryOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CategoryPreviousValues {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CategoryScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CategoryScalarWhereInput!]
  OR: [CategoryScalarWhereInput!]
  NOT: [CategoryScalarWhereInput!]
}

type CategorySubscriptionPayload {
  mutation: MutationType!
  node: Category
  updatedFields: [String!]
  previousValues: CategoryPreviousValues
}

input CategorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CategoryWhereInput
  AND: [CategorySubscriptionWhereInput!]
  OR: [CategorySubscriptionWhereInput!]
  NOT: [CategorySubscriptionWhereInput!]
}

input CategoryUpdateInput {
  name: String
  product: ProductUpdateManyWithoutCategoriesInput
}

input CategoryUpdateManyDataInput {
  name: String
}

input CategoryUpdateManyMutationInput {
  name: String
}

input CategoryUpdateManyWithoutProductInput {
  create: [CategoryCreateWithoutProductInput!]
  delete: [CategoryWhereUniqueInput!]
  connect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  disconnect: [CategoryWhereUniqueInput!]
  update: [CategoryUpdateWithWhereUniqueWithoutProductInput!]
  upsert: [CategoryUpsertWithWhereUniqueWithoutProductInput!]
  deleteMany: [CategoryScalarWhereInput!]
  updateMany: [CategoryUpdateManyWithWhereNestedInput!]
}

input CategoryUpdateManyWithWhereNestedInput {
  where: CategoryScalarWhereInput!
  data: CategoryUpdateManyDataInput!
}

input CategoryUpdateWithoutProductDataInput {
  name: String
}

input CategoryUpdateWithWhereUniqueWithoutProductInput {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateWithoutProductDataInput!
}

input CategoryUpsertWithWhereUniqueWithoutProductInput {
  where: CategoryWhereUniqueInput!
  update: CategoryUpdateWithoutProductDataInput!
  create: CategoryCreateWithoutProductInput!
}

input CategoryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  product_every: ProductWhereInput
  product_some: ProductWhereInput
  product_none: ProductWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
}

input CategoryWhereUniqueInput {
  id: ID
  name: String
}

scalar DateTime

type Forum {
  id: ID!
  avatarPic: String!
  coverPic: String!
  members(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  posts(where: ForumPostWhereInput, orderBy: ForumPostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ForumPost!]
  name: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ForumConnection {
  pageInfo: PageInfo!
  edges: [ForumEdge]!
  aggregate: AggregateForum!
}

input ForumCreateInput {
  id: ID
  avatarPic: String
  coverPic: String
  members: UserCreateManyWithoutForumsInput
  posts: ForumPostCreateManyWithoutForumInput
  name: String!
  description: String
}

input ForumCreateManyWithoutMembersInput {
  create: [ForumCreateWithoutMembersInput!]
  connect: [ForumWhereUniqueInput!]
}

input ForumCreateOneWithoutPostsInput {
  create: ForumCreateWithoutPostsInput
  connect: ForumWhereUniqueInput
}

input ForumCreateWithoutMembersInput {
  id: ID
  avatarPic: String
  coverPic: String
  posts: ForumPostCreateManyWithoutForumInput
  name: String!
  description: String
}

input ForumCreateWithoutPostsInput {
  id: ID
  avatarPic: String
  coverPic: String
  members: UserCreateManyWithoutForumsInput
  name: String!
  description: String
}

type ForumEdge {
  node: Forum!
  cursor: String!
}

enum ForumOrderByInput {
  id_ASC
  id_DESC
  avatarPic_ASC
  avatarPic_DESC
  coverPic_ASC
  coverPic_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ForumPost {
  id: ID!
  postedBy: User!
  forum: Forum!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  content: String
  type: ForumPostType!
  comments(where: ForumPostCommentWhereInput, orderBy: ForumPostCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ForumPostComment!]
}

type ForumPostComment {
  id: ID!
  user: User!
  forumPost: ForumPost!
  comment: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ForumPostCommentConnection {
  pageInfo: PageInfo!
  edges: [ForumPostCommentEdge]!
  aggregate: AggregateForumPostComment!
}

input ForumPostCommentCreateInput {
  id: ID
  user: UserCreateOneWithoutPostCommentsInput!
  forumPost: ForumPostCreateOneWithoutCommentsInput!
  comment: String!
}

input ForumPostCommentCreateManyWithoutForumPostInput {
  create: [ForumPostCommentCreateWithoutForumPostInput!]
  connect: [ForumPostCommentWhereUniqueInput!]
}

input ForumPostCommentCreateManyWithoutUserInput {
  create: [ForumPostCommentCreateWithoutUserInput!]
  connect: [ForumPostCommentWhereUniqueInput!]
}

input ForumPostCommentCreateWithoutForumPostInput {
  id: ID
  user: UserCreateOneWithoutPostCommentsInput!
  comment: String!
}

input ForumPostCommentCreateWithoutUserInput {
  id: ID
  forumPost: ForumPostCreateOneWithoutCommentsInput!
  comment: String!
}

type ForumPostCommentEdge {
  node: ForumPostComment!
  cursor: String!
}

enum ForumPostCommentOrderByInput {
  id_ASC
  id_DESC
  comment_ASC
  comment_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ForumPostCommentPreviousValues {
  id: ID!
  comment: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ForumPostCommentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  comment: String
  comment_not: String
  comment_in: [String!]
  comment_not_in: [String!]
  comment_lt: String
  comment_lte: String
  comment_gt: String
  comment_gte: String
  comment_contains: String
  comment_not_contains: String
  comment_starts_with: String
  comment_not_starts_with: String
  comment_ends_with: String
  comment_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ForumPostCommentScalarWhereInput!]
  OR: [ForumPostCommentScalarWhereInput!]
  NOT: [ForumPostCommentScalarWhereInput!]
}

type ForumPostCommentSubscriptionPayload {
  mutation: MutationType!
  node: ForumPostComment
  updatedFields: [String!]
  previousValues: ForumPostCommentPreviousValues
}

input ForumPostCommentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ForumPostCommentWhereInput
  AND: [ForumPostCommentSubscriptionWhereInput!]
  OR: [ForumPostCommentSubscriptionWhereInput!]
  NOT: [ForumPostCommentSubscriptionWhereInput!]
}

input ForumPostCommentUpdateInput {
  user: UserUpdateOneRequiredWithoutPostCommentsInput
  forumPost: ForumPostUpdateOneRequiredWithoutCommentsInput
  comment: String
}

input ForumPostCommentUpdateManyDataInput {
  comment: String
}

input ForumPostCommentUpdateManyMutationInput {
  comment: String
}

input ForumPostCommentUpdateManyWithoutForumPostInput {
  create: [ForumPostCommentCreateWithoutForumPostInput!]
  delete: [ForumPostCommentWhereUniqueInput!]
  connect: [ForumPostCommentWhereUniqueInput!]
  set: [ForumPostCommentWhereUniqueInput!]
  disconnect: [ForumPostCommentWhereUniqueInput!]
  update: [ForumPostCommentUpdateWithWhereUniqueWithoutForumPostInput!]
  upsert: [ForumPostCommentUpsertWithWhereUniqueWithoutForumPostInput!]
  deleteMany: [ForumPostCommentScalarWhereInput!]
  updateMany: [ForumPostCommentUpdateManyWithWhereNestedInput!]
}

input ForumPostCommentUpdateManyWithoutUserInput {
  create: [ForumPostCommentCreateWithoutUserInput!]
  delete: [ForumPostCommentWhereUniqueInput!]
  connect: [ForumPostCommentWhereUniqueInput!]
  set: [ForumPostCommentWhereUniqueInput!]
  disconnect: [ForumPostCommentWhereUniqueInput!]
  update: [ForumPostCommentUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [ForumPostCommentUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [ForumPostCommentScalarWhereInput!]
  updateMany: [ForumPostCommentUpdateManyWithWhereNestedInput!]
}

input ForumPostCommentUpdateManyWithWhereNestedInput {
  where: ForumPostCommentScalarWhereInput!
  data: ForumPostCommentUpdateManyDataInput!
}

input ForumPostCommentUpdateWithoutForumPostDataInput {
  user: UserUpdateOneRequiredWithoutPostCommentsInput
  comment: String
}

input ForumPostCommentUpdateWithoutUserDataInput {
  forumPost: ForumPostUpdateOneRequiredWithoutCommentsInput
  comment: String
}

input ForumPostCommentUpdateWithWhereUniqueWithoutForumPostInput {
  where: ForumPostCommentWhereUniqueInput!
  data: ForumPostCommentUpdateWithoutForumPostDataInput!
}

input ForumPostCommentUpdateWithWhereUniqueWithoutUserInput {
  where: ForumPostCommentWhereUniqueInput!
  data: ForumPostCommentUpdateWithoutUserDataInput!
}

input ForumPostCommentUpsertWithWhereUniqueWithoutForumPostInput {
  where: ForumPostCommentWhereUniqueInput!
  update: ForumPostCommentUpdateWithoutForumPostDataInput!
  create: ForumPostCommentCreateWithoutForumPostInput!
}

input ForumPostCommentUpsertWithWhereUniqueWithoutUserInput {
  where: ForumPostCommentWhereUniqueInput!
  update: ForumPostCommentUpdateWithoutUserDataInput!
  create: ForumPostCommentCreateWithoutUserInput!
}

input ForumPostCommentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  forumPost: ForumPostWhereInput
  comment: String
  comment_not: String
  comment_in: [String!]
  comment_not_in: [String!]
  comment_lt: String
  comment_lte: String
  comment_gt: String
  comment_gte: String
  comment_contains: String
  comment_not_contains: String
  comment_starts_with: String
  comment_not_starts_with: String
  comment_ends_with: String
  comment_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ForumPostCommentWhereInput!]
  OR: [ForumPostCommentWhereInput!]
  NOT: [ForumPostCommentWhereInput!]
}

input ForumPostCommentWhereUniqueInput {
  id: ID
}

type ForumPostConnection {
  pageInfo: PageInfo!
  edges: [ForumPostEdge]!
  aggregate: AggregateForumPost!
}

input ForumPostCreateInput {
  id: ID
  postedBy: UserCreateOneWithoutForumpostsInput!
  forum: ForumCreateOneWithoutPostsInput!
  title: String!
  content: String
  type: ForumPostType!
  comments: ForumPostCommentCreateManyWithoutForumPostInput
}

input ForumPostCreateManyWithoutForumInput {
  create: [ForumPostCreateWithoutForumInput!]
  connect: [ForumPostWhereUniqueInput!]
}

input ForumPostCreateManyWithoutPostedByInput {
  create: [ForumPostCreateWithoutPostedByInput!]
  connect: [ForumPostWhereUniqueInput!]
}

input ForumPostCreateOneWithoutCommentsInput {
  create: ForumPostCreateWithoutCommentsInput
  connect: ForumPostWhereUniqueInput
}

input ForumPostCreateWithoutCommentsInput {
  id: ID
  postedBy: UserCreateOneWithoutForumpostsInput!
  forum: ForumCreateOneWithoutPostsInput!
  title: String!
  content: String
  type: ForumPostType!
}

input ForumPostCreateWithoutForumInput {
  id: ID
  postedBy: UserCreateOneWithoutForumpostsInput!
  title: String!
  content: String
  type: ForumPostType!
  comments: ForumPostCommentCreateManyWithoutForumPostInput
}

input ForumPostCreateWithoutPostedByInput {
  id: ID
  forum: ForumCreateOneWithoutPostsInput!
  title: String!
  content: String
  type: ForumPostType!
  comments: ForumPostCommentCreateManyWithoutForumPostInput
}

type ForumPostEdge {
  node: ForumPost!
  cursor: String!
}

enum ForumPostOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  content_ASC
  content_DESC
  type_ASC
  type_DESC
}

type ForumPostPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  content: String
  type: ForumPostType!
}

input ForumPostScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  type: ForumPostType
  type_not: ForumPostType
  type_in: [ForumPostType!]
  type_not_in: [ForumPostType!]
  AND: [ForumPostScalarWhereInput!]
  OR: [ForumPostScalarWhereInput!]
  NOT: [ForumPostScalarWhereInput!]
}

type ForumPostSubscriptionPayload {
  mutation: MutationType!
  node: ForumPost
  updatedFields: [String!]
  previousValues: ForumPostPreviousValues
}

input ForumPostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ForumPostWhereInput
  AND: [ForumPostSubscriptionWhereInput!]
  OR: [ForumPostSubscriptionWhereInput!]
  NOT: [ForumPostSubscriptionWhereInput!]
}

enum ForumPostType {
  POST
  MEDIA
  LINK
}

input ForumPostUpdateInput {
  postedBy: UserUpdateOneRequiredWithoutForumpostsInput
  forum: ForumUpdateOneRequiredWithoutPostsInput
  title: String
  content: String
  type: ForumPostType
  comments: ForumPostCommentUpdateManyWithoutForumPostInput
}

input ForumPostUpdateManyDataInput {
  title: String
  content: String
  type: ForumPostType
}

input ForumPostUpdateManyMutationInput {
  title: String
  content: String
  type: ForumPostType
}

input ForumPostUpdateManyWithoutForumInput {
  create: [ForumPostCreateWithoutForumInput!]
  delete: [ForumPostWhereUniqueInput!]
  connect: [ForumPostWhereUniqueInput!]
  set: [ForumPostWhereUniqueInput!]
  disconnect: [ForumPostWhereUniqueInput!]
  update: [ForumPostUpdateWithWhereUniqueWithoutForumInput!]
  upsert: [ForumPostUpsertWithWhereUniqueWithoutForumInput!]
  deleteMany: [ForumPostScalarWhereInput!]
  updateMany: [ForumPostUpdateManyWithWhereNestedInput!]
}

input ForumPostUpdateManyWithoutPostedByInput {
  create: [ForumPostCreateWithoutPostedByInput!]
  delete: [ForumPostWhereUniqueInput!]
  connect: [ForumPostWhereUniqueInput!]
  set: [ForumPostWhereUniqueInput!]
  disconnect: [ForumPostWhereUniqueInput!]
  update: [ForumPostUpdateWithWhereUniqueWithoutPostedByInput!]
  upsert: [ForumPostUpsertWithWhereUniqueWithoutPostedByInput!]
  deleteMany: [ForumPostScalarWhereInput!]
  updateMany: [ForumPostUpdateManyWithWhereNestedInput!]
}

input ForumPostUpdateManyWithWhereNestedInput {
  where: ForumPostScalarWhereInput!
  data: ForumPostUpdateManyDataInput!
}

input ForumPostUpdateOneRequiredWithoutCommentsInput {
  create: ForumPostCreateWithoutCommentsInput
  update: ForumPostUpdateWithoutCommentsDataInput
  upsert: ForumPostUpsertWithoutCommentsInput
  connect: ForumPostWhereUniqueInput
}

input ForumPostUpdateWithoutCommentsDataInput {
  postedBy: UserUpdateOneRequiredWithoutForumpostsInput
  forum: ForumUpdateOneRequiredWithoutPostsInput
  title: String
  content: String
  type: ForumPostType
}

input ForumPostUpdateWithoutForumDataInput {
  postedBy: UserUpdateOneRequiredWithoutForumpostsInput
  title: String
  content: String
  type: ForumPostType
  comments: ForumPostCommentUpdateManyWithoutForumPostInput
}

input ForumPostUpdateWithoutPostedByDataInput {
  forum: ForumUpdateOneRequiredWithoutPostsInput
  title: String
  content: String
  type: ForumPostType
  comments: ForumPostCommentUpdateManyWithoutForumPostInput
}

input ForumPostUpdateWithWhereUniqueWithoutForumInput {
  where: ForumPostWhereUniqueInput!
  data: ForumPostUpdateWithoutForumDataInput!
}

input ForumPostUpdateWithWhereUniqueWithoutPostedByInput {
  where: ForumPostWhereUniqueInput!
  data: ForumPostUpdateWithoutPostedByDataInput!
}

input ForumPostUpsertWithoutCommentsInput {
  update: ForumPostUpdateWithoutCommentsDataInput!
  create: ForumPostCreateWithoutCommentsInput!
}

input ForumPostUpsertWithWhereUniqueWithoutForumInput {
  where: ForumPostWhereUniqueInput!
  update: ForumPostUpdateWithoutForumDataInput!
  create: ForumPostCreateWithoutForumInput!
}

input ForumPostUpsertWithWhereUniqueWithoutPostedByInput {
  where: ForumPostWhereUniqueInput!
  update: ForumPostUpdateWithoutPostedByDataInput!
  create: ForumPostCreateWithoutPostedByInput!
}

input ForumPostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  postedBy: UserWhereInput
  forum: ForumWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  type: ForumPostType
  type_not: ForumPostType
  type_in: [ForumPostType!]
  type_not_in: [ForumPostType!]
  comments_every: ForumPostCommentWhereInput
  comments_some: ForumPostCommentWhereInput
  comments_none: ForumPostCommentWhereInput
  AND: [ForumPostWhereInput!]
  OR: [ForumPostWhereInput!]
  NOT: [ForumPostWhereInput!]
}

input ForumPostWhereUniqueInput {
  id: ID
}

type ForumPreviousValues {
  id: ID!
  avatarPic: String!
  coverPic: String!
  name: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ForumScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  avatarPic: String
  avatarPic_not: String
  avatarPic_in: [String!]
  avatarPic_not_in: [String!]
  avatarPic_lt: String
  avatarPic_lte: String
  avatarPic_gt: String
  avatarPic_gte: String
  avatarPic_contains: String
  avatarPic_not_contains: String
  avatarPic_starts_with: String
  avatarPic_not_starts_with: String
  avatarPic_ends_with: String
  avatarPic_not_ends_with: String
  coverPic: String
  coverPic_not: String
  coverPic_in: [String!]
  coverPic_not_in: [String!]
  coverPic_lt: String
  coverPic_lte: String
  coverPic_gt: String
  coverPic_gte: String
  coverPic_contains: String
  coverPic_not_contains: String
  coverPic_starts_with: String
  coverPic_not_starts_with: String
  coverPic_ends_with: String
  coverPic_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ForumScalarWhereInput!]
  OR: [ForumScalarWhereInput!]
  NOT: [ForumScalarWhereInput!]
}

type ForumSubscriptionPayload {
  mutation: MutationType!
  node: Forum
  updatedFields: [String!]
  previousValues: ForumPreviousValues
}

input ForumSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ForumWhereInput
  AND: [ForumSubscriptionWhereInput!]
  OR: [ForumSubscriptionWhereInput!]
  NOT: [ForumSubscriptionWhereInput!]
}

input ForumUpdateInput {
  avatarPic: String
  coverPic: String
  members: UserUpdateManyWithoutForumsInput
  posts: ForumPostUpdateManyWithoutForumInput
  name: String
  description: String
}

input ForumUpdateManyDataInput {
  avatarPic: String
  coverPic: String
  name: String
  description: String
}

input ForumUpdateManyMutationInput {
  avatarPic: String
  coverPic: String
  name: String
  description: String
}

input ForumUpdateManyWithoutMembersInput {
  create: [ForumCreateWithoutMembersInput!]
  delete: [ForumWhereUniqueInput!]
  connect: [ForumWhereUniqueInput!]
  set: [ForumWhereUniqueInput!]
  disconnect: [ForumWhereUniqueInput!]
  update: [ForumUpdateWithWhereUniqueWithoutMembersInput!]
  upsert: [ForumUpsertWithWhereUniqueWithoutMembersInput!]
  deleteMany: [ForumScalarWhereInput!]
  updateMany: [ForumUpdateManyWithWhereNestedInput!]
}

input ForumUpdateManyWithWhereNestedInput {
  where: ForumScalarWhereInput!
  data: ForumUpdateManyDataInput!
}

input ForumUpdateOneRequiredWithoutPostsInput {
  create: ForumCreateWithoutPostsInput
  update: ForumUpdateWithoutPostsDataInput
  upsert: ForumUpsertWithoutPostsInput
  connect: ForumWhereUniqueInput
}

input ForumUpdateWithoutMembersDataInput {
  avatarPic: String
  coverPic: String
  posts: ForumPostUpdateManyWithoutForumInput
  name: String
  description: String
}

input ForumUpdateWithoutPostsDataInput {
  avatarPic: String
  coverPic: String
  members: UserUpdateManyWithoutForumsInput
  name: String
  description: String
}

input ForumUpdateWithWhereUniqueWithoutMembersInput {
  where: ForumWhereUniqueInput!
  data: ForumUpdateWithoutMembersDataInput!
}

input ForumUpsertWithoutPostsInput {
  update: ForumUpdateWithoutPostsDataInput!
  create: ForumCreateWithoutPostsInput!
}

input ForumUpsertWithWhereUniqueWithoutMembersInput {
  where: ForumWhereUniqueInput!
  update: ForumUpdateWithoutMembersDataInput!
  create: ForumCreateWithoutMembersInput!
}

input ForumWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  avatarPic: String
  avatarPic_not: String
  avatarPic_in: [String!]
  avatarPic_not_in: [String!]
  avatarPic_lt: String
  avatarPic_lte: String
  avatarPic_gt: String
  avatarPic_gte: String
  avatarPic_contains: String
  avatarPic_not_contains: String
  avatarPic_starts_with: String
  avatarPic_not_starts_with: String
  avatarPic_ends_with: String
  avatarPic_not_ends_with: String
  coverPic: String
  coverPic_not: String
  coverPic_in: [String!]
  coverPic_not_in: [String!]
  coverPic_lt: String
  coverPic_lte: String
  coverPic_gt: String
  coverPic_gte: String
  coverPic_contains: String
  coverPic_not_contains: String
  coverPic_starts_with: String
  coverPic_not_starts_with: String
  coverPic_ends_with: String
  coverPic_not_ends_with: String
  members_every: UserWhereInput
  members_some: UserWhereInput
  members_none: UserWhereInput
  posts_every: ForumPostWhereInput
  posts_some: ForumPostWhereInput
  posts_none: ForumPostWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ForumWhereInput!]
  OR: [ForumWhereInput!]
  NOT: [ForumWhereInput!]
}

input ForumWhereUniqueInput {
  id: ID
  name: String
}

scalar Long

type Mutation {
  createBrand(data: BrandCreateInput!): Brand!
  updateBrand(data: BrandUpdateInput!, where: BrandWhereUniqueInput!): Brand
  updateManyBrands(data: BrandUpdateManyMutationInput!, where: BrandWhereInput): BatchPayload!
  upsertBrand(where: BrandWhereUniqueInput!, create: BrandCreateInput!, update: BrandUpdateInput!): Brand!
  deleteBrand(where: BrandWhereUniqueInput!): Brand
  deleteManyBrands(where: BrandWhereInput): BatchPayload!
  createCart(data: CartCreateInput!): Cart!
  updateCart(data: CartUpdateInput!, where: CartWhereUniqueInput!): Cart
  upsertCart(where: CartWhereUniqueInput!, create: CartCreateInput!, update: CartUpdateInput!): Cart!
  deleteCart(where: CartWhereUniqueInput!): Cart
  deleteManyCarts(where: CartWhereInput): BatchPayload!
  createCartItem(data: CartItemCreateInput!): CartItem!
  updateCartItem(data: CartItemUpdateInput!, where: CartItemWhereUniqueInput!): CartItem
  updateManyCartItems(data: CartItemUpdateManyMutationInput!, where: CartItemWhereInput): BatchPayload!
  upsertCartItem(where: CartItemWhereUniqueInput!, create: CartItemCreateInput!, update: CartItemUpdateInput!): CartItem!
  deleteCartItem(where: CartItemWhereUniqueInput!): CartItem
  deleteManyCartItems(where: CartItemWhereInput): BatchPayload!
  createCategory(data: CategoryCreateInput!): Category!
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateManyCategories(data: CategoryUpdateManyMutationInput!, where: CategoryWhereInput): BatchPayload!
  upsertCategory(where: CategoryWhereUniqueInput!, create: CategoryCreateInput!, update: CategoryUpdateInput!): Category!
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteManyCategories(where: CategoryWhereInput): BatchPayload!
  createForum(data: ForumCreateInput!): Forum!
  updateForum(data: ForumUpdateInput!, where: ForumWhereUniqueInput!): Forum
  updateManyForums(data: ForumUpdateManyMutationInput!, where: ForumWhereInput): BatchPayload!
  upsertForum(where: ForumWhereUniqueInput!, create: ForumCreateInput!, update: ForumUpdateInput!): Forum!
  deleteForum(where: ForumWhereUniqueInput!): Forum
  deleteManyForums(where: ForumWhereInput): BatchPayload!
  createForumPost(data: ForumPostCreateInput!): ForumPost!
  updateForumPost(data: ForumPostUpdateInput!, where: ForumPostWhereUniqueInput!): ForumPost
  updateManyForumPosts(data: ForumPostUpdateManyMutationInput!, where: ForumPostWhereInput): BatchPayload!
  upsertForumPost(where: ForumPostWhereUniqueInput!, create: ForumPostCreateInput!, update: ForumPostUpdateInput!): ForumPost!
  deleteForumPost(where: ForumPostWhereUniqueInput!): ForumPost
  deleteManyForumPosts(where: ForumPostWhereInput): BatchPayload!
  createForumPostComment(data: ForumPostCommentCreateInput!): ForumPostComment!
  updateForumPostComment(data: ForumPostCommentUpdateInput!, where: ForumPostCommentWhereUniqueInput!): ForumPostComment
  updateManyForumPostComments(data: ForumPostCommentUpdateManyMutationInput!, where: ForumPostCommentWhereInput): BatchPayload!
  upsertForumPostComment(where: ForumPostCommentWhereUniqueInput!, create: ForumPostCommentCreateInput!, update: ForumPostCommentUpdateInput!): ForumPostComment!
  deleteForumPostComment(where: ForumPostCommentWhereUniqueInput!): ForumPostComment
  deleteManyForumPostComments(where: ForumPostCommentWhereInput): BatchPayload!
  createOrder(data: OrderCreateInput!): Order!
  updateOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order
  updateManyOrders(data: OrderUpdateManyMutationInput!, where: OrderWhereInput): BatchPayload!
  upsertOrder(where: OrderWhereUniqueInput!, create: OrderCreateInput!, update: OrderUpdateInput!): Order!
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteManyOrders(where: OrderWhereInput): BatchPayload!
  createProduct(data: ProductCreateInput!): Product!
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  createProductImage(data: ProductImageCreateInput!): ProductImage!
  updateProductImage(data: ProductImageUpdateInput!, where: ProductImageWhereUniqueInput!): ProductImage
  updateManyProductImages(data: ProductImageUpdateManyMutationInput!, where: ProductImageWhereInput): BatchPayload!
  upsertProductImage(where: ProductImageWhereUniqueInput!, create: ProductImageCreateInput!, update: ProductImageUpdateInput!): ProductImage!
  deleteProductImage(where: ProductImageWhereUniqueInput!): ProductImage
  deleteManyProductImages(where: ProductImageWhereInput): BatchPayload!
  createProductReview(data: ProductReviewCreateInput!): ProductReview!
  updateProductReview(data: ProductReviewUpdateInput!, where: ProductReviewWhereUniqueInput!): ProductReview
  updateManyProductReviews(data: ProductReviewUpdateManyMutationInput!, where: ProductReviewWhereInput): BatchPayload!
  upsertProductReview(where: ProductReviewWhereUniqueInput!, create: ProductReviewCreateInput!, update: ProductReviewUpdateInput!): ProductReview!
  deleteProductReview(where: ProductReviewWhereUniqueInput!): ProductReview
  deleteManyProductReviews(where: ProductReviewWhereInput): BatchPayload!
  createShop(data: ShopCreateInput!): Shop!
  updateShop(data: ShopUpdateInput!, where: ShopWhereUniqueInput!): Shop
  updateManyShops(data: ShopUpdateManyMutationInput!, where: ShopWhereInput): BatchPayload!
  upsertShop(where: ShopWhereUniqueInput!, create: ShopCreateInput!, update: ShopUpdateInput!): Shop!
  deleteShop(where: ShopWhereUniqueInput!): Shop
  deleteManyShops(where: ShopWhereInput): BatchPayload!
  createShopImage(data: ShopImageCreateInput!): ShopImage!
  updateShopImage(data: ShopImageUpdateInput!, where: ShopImageWhereUniqueInput!): ShopImage
  updateManyShopImages(data: ShopImageUpdateManyMutationInput!, where: ShopImageWhereInput): BatchPayload!
  upsertShopImage(where: ShopImageWhereUniqueInput!, create: ShopImageCreateInput!, update: ShopImageUpdateInput!): ShopImage!
  deleteShopImage(where: ShopImageWhereUniqueInput!): ShopImage
  deleteManyShopImages(where: ShopImageWhereInput): BatchPayload!
  createTag(data: TagCreateInput!): Tag!
  updateTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
  updateManyTags(data: TagUpdateManyMutationInput!, where: TagWhereInput): BatchPayload!
  upsertTag(where: TagWhereUniqueInput!, create: TagCreateInput!, update: TagUpdateInput!): Tag!
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteManyTags(where: TagWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createUserImage(data: UserImageCreateInput!): UserImage!
  updateUserImage(data: UserImageUpdateInput!, where: UserImageWhereUniqueInput!): UserImage
  updateManyUserImages(data: UserImageUpdateManyMutationInput!, where: UserImageWhereInput): BatchPayload!
  upsertUserImage(where: UserImageWhereUniqueInput!, create: UserImageCreateInput!, update: UserImageUpdateInput!): UserImage!
  deleteUserImage(where: UserImageWhereUniqueInput!): UserImage
  deleteManyUserImages(where: UserImageWhereInput): BatchPayload!
  createVariant(data: VariantCreateInput!): Variant!
  updateVariant(data: VariantUpdateInput!, where: VariantWhereUniqueInput!): Variant
  updateManyVariants(data: VariantUpdateManyMutationInput!, where: VariantWhereInput): BatchPayload!
  upsertVariant(where: VariantWhereUniqueInput!, create: VariantCreateInput!, update: VariantUpdateInput!): Variant!
  deleteVariant(where: VariantWhereUniqueInput!): Variant
  deleteManyVariants(where: VariantWhereInput): BatchPayload!
  createorderItem(data: orderItemCreateInput!): orderItem!
  updateorderItem(data: orderItemUpdateInput!, where: orderItemWhereUniqueInput!): orderItem
  updateManyorderItems(data: orderItemUpdateManyMutationInput!, where: orderItemWhereInput): BatchPayload!
  upsertorderItem(where: orderItemWhereUniqueInput!, create: orderItemCreateInput!, update: orderItemUpdateInput!): orderItem!
  deleteorderItem(where: orderItemWhereUniqueInput!): orderItem
  deleteManyorderItems(where: orderItemWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Order {
  id: ID!
  items(where: orderItemWhereInput, orderBy: orderItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [orderItem!]
  total: String!
  user: User!
  paymentId: String!
  PayerID: String!
  imageUrl: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type OrderConnection {
  pageInfo: PageInfo!
  edges: [OrderEdge]!
  aggregate: AggregateOrder!
}

input OrderCreateInput {
  id: ID
  items: orderItemCreateManyInput
  total: String!
  user: UserCreateOneInput!
  paymentId: String!
  PayerID: String!
  imageUrl: String
}

type OrderEdge {
  node: Order!
  cursor: String!
}

type orderItem {
  id: ID!
  title: String!
  description: String!
  price: String!
  quantity: Int!
  imageUrl: String
  variants: [String!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type orderItemConnection {
  pageInfo: PageInfo!
  edges: [orderItemEdge]!
  aggregate: AggregateorderItem!
}

input orderItemCreateInput {
  id: ID
  title: String!
  description: String!
  price: String!
  quantity: Int!
  imageUrl: String
  variants: orderItemCreatevariantsInput
}

input orderItemCreateManyInput {
  create: [orderItemCreateInput!]
  connect: [orderItemWhereUniqueInput!]
}

input orderItemCreatevariantsInput {
  set: [String!]
}

type orderItemEdge {
  node: orderItem!
  cursor: String!
}

enum orderItemOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  price_ASC
  price_DESC
  quantity_ASC
  quantity_DESC
  imageUrl_ASC
  imageUrl_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type orderItemPreviousValues {
  id: ID!
  title: String!
  description: String!
  price: String!
  quantity: Int!
  imageUrl: String
  variants: [String!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input orderItemScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  price: String
  price_not: String
  price_in: [String!]
  price_not_in: [String!]
  price_lt: String
  price_lte: String
  price_gt: String
  price_gte: String
  price_contains: String
  price_not_contains: String
  price_starts_with: String
  price_not_starts_with: String
  price_ends_with: String
  price_not_ends_with: String
  quantity: Int
  quantity_not: Int
  quantity_in: [Int!]
  quantity_not_in: [Int!]
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  imageUrl: String
  imageUrl_not: String
  imageUrl_in: [String!]
  imageUrl_not_in: [String!]
  imageUrl_lt: String
  imageUrl_lte: String
  imageUrl_gt: String
  imageUrl_gte: String
  imageUrl_contains: String
  imageUrl_not_contains: String
  imageUrl_starts_with: String
  imageUrl_not_starts_with: String
  imageUrl_ends_with: String
  imageUrl_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [orderItemScalarWhereInput!]
  OR: [orderItemScalarWhereInput!]
  NOT: [orderItemScalarWhereInput!]
}

type orderItemSubscriptionPayload {
  mutation: MutationType!
  node: orderItem
  updatedFields: [String!]
  previousValues: orderItemPreviousValues
}

input orderItemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: orderItemWhereInput
  AND: [orderItemSubscriptionWhereInput!]
  OR: [orderItemSubscriptionWhereInput!]
  NOT: [orderItemSubscriptionWhereInput!]
}

input orderItemUpdateDataInput {
  title: String
  description: String
  price: String
  quantity: Int
  imageUrl: String
  variants: orderItemUpdatevariantsInput
}

input orderItemUpdateInput {
  title: String
  description: String
  price: String
  quantity: Int
  imageUrl: String
  variants: orderItemUpdatevariantsInput
}

input orderItemUpdateManyDataInput {
  title: String
  description: String
  price: String
  quantity: Int
  imageUrl: String
  variants: orderItemUpdatevariantsInput
}

input orderItemUpdateManyInput {
  create: [orderItemCreateInput!]
  update: [orderItemUpdateWithWhereUniqueNestedInput!]
  upsert: [orderItemUpsertWithWhereUniqueNestedInput!]
  delete: [orderItemWhereUniqueInput!]
  connect: [orderItemWhereUniqueInput!]
  set: [orderItemWhereUniqueInput!]
  disconnect: [orderItemWhereUniqueInput!]
  deleteMany: [orderItemScalarWhereInput!]
  updateMany: [orderItemUpdateManyWithWhereNestedInput!]
}

input orderItemUpdateManyMutationInput {
  title: String
  description: String
  price: String
  quantity: Int
  imageUrl: String
  variants: orderItemUpdatevariantsInput
}

input orderItemUpdateManyWithWhereNestedInput {
  where: orderItemScalarWhereInput!
  data: orderItemUpdateManyDataInput!
}

input orderItemUpdatevariantsInput {
  set: [String!]
}

input orderItemUpdateWithWhereUniqueNestedInput {
  where: orderItemWhereUniqueInput!
  data: orderItemUpdateDataInput!
}

input orderItemUpsertWithWhereUniqueNestedInput {
  where: orderItemWhereUniqueInput!
  update: orderItemUpdateDataInput!
  create: orderItemCreateInput!
}

input orderItemWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  price: String
  price_not: String
  price_in: [String!]
  price_not_in: [String!]
  price_lt: String
  price_lte: String
  price_gt: String
  price_gte: String
  price_contains: String
  price_not_contains: String
  price_starts_with: String
  price_not_starts_with: String
  price_ends_with: String
  price_not_ends_with: String
  quantity: Int
  quantity_not: Int
  quantity_in: [Int!]
  quantity_not_in: [Int!]
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  imageUrl: String
  imageUrl_not: String
  imageUrl_in: [String!]
  imageUrl_not_in: [String!]
  imageUrl_lt: String
  imageUrl_lte: String
  imageUrl_gt: String
  imageUrl_gte: String
  imageUrl_contains: String
  imageUrl_not_contains: String
  imageUrl_starts_with: String
  imageUrl_not_starts_with: String
  imageUrl_ends_with: String
  imageUrl_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [orderItemWhereInput!]
  OR: [orderItemWhereInput!]
  NOT: [orderItemWhereInput!]
}

input orderItemWhereUniqueInput {
  id: ID
}

enum OrderOrderByInput {
  id_ASC
  id_DESC
  total_ASC
  total_DESC
  paymentId_ASC
  paymentId_DESC
  PayerID_ASC
  PayerID_DESC
  imageUrl_ASC
  imageUrl_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OrderPreviousValues {
  id: ID!
  total: String!
  paymentId: String!
  PayerID: String!
  imageUrl: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type OrderSubscriptionPayload {
  mutation: MutationType!
  node: Order
  updatedFields: [String!]
  previousValues: OrderPreviousValues
}

input OrderSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrderWhereInput
  AND: [OrderSubscriptionWhereInput!]
  OR: [OrderSubscriptionWhereInput!]
  NOT: [OrderSubscriptionWhereInput!]
}

input OrderUpdateInput {
  items: orderItemUpdateManyInput
  total: String
  user: UserUpdateOneRequiredInput
  paymentId: String
  PayerID: String
  imageUrl: String
}

input OrderUpdateManyMutationInput {
  total: String
  paymentId: String
  PayerID: String
  imageUrl: String
}

input OrderWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  items_every: orderItemWhereInput
  items_some: orderItemWhereInput
  items_none: orderItemWhereInput
  total: String
  total_not: String
  total_in: [String!]
  total_not_in: [String!]
  total_lt: String
  total_lte: String
  total_gt: String
  total_gte: String
  total_contains: String
  total_not_contains: String
  total_starts_with: String
  total_not_starts_with: String
  total_ends_with: String
  total_not_ends_with: String
  user: UserWhereInput
  paymentId: String
  paymentId_not: String
  paymentId_in: [String!]
  paymentId_not_in: [String!]
  paymentId_lt: String
  paymentId_lte: String
  paymentId_gt: String
  paymentId_gte: String
  paymentId_contains: String
  paymentId_not_contains: String
  paymentId_starts_with: String
  paymentId_not_starts_with: String
  paymentId_ends_with: String
  paymentId_not_ends_with: String
  PayerID: String
  PayerID_not: String
  PayerID_in: [String!]
  PayerID_not_in: [String!]
  PayerID_lt: String
  PayerID_lte: String
  PayerID_gt: String
  PayerID_gte: String
  PayerID_contains: String
  PayerID_not_contains: String
  PayerID_starts_with: String
  PayerID_not_starts_with: String
  PayerID_ends_with: String
  PayerID_not_ends_with: String
  imageUrl: String
  imageUrl_not: String
  imageUrl_in: [String!]
  imageUrl_not_in: [String!]
  imageUrl_lt: String
  imageUrl_lte: String
  imageUrl_gt: String
  imageUrl_gte: String
  imageUrl_contains: String
  imageUrl_not_contains: String
  imageUrl_starts_with: String
  imageUrl_not_starts_with: String
  imageUrl_ends_with: String
  imageUrl_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
}

input OrderWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Product {
  id: ID!
  title: String!
  description: String!
  price: String!
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category!]
  brand: Brand
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag!]
  images(where: ProductImageWhereInput, orderBy: ProductImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductImage!]
  shop: Shop!
  variants(where: VariantWhereInput, orderBy: VariantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Variant!]
  reviews(where: ProductReviewWhereInput, orderBy: ProductReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductReview!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProductConnection {
  pageInfo: PageInfo!
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateInput {
  id: ID
  title: String!
  description: String!
  price: String!
  categories: CategoryCreateManyWithoutProductInput
  brand: BrandCreateOneWithoutProductsInput
  tags: TagCreateManyWithoutProductsInput
  images: ProductImageCreateManyWithoutProductInput
  shop: ShopCreateOneWithoutProductsInput!
  variants: VariantCreateManyWithoutProductInput
  reviews: ProductReviewCreateManyWithoutProductInput
}

input ProductCreateManyWithoutBrandInput {
  create: [ProductCreateWithoutBrandInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateManyWithoutCategoriesInput {
  create: [ProductCreateWithoutCategoriesInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateManyWithoutShopInput {
  create: [ProductCreateWithoutShopInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateManyWithoutTagsInput {
  create: [ProductCreateWithoutTagsInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateOneInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

input ProductCreateOneWithoutImagesInput {
  create: ProductCreateWithoutImagesInput
  connect: ProductWhereUniqueInput
}

input ProductCreateOneWithoutReviewsInput {
  create: ProductCreateWithoutReviewsInput
  connect: ProductWhereUniqueInput
}

input ProductCreateOneWithoutVariantsInput {
  create: ProductCreateWithoutVariantsInput
  connect: ProductWhereUniqueInput
}

input ProductCreateWithoutBrandInput {
  id: ID
  title: String!
  description: String!
  price: String!
  categories: CategoryCreateManyWithoutProductInput
  tags: TagCreateManyWithoutProductsInput
  images: ProductImageCreateManyWithoutProductInput
  shop: ShopCreateOneWithoutProductsInput!
  variants: VariantCreateManyWithoutProductInput
  reviews: ProductReviewCreateManyWithoutProductInput
}

input ProductCreateWithoutCategoriesInput {
  id: ID
  title: String!
  description: String!
  price: String!
  brand: BrandCreateOneWithoutProductsInput
  tags: TagCreateManyWithoutProductsInput
  images: ProductImageCreateManyWithoutProductInput
  shop: ShopCreateOneWithoutProductsInput!
  variants: VariantCreateManyWithoutProductInput
  reviews: ProductReviewCreateManyWithoutProductInput
}

input ProductCreateWithoutImagesInput {
  id: ID
  title: String!
  description: String!
  price: String!
  categories: CategoryCreateManyWithoutProductInput
  brand: BrandCreateOneWithoutProductsInput
  tags: TagCreateManyWithoutProductsInput
  shop: ShopCreateOneWithoutProductsInput!
  variants: VariantCreateManyWithoutProductInput
  reviews: ProductReviewCreateManyWithoutProductInput
}

input ProductCreateWithoutReviewsInput {
  id: ID
  title: String!
  description: String!
  price: String!
  categories: CategoryCreateManyWithoutProductInput
  brand: BrandCreateOneWithoutProductsInput
  tags: TagCreateManyWithoutProductsInput
  images: ProductImageCreateManyWithoutProductInput
  shop: ShopCreateOneWithoutProductsInput!
  variants: VariantCreateManyWithoutProductInput
}

input ProductCreateWithoutShopInput {
  id: ID
  title: String!
  description: String!
  price: String!
  categories: CategoryCreateManyWithoutProductInput
  brand: BrandCreateOneWithoutProductsInput
  tags: TagCreateManyWithoutProductsInput
  images: ProductImageCreateManyWithoutProductInput
  variants: VariantCreateManyWithoutProductInput
  reviews: ProductReviewCreateManyWithoutProductInput
}

input ProductCreateWithoutTagsInput {
  id: ID
  title: String!
  description: String!
  price: String!
  categories: CategoryCreateManyWithoutProductInput
  brand: BrandCreateOneWithoutProductsInput
  images: ProductImageCreateManyWithoutProductInput
  shop: ShopCreateOneWithoutProductsInput!
  variants: VariantCreateManyWithoutProductInput
  reviews: ProductReviewCreateManyWithoutProductInput
}

input ProductCreateWithoutVariantsInput {
  id: ID
  title: String!
  description: String!
  price: String!
  categories: CategoryCreateManyWithoutProductInput
  brand: BrandCreateOneWithoutProductsInput
  tags: TagCreateManyWithoutProductsInput
  images: ProductImageCreateManyWithoutProductInput
  shop: ShopCreateOneWithoutProductsInput!
  reviews: ProductReviewCreateManyWithoutProductInput
}

type ProductEdge {
  node: Product!
  cursor: String!
}

type ProductImage {
  id: ID!
  imageUrl: String!
  largeImageUrl: String
  product: Product
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProductImageConnection {
  pageInfo: PageInfo!
  edges: [ProductImageEdge]!
  aggregate: AggregateProductImage!
}

input ProductImageCreateInput {
  id: ID
  imageUrl: String!
  largeImageUrl: String
  product: ProductCreateOneWithoutImagesInput
}

input ProductImageCreateManyWithoutProductInput {
  create: [ProductImageCreateWithoutProductInput!]
  connect: [ProductImageWhereUniqueInput!]
}

input ProductImageCreateWithoutProductInput {
  id: ID
  imageUrl: String!
  largeImageUrl: String
}

type ProductImageEdge {
  node: ProductImage!
  cursor: String!
}

enum ProductImageOrderByInput {
  id_ASC
  id_DESC
  imageUrl_ASC
  imageUrl_DESC
  largeImageUrl_ASC
  largeImageUrl_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProductImagePreviousValues {
  id: ID!
  imageUrl: String!
  largeImageUrl: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ProductImageScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  imageUrl: String
  imageUrl_not: String
  imageUrl_in: [String!]
  imageUrl_not_in: [String!]
  imageUrl_lt: String
  imageUrl_lte: String
  imageUrl_gt: String
  imageUrl_gte: String
  imageUrl_contains: String
  imageUrl_not_contains: String
  imageUrl_starts_with: String
  imageUrl_not_starts_with: String
  imageUrl_ends_with: String
  imageUrl_not_ends_with: String
  largeImageUrl: String
  largeImageUrl_not: String
  largeImageUrl_in: [String!]
  largeImageUrl_not_in: [String!]
  largeImageUrl_lt: String
  largeImageUrl_lte: String
  largeImageUrl_gt: String
  largeImageUrl_gte: String
  largeImageUrl_contains: String
  largeImageUrl_not_contains: String
  largeImageUrl_starts_with: String
  largeImageUrl_not_starts_with: String
  largeImageUrl_ends_with: String
  largeImageUrl_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ProductImageScalarWhereInput!]
  OR: [ProductImageScalarWhereInput!]
  NOT: [ProductImageScalarWhereInput!]
}

type ProductImageSubscriptionPayload {
  mutation: MutationType!
  node: ProductImage
  updatedFields: [String!]
  previousValues: ProductImagePreviousValues
}

input ProductImageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductImageWhereInput
  AND: [ProductImageSubscriptionWhereInput!]
  OR: [ProductImageSubscriptionWhereInput!]
  NOT: [ProductImageSubscriptionWhereInput!]
}

input ProductImageUpdateInput {
  imageUrl: String
  largeImageUrl: String
  product: ProductUpdateOneWithoutImagesInput
}

input ProductImageUpdateManyDataInput {
  imageUrl: String
  largeImageUrl: String
}

input ProductImageUpdateManyMutationInput {
  imageUrl: String
  largeImageUrl: String
}

input ProductImageUpdateManyWithoutProductInput {
  create: [ProductImageCreateWithoutProductInput!]
  delete: [ProductImageWhereUniqueInput!]
  connect: [ProductImageWhereUniqueInput!]
  set: [ProductImageWhereUniqueInput!]
  disconnect: [ProductImageWhereUniqueInput!]
  update: [ProductImageUpdateWithWhereUniqueWithoutProductInput!]
  upsert: [ProductImageUpsertWithWhereUniqueWithoutProductInput!]
  deleteMany: [ProductImageScalarWhereInput!]
  updateMany: [ProductImageUpdateManyWithWhereNestedInput!]
}

input ProductImageUpdateManyWithWhereNestedInput {
  where: ProductImageScalarWhereInput!
  data: ProductImageUpdateManyDataInput!
}

input ProductImageUpdateWithoutProductDataInput {
  imageUrl: String
  largeImageUrl: String
}

input ProductImageUpdateWithWhereUniqueWithoutProductInput {
  where: ProductImageWhereUniqueInput!
  data: ProductImageUpdateWithoutProductDataInput!
}

input ProductImageUpsertWithWhereUniqueWithoutProductInput {
  where: ProductImageWhereUniqueInput!
  update: ProductImageUpdateWithoutProductDataInput!
  create: ProductImageCreateWithoutProductInput!
}

input ProductImageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  imageUrl: String
  imageUrl_not: String
  imageUrl_in: [String!]
  imageUrl_not_in: [String!]
  imageUrl_lt: String
  imageUrl_lte: String
  imageUrl_gt: String
  imageUrl_gte: String
  imageUrl_contains: String
  imageUrl_not_contains: String
  imageUrl_starts_with: String
  imageUrl_not_starts_with: String
  imageUrl_ends_with: String
  imageUrl_not_ends_with: String
  largeImageUrl: String
  largeImageUrl_not: String
  largeImageUrl_in: [String!]
  largeImageUrl_not_in: [String!]
  largeImageUrl_lt: String
  largeImageUrl_lte: String
  largeImageUrl_gt: String
  largeImageUrl_gte: String
  largeImageUrl_contains: String
  largeImageUrl_not_contains: String
  largeImageUrl_starts_with: String
  largeImageUrl_not_starts_with: String
  largeImageUrl_ends_with: String
  largeImageUrl_not_ends_with: String
  product: ProductWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ProductImageWhereInput!]
  OR: [ProductImageWhereInput!]
  NOT: [ProductImageWhereInput!]
}

input ProductImageWhereUniqueInput {
  id: ID
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  price_ASC
  price_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProductPreviousValues {
  id: ID!
  title: String!
  description: String!
  price: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProductReview {
  id: ID!
  user: User!
  product: Product!
  rating: Int!
  review: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProductReviewConnection {
  pageInfo: PageInfo!
  edges: [ProductReviewEdge]!
  aggregate: AggregateProductReview!
}

input ProductReviewCreateInput {
  id: ID
  user: UserCreateOneWithoutProductReviewsInput!
  product: ProductCreateOneWithoutReviewsInput!
  rating: Int!
  review: String
}

input ProductReviewCreateManyWithoutProductInput {
  create: [ProductReviewCreateWithoutProductInput!]
  connect: [ProductReviewWhereUniqueInput!]
}

input ProductReviewCreateManyWithoutUserInput {
  create: [ProductReviewCreateWithoutUserInput!]
  connect: [ProductReviewWhereUniqueInput!]
}

input ProductReviewCreateWithoutProductInput {
  id: ID
  user: UserCreateOneWithoutProductReviewsInput!
  rating: Int!
  review: String
}

input ProductReviewCreateWithoutUserInput {
  id: ID
  product: ProductCreateOneWithoutReviewsInput!
  rating: Int!
  review: String
}

type ProductReviewEdge {
  node: ProductReview!
  cursor: String!
}

enum ProductReviewOrderByInput {
  id_ASC
  id_DESC
  rating_ASC
  rating_DESC
  review_ASC
  review_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProductReviewPreviousValues {
  id: ID!
  rating: Int!
  review: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ProductReviewScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  rating: Int
  rating_not: Int
  rating_in: [Int!]
  rating_not_in: [Int!]
  rating_lt: Int
  rating_lte: Int
  rating_gt: Int
  rating_gte: Int
  review: String
  review_not: String
  review_in: [String!]
  review_not_in: [String!]
  review_lt: String
  review_lte: String
  review_gt: String
  review_gte: String
  review_contains: String
  review_not_contains: String
  review_starts_with: String
  review_not_starts_with: String
  review_ends_with: String
  review_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ProductReviewScalarWhereInput!]
  OR: [ProductReviewScalarWhereInput!]
  NOT: [ProductReviewScalarWhereInput!]
}

type ProductReviewSubscriptionPayload {
  mutation: MutationType!
  node: ProductReview
  updatedFields: [String!]
  previousValues: ProductReviewPreviousValues
}

input ProductReviewSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductReviewWhereInput
  AND: [ProductReviewSubscriptionWhereInput!]
  OR: [ProductReviewSubscriptionWhereInput!]
  NOT: [ProductReviewSubscriptionWhereInput!]
}

input ProductReviewUpdateInput {
  user: UserUpdateOneRequiredWithoutProductReviewsInput
  product: ProductUpdateOneRequiredWithoutReviewsInput
  rating: Int
  review: String
}

input ProductReviewUpdateManyDataInput {
  rating: Int
  review: String
}

input ProductReviewUpdateManyMutationInput {
  rating: Int
  review: String
}

input ProductReviewUpdateManyWithoutProductInput {
  create: [ProductReviewCreateWithoutProductInput!]
  delete: [ProductReviewWhereUniqueInput!]
  connect: [ProductReviewWhereUniqueInput!]
  set: [ProductReviewWhereUniqueInput!]
  disconnect: [ProductReviewWhereUniqueInput!]
  update: [ProductReviewUpdateWithWhereUniqueWithoutProductInput!]
  upsert: [ProductReviewUpsertWithWhereUniqueWithoutProductInput!]
  deleteMany: [ProductReviewScalarWhereInput!]
  updateMany: [ProductReviewUpdateManyWithWhereNestedInput!]
}

input ProductReviewUpdateManyWithoutUserInput {
  create: [ProductReviewCreateWithoutUserInput!]
  delete: [ProductReviewWhereUniqueInput!]
  connect: [ProductReviewWhereUniqueInput!]
  set: [ProductReviewWhereUniqueInput!]
  disconnect: [ProductReviewWhereUniqueInput!]
  update: [ProductReviewUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [ProductReviewUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [ProductReviewScalarWhereInput!]
  updateMany: [ProductReviewUpdateManyWithWhereNestedInput!]
}

input ProductReviewUpdateManyWithWhereNestedInput {
  where: ProductReviewScalarWhereInput!
  data: ProductReviewUpdateManyDataInput!
}

input ProductReviewUpdateWithoutProductDataInput {
  user: UserUpdateOneRequiredWithoutProductReviewsInput
  rating: Int
  review: String
}

input ProductReviewUpdateWithoutUserDataInput {
  product: ProductUpdateOneRequiredWithoutReviewsInput
  rating: Int
  review: String
}

input ProductReviewUpdateWithWhereUniqueWithoutProductInput {
  where: ProductReviewWhereUniqueInput!
  data: ProductReviewUpdateWithoutProductDataInput!
}

input ProductReviewUpdateWithWhereUniqueWithoutUserInput {
  where: ProductReviewWhereUniqueInput!
  data: ProductReviewUpdateWithoutUserDataInput!
}

input ProductReviewUpsertWithWhereUniqueWithoutProductInput {
  where: ProductReviewWhereUniqueInput!
  update: ProductReviewUpdateWithoutProductDataInput!
  create: ProductReviewCreateWithoutProductInput!
}

input ProductReviewUpsertWithWhereUniqueWithoutUserInput {
  where: ProductReviewWhereUniqueInput!
  update: ProductReviewUpdateWithoutUserDataInput!
  create: ProductReviewCreateWithoutUserInput!
}

input ProductReviewWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  product: ProductWhereInput
  rating: Int
  rating_not: Int
  rating_in: [Int!]
  rating_not_in: [Int!]
  rating_lt: Int
  rating_lte: Int
  rating_gt: Int
  rating_gte: Int
  review: String
  review_not: String
  review_in: [String!]
  review_not_in: [String!]
  review_lt: String
  review_lte: String
  review_gt: String
  review_gte: String
  review_contains: String
  review_not_contains: String
  review_starts_with: String
  review_not_starts_with: String
  review_ends_with: String
  review_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ProductReviewWhereInput!]
  OR: [ProductReviewWhereInput!]
  NOT: [ProductReviewWhereInput!]
}

input ProductReviewWhereUniqueInput {
  id: ID
}

input ProductScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  price: String
  price_not: String
  price_in: [String!]
  price_not_in: [String!]
  price_lt: String
  price_lte: String
  price_gt: String
  price_gte: String
  price_contains: String
  price_not_contains: String
  price_starts_with: String
  price_not_starts_with: String
  price_ends_with: String
  price_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ProductScalarWhereInput!]
  OR: [ProductScalarWhereInput!]
  NOT: [ProductScalarWhereInput!]
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
  AND: [ProductSubscriptionWhereInput!]
  OR: [ProductSubscriptionWhereInput!]
  NOT: [ProductSubscriptionWhereInput!]
}

input ProductUpdateDataInput {
  title: String
  description: String
  price: String
  categories: CategoryUpdateManyWithoutProductInput
  brand: BrandUpdateOneWithoutProductsInput
  tags: TagUpdateManyWithoutProductsInput
  images: ProductImageUpdateManyWithoutProductInput
  shop: ShopUpdateOneRequiredWithoutProductsInput
  variants: VariantUpdateManyWithoutProductInput
  reviews: ProductReviewUpdateManyWithoutProductInput
}

input ProductUpdateInput {
  title: String
  description: String
  price: String
  categories: CategoryUpdateManyWithoutProductInput
  brand: BrandUpdateOneWithoutProductsInput
  tags: TagUpdateManyWithoutProductsInput
  images: ProductImageUpdateManyWithoutProductInput
  shop: ShopUpdateOneRequiredWithoutProductsInput
  variants: VariantUpdateManyWithoutProductInput
  reviews: ProductReviewUpdateManyWithoutProductInput
}

input ProductUpdateManyDataInput {
  title: String
  description: String
  price: String
}

input ProductUpdateManyMutationInput {
  title: String
  description: String
  price: String
}

input ProductUpdateManyWithoutBrandInput {
  create: [ProductCreateWithoutBrandInput!]
  delete: [ProductWhereUniqueInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutBrandInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutBrandInput!]
  deleteMany: [ProductScalarWhereInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
}

input ProductUpdateManyWithoutCategoriesInput {
  create: [ProductCreateWithoutCategoriesInput!]
  delete: [ProductWhereUniqueInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutCategoriesInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutCategoriesInput!]
  deleteMany: [ProductScalarWhereInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
}

input ProductUpdateManyWithoutShopInput {
  create: [ProductCreateWithoutShopInput!]
  delete: [ProductWhereUniqueInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutShopInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutShopInput!]
  deleteMany: [ProductScalarWhereInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
}

input ProductUpdateManyWithoutTagsInput {
  create: [ProductCreateWithoutTagsInput!]
  delete: [ProductWhereUniqueInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutTagsInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutTagsInput!]
  deleteMany: [ProductScalarWhereInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
}

input ProductUpdateManyWithWhereNestedInput {
  where: ProductScalarWhereInput!
  data: ProductUpdateManyDataInput!
}

input ProductUpdateOneRequiredInput {
  create: ProductCreateInput
  update: ProductUpdateDataInput
  upsert: ProductUpsertNestedInput
  connect: ProductWhereUniqueInput
}

input ProductUpdateOneRequiredWithoutReviewsInput {
  create: ProductCreateWithoutReviewsInput
  update: ProductUpdateWithoutReviewsDataInput
  upsert: ProductUpsertWithoutReviewsInput
  connect: ProductWhereUniqueInput
}

input ProductUpdateOneRequiredWithoutVariantsInput {
  create: ProductCreateWithoutVariantsInput
  update: ProductUpdateWithoutVariantsDataInput
  upsert: ProductUpsertWithoutVariantsInput
  connect: ProductWhereUniqueInput
}

input ProductUpdateOneWithoutImagesInput {
  create: ProductCreateWithoutImagesInput
  update: ProductUpdateWithoutImagesDataInput
  upsert: ProductUpsertWithoutImagesInput
  delete: Boolean
  disconnect: Boolean
  connect: ProductWhereUniqueInput
}

input ProductUpdateWithoutBrandDataInput {
  title: String
  description: String
  price: String
  categories: CategoryUpdateManyWithoutProductInput
  tags: TagUpdateManyWithoutProductsInput
  images: ProductImageUpdateManyWithoutProductInput
  shop: ShopUpdateOneRequiredWithoutProductsInput
  variants: VariantUpdateManyWithoutProductInput
  reviews: ProductReviewUpdateManyWithoutProductInput
}

input ProductUpdateWithoutCategoriesDataInput {
  title: String
  description: String
  price: String
  brand: BrandUpdateOneWithoutProductsInput
  tags: TagUpdateManyWithoutProductsInput
  images: ProductImageUpdateManyWithoutProductInput
  shop: ShopUpdateOneRequiredWithoutProductsInput
  variants: VariantUpdateManyWithoutProductInput
  reviews: ProductReviewUpdateManyWithoutProductInput
}

input ProductUpdateWithoutImagesDataInput {
  title: String
  description: String
  price: String
  categories: CategoryUpdateManyWithoutProductInput
  brand: BrandUpdateOneWithoutProductsInput
  tags: TagUpdateManyWithoutProductsInput
  shop: ShopUpdateOneRequiredWithoutProductsInput
  variants: VariantUpdateManyWithoutProductInput
  reviews: ProductReviewUpdateManyWithoutProductInput
}

input ProductUpdateWithoutReviewsDataInput {
  title: String
  description: String
  price: String
  categories: CategoryUpdateManyWithoutProductInput
  brand: BrandUpdateOneWithoutProductsInput
  tags: TagUpdateManyWithoutProductsInput
  images: ProductImageUpdateManyWithoutProductInput
  shop: ShopUpdateOneRequiredWithoutProductsInput
  variants: VariantUpdateManyWithoutProductInput
}

input ProductUpdateWithoutShopDataInput {
  title: String
  description: String
  price: String
  categories: CategoryUpdateManyWithoutProductInput
  brand: BrandUpdateOneWithoutProductsInput
  tags: TagUpdateManyWithoutProductsInput
  images: ProductImageUpdateManyWithoutProductInput
  variants: VariantUpdateManyWithoutProductInput
  reviews: ProductReviewUpdateManyWithoutProductInput
}

input ProductUpdateWithoutTagsDataInput {
  title: String
  description: String
  price: String
  categories: CategoryUpdateManyWithoutProductInput
  brand: BrandUpdateOneWithoutProductsInput
  images: ProductImageUpdateManyWithoutProductInput
  shop: ShopUpdateOneRequiredWithoutProductsInput
  variants: VariantUpdateManyWithoutProductInput
  reviews: ProductReviewUpdateManyWithoutProductInput
}

input ProductUpdateWithoutVariantsDataInput {
  title: String
  description: String
  price: String
  categories: CategoryUpdateManyWithoutProductInput
  brand: BrandUpdateOneWithoutProductsInput
  tags: TagUpdateManyWithoutProductsInput
  images: ProductImageUpdateManyWithoutProductInput
  shop: ShopUpdateOneRequiredWithoutProductsInput
  reviews: ProductReviewUpdateManyWithoutProductInput
}

input ProductUpdateWithWhereUniqueWithoutBrandInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutBrandDataInput!
}

input ProductUpdateWithWhereUniqueWithoutCategoriesInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutCategoriesDataInput!
}

input ProductUpdateWithWhereUniqueWithoutShopInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutShopDataInput!
}

input ProductUpdateWithWhereUniqueWithoutTagsInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutTagsDataInput!
}

input ProductUpsertNestedInput {
  update: ProductUpdateDataInput!
  create: ProductCreateInput!
}

input ProductUpsertWithoutImagesInput {
  update: ProductUpdateWithoutImagesDataInput!
  create: ProductCreateWithoutImagesInput!
}

input ProductUpsertWithoutReviewsInput {
  update: ProductUpdateWithoutReviewsDataInput!
  create: ProductCreateWithoutReviewsInput!
}

input ProductUpsertWithoutVariantsInput {
  update: ProductUpdateWithoutVariantsDataInput!
  create: ProductCreateWithoutVariantsInput!
}

input ProductUpsertWithWhereUniqueWithoutBrandInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutBrandDataInput!
  create: ProductCreateWithoutBrandInput!
}

input ProductUpsertWithWhereUniqueWithoutCategoriesInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutCategoriesDataInput!
  create: ProductCreateWithoutCategoriesInput!
}

input ProductUpsertWithWhereUniqueWithoutShopInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutShopDataInput!
  create: ProductCreateWithoutShopInput!
}

input ProductUpsertWithWhereUniqueWithoutTagsInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutTagsDataInput!
  create: ProductCreateWithoutTagsInput!
}

input ProductWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  price: String
  price_not: String
  price_in: [String!]
  price_not_in: [String!]
  price_lt: String
  price_lte: String
  price_gt: String
  price_gte: String
  price_contains: String
  price_not_contains: String
  price_starts_with: String
  price_not_starts_with: String
  price_ends_with: String
  price_not_ends_with: String
  categories_every: CategoryWhereInput
  categories_some: CategoryWhereInput
  categories_none: CategoryWhereInput
  brand: BrandWhereInput
  tags_every: TagWhereInput
  tags_some: TagWhereInput
  tags_none: TagWhereInput
  images_every: ProductImageWhereInput
  images_some: ProductImageWhereInput
  images_none: ProductImageWhereInput
  shop: ShopWhereInput
  variants_every: VariantWhereInput
  variants_some: VariantWhereInput
  variants_none: VariantWhereInput
  reviews_every: ProductReviewWhereInput
  reviews_some: ProductReviewWhereInput
  reviews_none: ProductReviewWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
}

input ProductWhereUniqueInput {
  id: ID
}

type Query {
  brand(where: BrandWhereUniqueInput!): Brand
  brands(where: BrandWhereInput, orderBy: BrandOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Brand]!
  brandsConnection(where: BrandWhereInput, orderBy: BrandOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BrandConnection!
  cart(where: CartWhereUniqueInput!): Cart
  carts(where: CartWhereInput, orderBy: CartOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Cart]!
  cartsConnection(where: CartWhereInput, orderBy: CartOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CartConnection!
  cartItem(where: CartItemWhereUniqueInput!): CartItem
  cartItems(where: CartItemWhereInput, orderBy: CartItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CartItem]!
  cartItemsConnection(where: CartItemWhereInput, orderBy: CartItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CartItemConnection!
  category(where: CategoryWhereUniqueInput!): Category
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category]!
  categoriesConnection(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CategoryConnection!
  forum(where: ForumWhereUniqueInput!): Forum
  forums(where: ForumWhereInput, orderBy: ForumOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Forum]!
  forumsConnection(where: ForumWhereInput, orderBy: ForumOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ForumConnection!
  forumPost(where: ForumPostWhereUniqueInput!): ForumPost
  forumPosts(where: ForumPostWhereInput, orderBy: ForumPostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ForumPost]!
  forumPostsConnection(where: ForumPostWhereInput, orderBy: ForumPostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ForumPostConnection!
  forumPostComment(where: ForumPostCommentWhereUniqueInput!): ForumPostComment
  forumPostComments(where: ForumPostCommentWhereInput, orderBy: ForumPostCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ForumPostComment]!
  forumPostCommentsConnection(where: ForumPostCommentWhereInput, orderBy: ForumPostCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ForumPostCommentConnection!
  order(where: OrderWhereUniqueInput!): Order
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order]!
  ordersConnection(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderConnection!
  product(where: ProductWhereUniqueInput!): Product
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  productImage(where: ProductImageWhereUniqueInput!): ProductImage
  productImages(where: ProductImageWhereInput, orderBy: ProductImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductImage]!
  productImagesConnection(where: ProductImageWhereInput, orderBy: ProductImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductImageConnection!
  productReview(where: ProductReviewWhereUniqueInput!): ProductReview
  productReviews(where: ProductReviewWhereInput, orderBy: ProductReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductReview]!
  productReviewsConnection(where: ProductReviewWhereInput, orderBy: ProductReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductReviewConnection!
  shop(where: ShopWhereUniqueInput!): Shop
  shops(where: ShopWhereInput, orderBy: ShopOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Shop]!
  shopsConnection(where: ShopWhereInput, orderBy: ShopOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ShopConnection!
  shopImage(where: ShopImageWhereUniqueInput!): ShopImage
  shopImages(where: ShopImageWhereInput, orderBy: ShopImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ShopImage]!
  shopImagesConnection(where: ShopImageWhereInput, orderBy: ShopImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ShopImageConnection!
  tag(where: TagWhereUniqueInput!): Tag
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag]!
  tagsConnection(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TagConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  userImage(where: UserImageWhereUniqueInput!): UserImage
  userImages(where: UserImageWhereInput, orderBy: UserImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserImage]!
  userImagesConnection(where: UserImageWhereInput, orderBy: UserImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserImageConnection!
  variant(where: VariantWhereUniqueInput!): Variant
  variants(where: VariantWhereInput, orderBy: VariantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Variant]!
  variantsConnection(where: VariantWhereInput, orderBy: VariantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VariantConnection!
  orderItem(where: orderItemWhereUniqueInput!): orderItem
  orderItems(where: orderItemWhereInput, orderBy: orderItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [orderItem]!
  orderItemsConnection(where: orderItemWhereInput, orderBy: orderItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): orderItemConnection!
  node(id: ID!): Node
}

type Shop {
  id: ID!
  name: String!
  description: String!
  category: String!
  live: Boolean!
  owners(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  createdAt: DateTime!
  updatedAt: DateTime!
  images(where: ShopImageWhereInput, orderBy: ShopImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ShopImage!]
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
}

type ShopConnection {
  pageInfo: PageInfo!
  edges: [ShopEdge]!
  aggregate: AggregateShop!
}

input ShopCreateInput {
  id: ID
  name: String!
  description: String!
  category: String!
  live: Boolean
  owners: UserCreateManyWithoutShopsInput
  images: ShopImageCreateManyWithoutShopInput
  products: ProductCreateManyWithoutShopInput
}

input ShopCreateManyWithoutOwnersInput {
  create: [ShopCreateWithoutOwnersInput!]
  connect: [ShopWhereUniqueInput!]
}

input ShopCreateOneWithoutImagesInput {
  create: ShopCreateWithoutImagesInput
  connect: ShopWhereUniqueInput
}

input ShopCreateOneWithoutProductsInput {
  create: ShopCreateWithoutProductsInput
  connect: ShopWhereUniqueInput
}

input ShopCreateWithoutImagesInput {
  id: ID
  name: String!
  description: String!
  category: String!
  live: Boolean
  owners: UserCreateManyWithoutShopsInput
  products: ProductCreateManyWithoutShopInput
}

input ShopCreateWithoutOwnersInput {
  id: ID
  name: String!
  description: String!
  category: String!
  live: Boolean
  images: ShopImageCreateManyWithoutShopInput
  products: ProductCreateManyWithoutShopInput
}

input ShopCreateWithoutProductsInput {
  id: ID
  name: String!
  description: String!
  category: String!
  live: Boolean
  owners: UserCreateManyWithoutShopsInput
  images: ShopImageCreateManyWithoutShopInput
}

type ShopEdge {
  node: Shop!
  cursor: String!
}

type ShopImage {
  id: ID!
  imageUrl: String!
  largeImageUrl: String
  shop: Shop
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ShopImageConnection {
  pageInfo: PageInfo!
  edges: [ShopImageEdge]!
  aggregate: AggregateShopImage!
}

input ShopImageCreateInput {
  id: ID
  imageUrl: String!
  largeImageUrl: String
  shop: ShopCreateOneWithoutImagesInput
}

input ShopImageCreateManyWithoutShopInput {
  create: [ShopImageCreateWithoutShopInput!]
  connect: [ShopImageWhereUniqueInput!]
}

input ShopImageCreateWithoutShopInput {
  id: ID
  imageUrl: String!
  largeImageUrl: String
}

type ShopImageEdge {
  node: ShopImage!
  cursor: String!
}

enum ShopImageOrderByInput {
  id_ASC
  id_DESC
  imageUrl_ASC
  imageUrl_DESC
  largeImageUrl_ASC
  largeImageUrl_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ShopImagePreviousValues {
  id: ID!
  imageUrl: String!
  largeImageUrl: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ShopImageScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  imageUrl: String
  imageUrl_not: String
  imageUrl_in: [String!]
  imageUrl_not_in: [String!]
  imageUrl_lt: String
  imageUrl_lte: String
  imageUrl_gt: String
  imageUrl_gte: String
  imageUrl_contains: String
  imageUrl_not_contains: String
  imageUrl_starts_with: String
  imageUrl_not_starts_with: String
  imageUrl_ends_with: String
  imageUrl_not_ends_with: String
  largeImageUrl: String
  largeImageUrl_not: String
  largeImageUrl_in: [String!]
  largeImageUrl_not_in: [String!]
  largeImageUrl_lt: String
  largeImageUrl_lte: String
  largeImageUrl_gt: String
  largeImageUrl_gte: String
  largeImageUrl_contains: String
  largeImageUrl_not_contains: String
  largeImageUrl_starts_with: String
  largeImageUrl_not_starts_with: String
  largeImageUrl_ends_with: String
  largeImageUrl_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ShopImageScalarWhereInput!]
  OR: [ShopImageScalarWhereInput!]
  NOT: [ShopImageScalarWhereInput!]
}

type ShopImageSubscriptionPayload {
  mutation: MutationType!
  node: ShopImage
  updatedFields: [String!]
  previousValues: ShopImagePreviousValues
}

input ShopImageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ShopImageWhereInput
  AND: [ShopImageSubscriptionWhereInput!]
  OR: [ShopImageSubscriptionWhereInput!]
  NOT: [ShopImageSubscriptionWhereInput!]
}

input ShopImageUpdateInput {
  imageUrl: String
  largeImageUrl: String
  shop: ShopUpdateOneWithoutImagesInput
}

input ShopImageUpdateManyDataInput {
  imageUrl: String
  largeImageUrl: String
}

input ShopImageUpdateManyMutationInput {
  imageUrl: String
  largeImageUrl: String
}

input ShopImageUpdateManyWithoutShopInput {
  create: [ShopImageCreateWithoutShopInput!]
  delete: [ShopImageWhereUniqueInput!]
  connect: [ShopImageWhereUniqueInput!]
  set: [ShopImageWhereUniqueInput!]
  disconnect: [ShopImageWhereUniqueInput!]
  update: [ShopImageUpdateWithWhereUniqueWithoutShopInput!]
  upsert: [ShopImageUpsertWithWhereUniqueWithoutShopInput!]
  deleteMany: [ShopImageScalarWhereInput!]
  updateMany: [ShopImageUpdateManyWithWhereNestedInput!]
}

input ShopImageUpdateManyWithWhereNestedInput {
  where: ShopImageScalarWhereInput!
  data: ShopImageUpdateManyDataInput!
}

input ShopImageUpdateWithoutShopDataInput {
  imageUrl: String
  largeImageUrl: String
}

input ShopImageUpdateWithWhereUniqueWithoutShopInput {
  where: ShopImageWhereUniqueInput!
  data: ShopImageUpdateWithoutShopDataInput!
}

input ShopImageUpsertWithWhereUniqueWithoutShopInput {
  where: ShopImageWhereUniqueInput!
  update: ShopImageUpdateWithoutShopDataInput!
  create: ShopImageCreateWithoutShopInput!
}

input ShopImageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  imageUrl: String
  imageUrl_not: String
  imageUrl_in: [String!]
  imageUrl_not_in: [String!]
  imageUrl_lt: String
  imageUrl_lte: String
  imageUrl_gt: String
  imageUrl_gte: String
  imageUrl_contains: String
  imageUrl_not_contains: String
  imageUrl_starts_with: String
  imageUrl_not_starts_with: String
  imageUrl_ends_with: String
  imageUrl_not_ends_with: String
  largeImageUrl: String
  largeImageUrl_not: String
  largeImageUrl_in: [String!]
  largeImageUrl_not_in: [String!]
  largeImageUrl_lt: String
  largeImageUrl_lte: String
  largeImageUrl_gt: String
  largeImageUrl_gte: String
  largeImageUrl_contains: String
  largeImageUrl_not_contains: String
  largeImageUrl_starts_with: String
  largeImageUrl_not_starts_with: String
  largeImageUrl_ends_with: String
  largeImageUrl_not_ends_with: String
  shop: ShopWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ShopImageWhereInput!]
  OR: [ShopImageWhereInput!]
  NOT: [ShopImageWhereInput!]
}

input ShopImageWhereUniqueInput {
  id: ID
}

enum ShopOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  category_ASC
  category_DESC
  live_ASC
  live_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ShopPreviousValues {
  id: ID!
  name: String!
  description: String!
  category: String!
  live: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ShopScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  category: String
  category_not: String
  category_in: [String!]
  category_not_in: [String!]
  category_lt: String
  category_lte: String
  category_gt: String
  category_gte: String
  category_contains: String
  category_not_contains: String
  category_starts_with: String
  category_not_starts_with: String
  category_ends_with: String
  category_not_ends_with: String
  live: Boolean
  live_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ShopScalarWhereInput!]
  OR: [ShopScalarWhereInput!]
  NOT: [ShopScalarWhereInput!]
}

type ShopSubscriptionPayload {
  mutation: MutationType!
  node: Shop
  updatedFields: [String!]
  previousValues: ShopPreviousValues
}

input ShopSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ShopWhereInput
  AND: [ShopSubscriptionWhereInput!]
  OR: [ShopSubscriptionWhereInput!]
  NOT: [ShopSubscriptionWhereInput!]
}

input ShopUpdateInput {
  name: String
  description: String
  category: String
  live: Boolean
  owners: UserUpdateManyWithoutShopsInput
  images: ShopImageUpdateManyWithoutShopInput
  products: ProductUpdateManyWithoutShopInput
}

input ShopUpdateManyDataInput {
  name: String
  description: String
  category: String
  live: Boolean
}

input ShopUpdateManyMutationInput {
  name: String
  description: String
  category: String
  live: Boolean
}

input ShopUpdateManyWithoutOwnersInput {
  create: [ShopCreateWithoutOwnersInput!]
  delete: [ShopWhereUniqueInput!]
  connect: [ShopWhereUniqueInput!]
  set: [ShopWhereUniqueInput!]
  disconnect: [ShopWhereUniqueInput!]
  update: [ShopUpdateWithWhereUniqueWithoutOwnersInput!]
  upsert: [ShopUpsertWithWhereUniqueWithoutOwnersInput!]
  deleteMany: [ShopScalarWhereInput!]
  updateMany: [ShopUpdateManyWithWhereNestedInput!]
}

input ShopUpdateManyWithWhereNestedInput {
  where: ShopScalarWhereInput!
  data: ShopUpdateManyDataInput!
}

input ShopUpdateOneRequiredWithoutProductsInput {
  create: ShopCreateWithoutProductsInput
  update: ShopUpdateWithoutProductsDataInput
  upsert: ShopUpsertWithoutProductsInput
  connect: ShopWhereUniqueInput
}

input ShopUpdateOneWithoutImagesInput {
  create: ShopCreateWithoutImagesInput
  update: ShopUpdateWithoutImagesDataInput
  upsert: ShopUpsertWithoutImagesInput
  delete: Boolean
  disconnect: Boolean
  connect: ShopWhereUniqueInput
}

input ShopUpdateWithoutImagesDataInput {
  name: String
  description: String
  category: String
  live: Boolean
  owners: UserUpdateManyWithoutShopsInput
  products: ProductUpdateManyWithoutShopInput
}

input ShopUpdateWithoutOwnersDataInput {
  name: String
  description: String
  category: String
  live: Boolean
  images: ShopImageUpdateManyWithoutShopInput
  products: ProductUpdateManyWithoutShopInput
}

input ShopUpdateWithoutProductsDataInput {
  name: String
  description: String
  category: String
  live: Boolean
  owners: UserUpdateManyWithoutShopsInput
  images: ShopImageUpdateManyWithoutShopInput
}

input ShopUpdateWithWhereUniqueWithoutOwnersInput {
  where: ShopWhereUniqueInput!
  data: ShopUpdateWithoutOwnersDataInput!
}

input ShopUpsertWithoutImagesInput {
  update: ShopUpdateWithoutImagesDataInput!
  create: ShopCreateWithoutImagesInput!
}

input ShopUpsertWithoutProductsInput {
  update: ShopUpdateWithoutProductsDataInput!
  create: ShopCreateWithoutProductsInput!
}

input ShopUpsertWithWhereUniqueWithoutOwnersInput {
  where: ShopWhereUniqueInput!
  update: ShopUpdateWithoutOwnersDataInput!
  create: ShopCreateWithoutOwnersInput!
}

input ShopWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  category: String
  category_not: String
  category_in: [String!]
  category_not_in: [String!]
  category_lt: String
  category_lte: String
  category_gt: String
  category_gte: String
  category_contains: String
  category_not_contains: String
  category_starts_with: String
  category_not_starts_with: String
  category_ends_with: String
  category_not_ends_with: String
  live: Boolean
  live_not: Boolean
  owners_every: UserWhereInput
  owners_some: UserWhereInput
  owners_none: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  images_every: ShopImageWhereInput
  images_some: ShopImageWhereInput
  images_none: ShopImageWhereInput
  products_every: ProductWhereInput
  products_some: ProductWhereInput
  products_none: ProductWhereInput
  AND: [ShopWhereInput!]
  OR: [ShopWhereInput!]
  NOT: [ShopWhereInput!]
}

input ShopWhereUniqueInput {
  id: ID
  name: String
}

type Subscription {
  brand(where: BrandSubscriptionWhereInput): BrandSubscriptionPayload
  cart(where: CartSubscriptionWhereInput): CartSubscriptionPayload
  cartItem(where: CartItemSubscriptionWhereInput): CartItemSubscriptionPayload
  category(where: CategorySubscriptionWhereInput): CategorySubscriptionPayload
  forum(where: ForumSubscriptionWhereInput): ForumSubscriptionPayload
  forumPost(where: ForumPostSubscriptionWhereInput): ForumPostSubscriptionPayload
  forumPostComment(where: ForumPostCommentSubscriptionWhereInput): ForumPostCommentSubscriptionPayload
  order(where: OrderSubscriptionWhereInput): OrderSubscriptionPayload
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  productImage(where: ProductImageSubscriptionWhereInput): ProductImageSubscriptionPayload
  productReview(where: ProductReviewSubscriptionWhereInput): ProductReviewSubscriptionPayload
  shop(where: ShopSubscriptionWhereInput): ShopSubscriptionPayload
  shopImage(where: ShopImageSubscriptionWhereInput): ShopImageSubscriptionPayload
  tag(where: TagSubscriptionWhereInput): TagSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  userImage(where: UserImageSubscriptionWhereInput): UserImageSubscriptionPayload
  variant(where: VariantSubscriptionWhereInput): VariantSubscriptionPayload
  orderItem(where: orderItemSubscriptionWhereInput): orderItemSubscriptionPayload
}

type Tag {
  id: ID!
  name: String!
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TagConnection {
  pageInfo: PageInfo!
  edges: [TagEdge]!
  aggregate: AggregateTag!
}

input TagCreateInput {
  id: ID
  name: String!
  products: ProductCreateManyWithoutTagsInput
}

input TagCreateManyWithoutProductsInput {
  create: [TagCreateWithoutProductsInput!]
  connect: [TagWhereUniqueInput!]
}

input TagCreateWithoutProductsInput {
  id: ID
  name: String!
}

type TagEdge {
  node: Tag!
  cursor: String!
}

enum TagOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TagPreviousValues {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input TagScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TagScalarWhereInput!]
  OR: [TagScalarWhereInput!]
  NOT: [TagScalarWhereInput!]
}

type TagSubscriptionPayload {
  mutation: MutationType!
  node: Tag
  updatedFields: [String!]
  previousValues: TagPreviousValues
}

input TagSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TagWhereInput
  AND: [TagSubscriptionWhereInput!]
  OR: [TagSubscriptionWhereInput!]
  NOT: [TagSubscriptionWhereInput!]
}

input TagUpdateInput {
  name: String
  products: ProductUpdateManyWithoutTagsInput
}

input TagUpdateManyDataInput {
  name: String
}

input TagUpdateManyMutationInput {
  name: String
}

input TagUpdateManyWithoutProductsInput {
  create: [TagCreateWithoutProductsInput!]
  delete: [TagWhereUniqueInput!]
  connect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  disconnect: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutProductsInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutProductsInput!]
  deleteMany: [TagScalarWhereInput!]
  updateMany: [TagUpdateManyWithWhereNestedInput!]
}

input TagUpdateManyWithWhereNestedInput {
  where: TagScalarWhereInput!
  data: TagUpdateManyDataInput!
}

input TagUpdateWithoutProductsDataInput {
  name: String
}

input TagUpdateWithWhereUniqueWithoutProductsInput {
  where: TagWhereUniqueInput!
  data: TagUpdateWithoutProductsDataInput!
}

input TagUpsertWithWhereUniqueWithoutProductsInput {
  where: TagWhereUniqueInput!
  update: TagUpdateWithoutProductsDataInput!
  create: TagCreateWithoutProductsInput!
}

input TagWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  products_every: ProductWhereInput
  products_some: ProductWhereInput
  products_none: ProductWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
}

input TagWhereUniqueInput {
  id: ID
  name: String
}

type User {
  id: ID!
  firebaseId: String!
  email: String
  name: String!
  username: String!
  profilePic: String
  createdAt: DateTime!
  updatedAt: DateTime!
  isAnonymous: Boolean!
  emailVerified: Boolean
  shops(where: ShopWhereInput, orderBy: ShopOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Shop!]
  images(where: UserImageWhereInput, orderBy: UserImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserImage!]
  productReviews(where: ProductReviewWhereInput, orderBy: ProductReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductReview!]
  cartItems: Cart
  forumposts(where: ForumPostWhereInput, orderBy: ForumPostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ForumPost!]
  forums(where: ForumWhereInput, orderBy: ForumOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Forum!]
  postComments(where: ForumPostCommentWhereInput, orderBy: ForumPostCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ForumPostComment!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  firebaseId: String!
  email: String
  name: String!
  username: String!
  profilePic: String
  isAnonymous: Boolean
  emailVerified: Boolean
  shops: ShopCreateManyWithoutOwnersInput
  images: UserImageCreateManyWithoutUserInput
  productReviews: ProductReviewCreateManyWithoutUserInput
  cartItems: CartCreateOneWithoutUserInput
  forumposts: ForumPostCreateManyWithoutPostedByInput
  forums: ForumCreateManyWithoutMembersInput
  postComments: ForumPostCommentCreateManyWithoutUserInput
}

input UserCreateManyWithoutForumsInput {
  create: [UserCreateWithoutForumsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutShopsInput {
  create: [UserCreateWithoutShopsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCartItemsInput {
  create: UserCreateWithoutCartItemsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutForumpostsInput {
  create: UserCreateWithoutForumpostsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutImagesInput {
  create: UserCreateWithoutImagesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPostCommentsInput {
  create: UserCreateWithoutPostCommentsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutProductReviewsInput {
  create: UserCreateWithoutProductReviewsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCartItemsInput {
  id: ID
  firebaseId: String!
  email: String
  name: String!
  username: String!
  profilePic: String
  isAnonymous: Boolean
  emailVerified: Boolean
  shops: ShopCreateManyWithoutOwnersInput
  images: UserImageCreateManyWithoutUserInput
  productReviews: ProductReviewCreateManyWithoutUserInput
  forumposts: ForumPostCreateManyWithoutPostedByInput
  forums: ForumCreateManyWithoutMembersInput
  postComments: ForumPostCommentCreateManyWithoutUserInput
}

input UserCreateWithoutForumpostsInput {
  id: ID
  firebaseId: String!
  email: String
  name: String!
  username: String!
  profilePic: String
  isAnonymous: Boolean
  emailVerified: Boolean
  shops: ShopCreateManyWithoutOwnersInput
  images: UserImageCreateManyWithoutUserInput
  productReviews: ProductReviewCreateManyWithoutUserInput
  cartItems: CartCreateOneWithoutUserInput
  forums: ForumCreateManyWithoutMembersInput
  postComments: ForumPostCommentCreateManyWithoutUserInput
}

input UserCreateWithoutForumsInput {
  id: ID
  firebaseId: String!
  email: String
  name: String!
  username: String!
  profilePic: String
  isAnonymous: Boolean
  emailVerified: Boolean
  shops: ShopCreateManyWithoutOwnersInput
  images: UserImageCreateManyWithoutUserInput
  productReviews: ProductReviewCreateManyWithoutUserInput
  cartItems: CartCreateOneWithoutUserInput
  forumposts: ForumPostCreateManyWithoutPostedByInput
  postComments: ForumPostCommentCreateManyWithoutUserInput
}

input UserCreateWithoutImagesInput {
  id: ID
  firebaseId: String!
  email: String
  name: String!
  username: String!
  profilePic: String
  isAnonymous: Boolean
  emailVerified: Boolean
  shops: ShopCreateManyWithoutOwnersInput
  productReviews: ProductReviewCreateManyWithoutUserInput
  cartItems: CartCreateOneWithoutUserInput
  forumposts: ForumPostCreateManyWithoutPostedByInput
  forums: ForumCreateManyWithoutMembersInput
  postComments: ForumPostCommentCreateManyWithoutUserInput
}

input UserCreateWithoutPostCommentsInput {
  id: ID
  firebaseId: String!
  email: String
  name: String!
  username: String!
  profilePic: String
  isAnonymous: Boolean
  emailVerified: Boolean
  shops: ShopCreateManyWithoutOwnersInput
  images: UserImageCreateManyWithoutUserInput
  productReviews: ProductReviewCreateManyWithoutUserInput
  cartItems: CartCreateOneWithoutUserInput
  forumposts: ForumPostCreateManyWithoutPostedByInput
  forums: ForumCreateManyWithoutMembersInput
}

input UserCreateWithoutProductReviewsInput {
  id: ID
  firebaseId: String!
  email: String
  name: String!
  username: String!
  profilePic: String
  isAnonymous: Boolean
  emailVerified: Boolean
  shops: ShopCreateManyWithoutOwnersInput
  images: UserImageCreateManyWithoutUserInput
  cartItems: CartCreateOneWithoutUserInput
  forumposts: ForumPostCreateManyWithoutPostedByInput
  forums: ForumCreateManyWithoutMembersInput
  postComments: ForumPostCommentCreateManyWithoutUserInput
}

input UserCreateWithoutShopsInput {
  id: ID
  firebaseId: String!
  email: String
  name: String!
  username: String!
  profilePic: String
  isAnonymous: Boolean
  emailVerified: Boolean
  images: UserImageCreateManyWithoutUserInput
  productReviews: ProductReviewCreateManyWithoutUserInput
  cartItems: CartCreateOneWithoutUserInput
  forumposts: ForumPostCreateManyWithoutPostedByInput
  forums: ForumCreateManyWithoutMembersInput
  postComments: ForumPostCommentCreateManyWithoutUserInput
}

type UserEdge {
  node: User!
  cursor: String!
}

type UserImage {
  id: ID!
  imageUrl: String!
  user: User
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserImageConnection {
  pageInfo: PageInfo!
  edges: [UserImageEdge]!
  aggregate: AggregateUserImage!
}

input UserImageCreateInput {
  id: ID
  imageUrl: String!
  user: UserCreateOneWithoutImagesInput
}

input UserImageCreateManyWithoutUserInput {
  create: [UserImageCreateWithoutUserInput!]
  connect: [UserImageWhereUniqueInput!]
}

input UserImageCreateWithoutUserInput {
  id: ID
  imageUrl: String!
}

type UserImageEdge {
  node: UserImage!
  cursor: String!
}

enum UserImageOrderByInput {
  id_ASC
  id_DESC
  imageUrl_ASC
  imageUrl_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserImagePreviousValues {
  id: ID!
  imageUrl: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UserImageScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  imageUrl: String
  imageUrl_not: String
  imageUrl_in: [String!]
  imageUrl_not_in: [String!]
  imageUrl_lt: String
  imageUrl_lte: String
  imageUrl_gt: String
  imageUrl_gte: String
  imageUrl_contains: String
  imageUrl_not_contains: String
  imageUrl_starts_with: String
  imageUrl_not_starts_with: String
  imageUrl_ends_with: String
  imageUrl_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserImageScalarWhereInput!]
  OR: [UserImageScalarWhereInput!]
  NOT: [UserImageScalarWhereInput!]
}

type UserImageSubscriptionPayload {
  mutation: MutationType!
  node: UserImage
  updatedFields: [String!]
  previousValues: UserImagePreviousValues
}

input UserImageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserImageWhereInput
  AND: [UserImageSubscriptionWhereInput!]
  OR: [UserImageSubscriptionWhereInput!]
  NOT: [UserImageSubscriptionWhereInput!]
}

input UserImageUpdateInput {
  imageUrl: String
  user: UserUpdateOneWithoutImagesInput
}

input UserImageUpdateManyDataInput {
  imageUrl: String
}

input UserImageUpdateManyMutationInput {
  imageUrl: String
}

input UserImageUpdateManyWithoutUserInput {
  create: [UserImageCreateWithoutUserInput!]
  delete: [UserImageWhereUniqueInput!]
  connect: [UserImageWhereUniqueInput!]
  set: [UserImageWhereUniqueInput!]
  disconnect: [UserImageWhereUniqueInput!]
  update: [UserImageUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [UserImageUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [UserImageScalarWhereInput!]
  updateMany: [UserImageUpdateManyWithWhereNestedInput!]
}

input UserImageUpdateManyWithWhereNestedInput {
  where: UserImageScalarWhereInput!
  data: UserImageUpdateManyDataInput!
}

input UserImageUpdateWithoutUserDataInput {
  imageUrl: String
}

input UserImageUpdateWithWhereUniqueWithoutUserInput {
  where: UserImageWhereUniqueInput!
  data: UserImageUpdateWithoutUserDataInput!
}

input UserImageUpsertWithWhereUniqueWithoutUserInput {
  where: UserImageWhereUniqueInput!
  update: UserImageUpdateWithoutUserDataInput!
  create: UserImageCreateWithoutUserInput!
}

input UserImageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  imageUrl: String
  imageUrl_not: String
  imageUrl_in: [String!]
  imageUrl_not_in: [String!]
  imageUrl_lt: String
  imageUrl_lte: String
  imageUrl_gt: String
  imageUrl_gte: String
  imageUrl_contains: String
  imageUrl_not_contains: String
  imageUrl_starts_with: String
  imageUrl_not_starts_with: String
  imageUrl_ends_with: String
  imageUrl_not_ends_with: String
  user: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserImageWhereInput!]
  OR: [UserImageWhereInput!]
  NOT: [UserImageWhereInput!]
}

input UserImageWhereUniqueInput {
  id: ID
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  firebaseId_ASC
  firebaseId_DESC
  email_ASC
  email_DESC
  name_ASC
  name_DESC
  username_ASC
  username_DESC
  profilePic_ASC
  profilePic_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  isAnonymous_ASC
  isAnonymous_DESC
  emailVerified_ASC
  emailVerified_DESC
}

type UserPreviousValues {
  id: ID!
  firebaseId: String!
  email: String
  name: String!
  username: String!
  profilePic: String
  createdAt: DateTime!
  updatedAt: DateTime!
  isAnonymous: Boolean!
  emailVerified: Boolean
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firebaseId: String
  firebaseId_not: String
  firebaseId_in: [String!]
  firebaseId_not_in: [String!]
  firebaseId_lt: String
  firebaseId_lte: String
  firebaseId_gt: String
  firebaseId_gte: String
  firebaseId_contains: String
  firebaseId_not_contains: String
  firebaseId_starts_with: String
  firebaseId_not_starts_with: String
  firebaseId_ends_with: String
  firebaseId_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  profilePic: String
  profilePic_not: String
  profilePic_in: [String!]
  profilePic_not_in: [String!]
  profilePic_lt: String
  profilePic_lte: String
  profilePic_gt: String
  profilePic_gte: String
  profilePic_contains: String
  profilePic_not_contains: String
  profilePic_starts_with: String
  profilePic_not_starts_with: String
  profilePic_ends_with: String
  profilePic_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  isAnonymous: Boolean
  isAnonymous_not: Boolean
  emailVerified: Boolean
  emailVerified_not: Boolean
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  firebaseId: String
  email: String
  name: String
  username: String
  profilePic: String
  isAnonymous: Boolean
  emailVerified: Boolean
  shops: ShopUpdateManyWithoutOwnersInput
  images: UserImageUpdateManyWithoutUserInput
  productReviews: ProductReviewUpdateManyWithoutUserInput
  cartItems: CartUpdateOneWithoutUserInput
  forumposts: ForumPostUpdateManyWithoutPostedByInput
  forums: ForumUpdateManyWithoutMembersInput
  postComments: ForumPostCommentUpdateManyWithoutUserInput
}

input UserUpdateInput {
  firebaseId: String
  email: String
  name: String
  username: String
  profilePic: String
  isAnonymous: Boolean
  emailVerified: Boolean
  shops: ShopUpdateManyWithoutOwnersInput
  images: UserImageUpdateManyWithoutUserInput
  productReviews: ProductReviewUpdateManyWithoutUserInput
  cartItems: CartUpdateOneWithoutUserInput
  forumposts: ForumPostUpdateManyWithoutPostedByInput
  forums: ForumUpdateManyWithoutMembersInput
  postComments: ForumPostCommentUpdateManyWithoutUserInput
}

input UserUpdateManyDataInput {
  firebaseId: String
  email: String
  name: String
  username: String
  profilePic: String
  isAnonymous: Boolean
  emailVerified: Boolean
}

input UserUpdateManyMutationInput {
  firebaseId: String
  email: String
  name: String
  username: String
  profilePic: String
  isAnonymous: Boolean
  emailVerified: Boolean
}

input UserUpdateManyWithoutForumsInput {
  create: [UserCreateWithoutForumsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutForumsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutForumsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutShopsInput {
  create: [UserCreateWithoutShopsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutShopsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutShopsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutCartItemsInput {
  create: UserCreateWithoutCartItemsInput
  update: UserUpdateWithoutCartItemsDataInput
  upsert: UserUpsertWithoutCartItemsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutForumpostsInput {
  create: UserCreateWithoutForumpostsInput
  update: UserUpdateWithoutForumpostsDataInput
  upsert: UserUpsertWithoutForumpostsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutPostCommentsInput {
  create: UserCreateWithoutPostCommentsInput
  update: UserUpdateWithoutPostCommentsDataInput
  upsert: UserUpsertWithoutPostCommentsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutProductReviewsInput {
  create: UserCreateWithoutProductReviewsInput
  update: UserUpdateWithoutProductReviewsDataInput
  upsert: UserUpsertWithoutProductReviewsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutImagesInput {
  create: UserCreateWithoutImagesInput
  update: UserUpdateWithoutImagesDataInput
  upsert: UserUpsertWithoutImagesInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutCartItemsDataInput {
  firebaseId: String
  email: String
  name: String
  username: String
  profilePic: String
  isAnonymous: Boolean
  emailVerified: Boolean
  shops: ShopUpdateManyWithoutOwnersInput
  images: UserImageUpdateManyWithoutUserInput
  productReviews: ProductReviewUpdateManyWithoutUserInput
  forumposts: ForumPostUpdateManyWithoutPostedByInput
  forums: ForumUpdateManyWithoutMembersInput
  postComments: ForumPostCommentUpdateManyWithoutUserInput
}

input UserUpdateWithoutForumpostsDataInput {
  firebaseId: String
  email: String
  name: String
  username: String
  profilePic: String
  isAnonymous: Boolean
  emailVerified: Boolean
  shops: ShopUpdateManyWithoutOwnersInput
  images: UserImageUpdateManyWithoutUserInput
  productReviews: ProductReviewUpdateManyWithoutUserInput
  cartItems: CartUpdateOneWithoutUserInput
  forums: ForumUpdateManyWithoutMembersInput
  postComments: ForumPostCommentUpdateManyWithoutUserInput
}

input UserUpdateWithoutForumsDataInput {
  firebaseId: String
  email: String
  name: String
  username: String
  profilePic: String
  isAnonymous: Boolean
  emailVerified: Boolean
  shops: ShopUpdateManyWithoutOwnersInput
  images: UserImageUpdateManyWithoutUserInput
  productReviews: ProductReviewUpdateManyWithoutUserInput
  cartItems: CartUpdateOneWithoutUserInput
  forumposts: ForumPostUpdateManyWithoutPostedByInput
  postComments: ForumPostCommentUpdateManyWithoutUserInput
}

input UserUpdateWithoutImagesDataInput {
  firebaseId: String
  email: String
  name: String
  username: String
  profilePic: String
  isAnonymous: Boolean
  emailVerified: Boolean
  shops: ShopUpdateManyWithoutOwnersInput
  productReviews: ProductReviewUpdateManyWithoutUserInput
  cartItems: CartUpdateOneWithoutUserInput
  forumposts: ForumPostUpdateManyWithoutPostedByInput
  forums: ForumUpdateManyWithoutMembersInput
  postComments: ForumPostCommentUpdateManyWithoutUserInput
}

input UserUpdateWithoutPostCommentsDataInput {
  firebaseId: String
  email: String
  name: String
  username: String
  profilePic: String
  isAnonymous: Boolean
  emailVerified: Boolean
  shops: ShopUpdateManyWithoutOwnersInput
  images: UserImageUpdateManyWithoutUserInput
  productReviews: ProductReviewUpdateManyWithoutUserInput
  cartItems: CartUpdateOneWithoutUserInput
  forumposts: ForumPostUpdateManyWithoutPostedByInput
  forums: ForumUpdateManyWithoutMembersInput
}

input UserUpdateWithoutProductReviewsDataInput {
  firebaseId: String
  email: String
  name: String
  username: String
  profilePic: String
  isAnonymous: Boolean
  emailVerified: Boolean
  shops: ShopUpdateManyWithoutOwnersInput
  images: UserImageUpdateManyWithoutUserInput
  cartItems: CartUpdateOneWithoutUserInput
  forumposts: ForumPostUpdateManyWithoutPostedByInput
  forums: ForumUpdateManyWithoutMembersInput
  postComments: ForumPostCommentUpdateManyWithoutUserInput
}

input UserUpdateWithoutShopsDataInput {
  firebaseId: String
  email: String
  name: String
  username: String
  profilePic: String
  isAnonymous: Boolean
  emailVerified: Boolean
  images: UserImageUpdateManyWithoutUserInput
  productReviews: ProductReviewUpdateManyWithoutUserInput
  cartItems: CartUpdateOneWithoutUserInput
  forumposts: ForumPostUpdateManyWithoutPostedByInput
  forums: ForumUpdateManyWithoutMembersInput
  postComments: ForumPostCommentUpdateManyWithoutUserInput
}

input UserUpdateWithWhereUniqueWithoutForumsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutForumsDataInput!
}

input UserUpdateWithWhereUniqueWithoutShopsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutShopsDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutCartItemsInput {
  update: UserUpdateWithoutCartItemsDataInput!
  create: UserCreateWithoutCartItemsInput!
}

input UserUpsertWithoutForumpostsInput {
  update: UserUpdateWithoutForumpostsDataInput!
  create: UserCreateWithoutForumpostsInput!
}

input UserUpsertWithoutImagesInput {
  update: UserUpdateWithoutImagesDataInput!
  create: UserCreateWithoutImagesInput!
}

input UserUpsertWithoutPostCommentsInput {
  update: UserUpdateWithoutPostCommentsDataInput!
  create: UserCreateWithoutPostCommentsInput!
}

input UserUpsertWithoutProductReviewsInput {
  update: UserUpdateWithoutProductReviewsDataInput!
  create: UserCreateWithoutProductReviewsInput!
}

input UserUpsertWithWhereUniqueWithoutForumsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutForumsDataInput!
  create: UserCreateWithoutForumsInput!
}

input UserUpsertWithWhereUniqueWithoutShopsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutShopsDataInput!
  create: UserCreateWithoutShopsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firebaseId: String
  firebaseId_not: String
  firebaseId_in: [String!]
  firebaseId_not_in: [String!]
  firebaseId_lt: String
  firebaseId_lte: String
  firebaseId_gt: String
  firebaseId_gte: String
  firebaseId_contains: String
  firebaseId_not_contains: String
  firebaseId_starts_with: String
  firebaseId_not_starts_with: String
  firebaseId_ends_with: String
  firebaseId_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  profilePic: String
  profilePic_not: String
  profilePic_in: [String!]
  profilePic_not_in: [String!]
  profilePic_lt: String
  profilePic_lte: String
  profilePic_gt: String
  profilePic_gte: String
  profilePic_contains: String
  profilePic_not_contains: String
  profilePic_starts_with: String
  profilePic_not_starts_with: String
  profilePic_ends_with: String
  profilePic_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  isAnonymous: Boolean
  isAnonymous_not: Boolean
  emailVerified: Boolean
  emailVerified_not: Boolean
  shops_every: ShopWhereInput
  shops_some: ShopWhereInput
  shops_none: ShopWhereInput
  images_every: UserImageWhereInput
  images_some: UserImageWhereInput
  images_none: UserImageWhereInput
  productReviews_every: ProductReviewWhereInput
  productReviews_some: ProductReviewWhereInput
  productReviews_none: ProductReviewWhereInput
  cartItems: CartWhereInput
  forumposts_every: ForumPostWhereInput
  forumposts_some: ForumPostWhereInput
  forumposts_none: ForumPostWhereInput
  forums_every: ForumWhereInput
  forums_some: ForumWhereInput
  forums_none: ForumWhereInput
  postComments_every: ForumPostCommentWhereInput
  postComments_some: ForumPostCommentWhereInput
  postComments_none: ForumPostCommentWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  firebaseId: String
  email: String
  username: String
}

type Variant {
  id: ID!
  product: Product!
  name: String!
  values: [String!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type VariantConnection {
  pageInfo: PageInfo!
  edges: [VariantEdge]!
  aggregate: AggregateVariant!
}

input VariantCreateInput {
  id: ID
  product: ProductCreateOneWithoutVariantsInput!
  name: String!
  values: VariantCreatevaluesInput
}

input VariantCreateManyWithoutProductInput {
  create: [VariantCreateWithoutProductInput!]
  connect: [VariantWhereUniqueInput!]
}

input VariantCreatevaluesInput {
  set: [String!]
}

input VariantCreateWithoutProductInput {
  id: ID
  name: String!
  values: VariantCreatevaluesInput
}

type VariantEdge {
  node: Variant!
  cursor: String!
}

enum VariantOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type VariantPreviousValues {
  id: ID!
  name: String!
  values: [String!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input VariantScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [VariantScalarWhereInput!]
  OR: [VariantScalarWhereInput!]
  NOT: [VariantScalarWhereInput!]
}

type VariantSubscriptionPayload {
  mutation: MutationType!
  node: Variant
  updatedFields: [String!]
  previousValues: VariantPreviousValues
}

input VariantSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: VariantWhereInput
  AND: [VariantSubscriptionWhereInput!]
  OR: [VariantSubscriptionWhereInput!]
  NOT: [VariantSubscriptionWhereInput!]
}

input VariantUpdateInput {
  product: ProductUpdateOneRequiredWithoutVariantsInput
  name: String
  values: VariantUpdatevaluesInput
}

input VariantUpdateManyDataInput {
  name: String
  values: VariantUpdatevaluesInput
}

input VariantUpdateManyMutationInput {
  name: String
  values: VariantUpdatevaluesInput
}

input VariantUpdateManyWithoutProductInput {
  create: [VariantCreateWithoutProductInput!]
  delete: [VariantWhereUniqueInput!]
  connect: [VariantWhereUniqueInput!]
  set: [VariantWhereUniqueInput!]
  disconnect: [VariantWhereUniqueInput!]
  update: [VariantUpdateWithWhereUniqueWithoutProductInput!]
  upsert: [VariantUpsertWithWhereUniqueWithoutProductInput!]
  deleteMany: [VariantScalarWhereInput!]
  updateMany: [VariantUpdateManyWithWhereNestedInput!]
}

input VariantUpdateManyWithWhereNestedInput {
  where: VariantScalarWhereInput!
  data: VariantUpdateManyDataInput!
}

input VariantUpdatevaluesInput {
  set: [String!]
}

input VariantUpdateWithoutProductDataInput {
  name: String
  values: VariantUpdatevaluesInput
}

input VariantUpdateWithWhereUniqueWithoutProductInput {
  where: VariantWhereUniqueInput!
  data: VariantUpdateWithoutProductDataInput!
}

input VariantUpsertWithWhereUniqueWithoutProductInput {
  where: VariantWhereUniqueInput!
  update: VariantUpdateWithoutProductDataInput!
  create: VariantCreateWithoutProductInput!
}

input VariantWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  product: ProductWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [VariantWhereInput!]
  OR: [VariantWhereInput!]
  NOT: [VariantWhereInput!]
}

input VariantWhereUniqueInput {
  id: ID
}
`