/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      User: UserObject
      Shop: ShopObject
      ShopImage: ShopImageObject
      Product: ProductObject
      Category: CategoryObject
      Brand: BrandObject
      Tag: TagObject
      ProductImage: ProductImageObject
      Variant: VariantObject
      ProductReview: ProductReviewObject
      UserImage: UserImageObject
      Cart: CartObject
      CartItem: CartItemObject
      ForumPost: ForumPostObject
      Forum: ForumObject
      ForumPostComment: ForumPostCommentObject
      UserConnection: UserConnectionObject
      PageInfo: PageInfoObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      ForumConnection: ForumConnectionObject
      ForumEdge: ForumEdgeObject
      AggregateForum: AggregateForumObject
      ForumPostConnection: ForumPostConnectionObject
      ForumPostEdge: ForumPostEdgeObject
      AggregateForumPost: AggregateForumPostObject
      ForumPostCommentConnection: ForumPostCommentConnectionObject
      ForumPostCommentEdge: ForumPostCommentEdgeObject
      AggregateForumPostComment: AggregateForumPostCommentObject
      ShopConnection: ShopConnectionObject
      ShopEdge: ShopEdgeObject
      AggregateShop: AggregateShopObject
      ShopImageConnection: ShopImageConnectionObject
      ShopImageEdge: ShopImageEdgeObject
      AggregateShopImage: AggregateShopImageObject
      UserImageConnection: UserImageConnectionObject
      UserImageEdge: UserImageEdgeObject
      AggregateUserImage: AggregateUserImageObject
      ProductConnection: ProductConnectionObject
      ProductEdge: ProductEdgeObject
      AggregateProduct: AggregateProductObject
      CartConnection: CartConnectionObject
      CartEdge: CartEdgeObject
      AggregateCart: AggregateCartObject
      CartItemConnection: CartItemConnectionObject
      CartItemEdge: CartItemEdgeObject
      AggregateCartItem: AggregateCartItemObject
      orderItem: orderItemObject
      orderItemConnection: orderItemConnectionObject
      orderItemEdge: orderItemEdgeObject
      AggregateorderItem: AggregateorderItemObject
      Order: OrderObject
      OrderConnection: OrderConnectionObject
      OrderEdge: OrderEdgeObject
      AggregateOrder: AggregateOrderObject
      BrandConnection: BrandConnectionObject
      BrandEdge: BrandEdgeObject
      AggregateBrand: AggregateBrandObject
      TagConnection: TagConnectionObject
      TagEdge: TagEdgeObject
      AggregateTag: AggregateTagObject
      CategoryConnection: CategoryConnectionObject
      CategoryEdge: CategoryEdgeObject
      AggregateCategory: AggregateCategoryObject
      ProductImageConnection: ProductImageConnectionObject
      ProductImageEdge: ProductImageEdgeObject
      AggregateProductImage: AggregateProductImageObject
      VariantConnection: VariantConnectionObject
      VariantEdge: VariantEdgeObject
      AggregateVariant: AggregateVariantObject
      ProductReviewConnection: ProductReviewConnectionObject
      ProductReviewEdge: ProductReviewEdgeObject
      AggregateProductReview: AggregateProductReviewObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
      ForumSubscriptionPayload: ForumSubscriptionPayloadObject
      ForumPreviousValues: ForumPreviousValuesObject
      ForumPostSubscriptionPayload: ForumPostSubscriptionPayloadObject
      ForumPostPreviousValues: ForumPostPreviousValuesObject
      ForumPostCommentSubscriptionPayload: ForumPostCommentSubscriptionPayloadObject
      ForumPostCommentPreviousValues: ForumPostCommentPreviousValuesObject
      ShopSubscriptionPayload: ShopSubscriptionPayloadObject
      ShopPreviousValues: ShopPreviousValuesObject
      ShopImageSubscriptionPayload: ShopImageSubscriptionPayloadObject
      ShopImagePreviousValues: ShopImagePreviousValuesObject
      UserImageSubscriptionPayload: UserImageSubscriptionPayloadObject
      UserImagePreviousValues: UserImagePreviousValuesObject
      ProductSubscriptionPayload: ProductSubscriptionPayloadObject
      ProductPreviousValues: ProductPreviousValuesObject
      CartSubscriptionPayload: CartSubscriptionPayloadObject
      CartPreviousValues: CartPreviousValuesObject
      CartItemSubscriptionPayload: CartItemSubscriptionPayloadObject
      CartItemPreviousValues: CartItemPreviousValuesObject
      orderItemSubscriptionPayload: orderItemSubscriptionPayloadObject
      orderItemPreviousValues: orderItemPreviousValuesObject
      OrderSubscriptionPayload: OrderSubscriptionPayloadObject
      OrderPreviousValues: OrderPreviousValuesObject
      BrandSubscriptionPayload: BrandSubscriptionPayloadObject
      BrandPreviousValues: BrandPreviousValuesObject
      TagSubscriptionPayload: TagSubscriptionPayloadObject
      TagPreviousValues: TagPreviousValuesObject
      CategorySubscriptionPayload: CategorySubscriptionPayloadObject
      CategoryPreviousValues: CategoryPreviousValuesObject
      ProductImageSubscriptionPayload: ProductImageSubscriptionPayloadObject
      ProductImagePreviousValues: ProductImagePreviousValuesObject
      VariantSubscriptionPayload: VariantSubscriptionPayloadObject
      VariantPreviousValues: VariantPreviousValuesObject
      ProductReviewSubscriptionPayload: ProductReviewSubscriptionPayloadObject
      ProductReviewPreviousValues: ProductReviewPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      User: UserFieldDetails
      Shop: ShopFieldDetails
      ShopImage: ShopImageFieldDetails
      Product: ProductFieldDetails
      Category: CategoryFieldDetails
      Brand: BrandFieldDetails
      Tag: TagFieldDetails
      ProductImage: ProductImageFieldDetails
      Variant: VariantFieldDetails
      ProductReview: ProductReviewFieldDetails
      UserImage: UserImageFieldDetails
      Cart: CartFieldDetails
      CartItem: CartItemFieldDetails
      ForumPost: ForumPostFieldDetails
      Forum: ForumFieldDetails
      ForumPostComment: ForumPostCommentFieldDetails
      UserConnection: UserConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      ForumConnection: ForumConnectionFieldDetails
      ForumEdge: ForumEdgeFieldDetails
      AggregateForum: AggregateForumFieldDetails
      ForumPostConnection: ForumPostConnectionFieldDetails
      ForumPostEdge: ForumPostEdgeFieldDetails
      AggregateForumPost: AggregateForumPostFieldDetails
      ForumPostCommentConnection: ForumPostCommentConnectionFieldDetails
      ForumPostCommentEdge: ForumPostCommentEdgeFieldDetails
      AggregateForumPostComment: AggregateForumPostCommentFieldDetails
      ShopConnection: ShopConnectionFieldDetails
      ShopEdge: ShopEdgeFieldDetails
      AggregateShop: AggregateShopFieldDetails
      ShopImageConnection: ShopImageConnectionFieldDetails
      ShopImageEdge: ShopImageEdgeFieldDetails
      AggregateShopImage: AggregateShopImageFieldDetails
      UserImageConnection: UserImageConnectionFieldDetails
      UserImageEdge: UserImageEdgeFieldDetails
      AggregateUserImage: AggregateUserImageFieldDetails
      ProductConnection: ProductConnectionFieldDetails
      ProductEdge: ProductEdgeFieldDetails
      AggregateProduct: AggregateProductFieldDetails
      CartConnection: CartConnectionFieldDetails
      CartEdge: CartEdgeFieldDetails
      AggregateCart: AggregateCartFieldDetails
      CartItemConnection: CartItemConnectionFieldDetails
      CartItemEdge: CartItemEdgeFieldDetails
      AggregateCartItem: AggregateCartItemFieldDetails
      orderItem: orderItemFieldDetails
      orderItemConnection: orderItemConnectionFieldDetails
      orderItemEdge: orderItemEdgeFieldDetails
      AggregateorderItem: AggregateorderItemFieldDetails
      Order: OrderFieldDetails
      OrderConnection: OrderConnectionFieldDetails
      OrderEdge: OrderEdgeFieldDetails
      AggregateOrder: AggregateOrderFieldDetails
      BrandConnection: BrandConnectionFieldDetails
      BrandEdge: BrandEdgeFieldDetails
      AggregateBrand: AggregateBrandFieldDetails
      TagConnection: TagConnectionFieldDetails
      TagEdge: TagEdgeFieldDetails
      AggregateTag: AggregateTagFieldDetails
      CategoryConnection: CategoryConnectionFieldDetails
      CategoryEdge: CategoryEdgeFieldDetails
      AggregateCategory: AggregateCategoryFieldDetails
      ProductImageConnection: ProductImageConnectionFieldDetails
      ProductImageEdge: ProductImageEdgeFieldDetails
      AggregateProductImage: AggregateProductImageFieldDetails
      VariantConnection: VariantConnectionFieldDetails
      VariantEdge: VariantEdgeFieldDetails
      AggregateVariant: AggregateVariantFieldDetails
      ProductReviewConnection: ProductReviewConnectionFieldDetails
      ProductReviewEdge: ProductReviewEdgeFieldDetails
      AggregateProductReview: AggregateProductReviewFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
      ForumSubscriptionPayload: ForumSubscriptionPayloadFieldDetails
      ForumPreviousValues: ForumPreviousValuesFieldDetails
      ForumPostSubscriptionPayload: ForumPostSubscriptionPayloadFieldDetails
      ForumPostPreviousValues: ForumPostPreviousValuesFieldDetails
      ForumPostCommentSubscriptionPayload: ForumPostCommentSubscriptionPayloadFieldDetails
      ForumPostCommentPreviousValues: ForumPostCommentPreviousValuesFieldDetails
      ShopSubscriptionPayload: ShopSubscriptionPayloadFieldDetails
      ShopPreviousValues: ShopPreviousValuesFieldDetails
      ShopImageSubscriptionPayload: ShopImageSubscriptionPayloadFieldDetails
      ShopImagePreviousValues: ShopImagePreviousValuesFieldDetails
      UserImageSubscriptionPayload: UserImageSubscriptionPayloadFieldDetails
      UserImagePreviousValues: UserImagePreviousValuesFieldDetails
      ProductSubscriptionPayload: ProductSubscriptionPayloadFieldDetails
      ProductPreviousValues: ProductPreviousValuesFieldDetails
      CartSubscriptionPayload: CartSubscriptionPayloadFieldDetails
      CartPreviousValues: CartPreviousValuesFieldDetails
      CartItemSubscriptionPayload: CartItemSubscriptionPayloadFieldDetails
      CartItemPreviousValues: CartItemPreviousValuesFieldDetails
      orderItemSubscriptionPayload: orderItemSubscriptionPayloadFieldDetails
      orderItemPreviousValues: orderItemPreviousValuesFieldDetails
      OrderSubscriptionPayload: OrderSubscriptionPayloadFieldDetails
      OrderPreviousValues: OrderPreviousValuesFieldDetails
      BrandSubscriptionPayload: BrandSubscriptionPayloadFieldDetails
      BrandPreviousValues: BrandPreviousValuesFieldDetails
      TagSubscriptionPayload: TagSubscriptionPayloadFieldDetails
      TagPreviousValues: TagPreviousValuesFieldDetails
      CategorySubscriptionPayload: CategorySubscriptionPayloadFieldDetails
      CategoryPreviousValues: CategoryPreviousValuesFieldDetails
      ProductImageSubscriptionPayload: ProductImageSubscriptionPayloadFieldDetails
      ProductImagePreviousValues: ProductImagePreviousValuesFieldDetails
      VariantSubscriptionPayload: VariantSubscriptionPayloadFieldDetails
      VariantPreviousValues: VariantPreviousValuesFieldDetails
      ProductReviewSubscriptionPayload: ProductReviewSubscriptionPayloadFieldDetails
      ProductReviewPreviousValues: ProductReviewPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      ShopWhereInput: ShopWhereInputInputObject
      UserWhereInput: UserWhereInputInputObject
      UserImageWhereInput: UserImageWhereInputInputObject
      ProductReviewWhereInput: ProductReviewWhereInputInputObject
      ProductWhereInput: ProductWhereInputInputObject
      CategoryWhereInput: CategoryWhereInputInputObject
      BrandWhereInput: BrandWhereInputInputObject
      TagWhereInput: TagWhereInputInputObject
      ProductImageWhereInput: ProductImageWhereInputInputObject
      VariantWhereInput: VariantWhereInputInputObject
      CartWhereInput: CartWhereInputInputObject
      CartItemWhereInput: CartItemWhereInputInputObject
      ForumPostWhereInput: ForumPostWhereInputInputObject
      ForumWhereInput: ForumWhereInputInputObject
      ForumPostCommentWhereInput: ForumPostCommentWhereInputInputObject
      ShopImageWhereInput: ShopImageWhereInputInputObject
      ForumWhereUniqueInput: ForumWhereUniqueInputInputObject
      ForumPostWhereUniqueInput: ForumPostWhereUniqueInputInputObject
      ForumPostCommentWhereUniqueInput: ForumPostCommentWhereUniqueInputInputObject
      ShopWhereUniqueInput: ShopWhereUniqueInputInputObject
      ShopImageWhereUniqueInput: ShopImageWhereUniqueInputInputObject
      UserImageWhereUniqueInput: UserImageWhereUniqueInputInputObject
      ProductWhereUniqueInput: ProductWhereUniqueInputInputObject
      CartWhereUniqueInput: CartWhereUniqueInputInputObject
      CartItemWhereUniqueInput: CartItemWhereUniqueInputInputObject
      orderItemWhereUniqueInput: orderItemWhereUniqueInputInputObject
      orderItemWhereInput: orderItemWhereInputInputObject
      OrderWhereUniqueInput: OrderWhereUniqueInputInputObject
      OrderWhereInput: OrderWhereInputInputObject
      BrandWhereUniqueInput: BrandWhereUniqueInputInputObject
      TagWhereUniqueInput: TagWhereUniqueInputInputObject
      CategoryWhereUniqueInput: CategoryWhereUniqueInputInputObject
      ProductImageWhereUniqueInput: ProductImageWhereUniqueInputInputObject
      VariantWhereUniqueInput: VariantWhereUniqueInputInputObject
      ProductReviewWhereUniqueInput: ProductReviewWhereUniqueInputInputObject
      UserCreateInput: UserCreateInputInputObject
      ShopCreateManyWithoutOwnersInput: ShopCreateManyWithoutOwnersInputInputObject
      ShopCreateWithoutOwnersInput: ShopCreateWithoutOwnersInputInputObject
      ShopImageCreateManyWithoutShopInput: ShopImageCreateManyWithoutShopInputInputObject
      ShopImageCreateWithoutShopInput: ShopImageCreateWithoutShopInputInputObject
      ProductCreateManyWithoutShopInput: ProductCreateManyWithoutShopInputInputObject
      ProductCreateWithoutShopInput: ProductCreateWithoutShopInputInputObject
      CategoryCreateManyWithoutProductInput: CategoryCreateManyWithoutProductInputInputObject
      CategoryCreateWithoutProductInput: CategoryCreateWithoutProductInputInputObject
      BrandCreateOneWithoutProductsInput: BrandCreateOneWithoutProductsInputInputObject
      BrandCreateWithoutProductsInput: BrandCreateWithoutProductsInputInputObject
      TagCreateManyWithoutProductsInput: TagCreateManyWithoutProductsInputInputObject
      TagCreateWithoutProductsInput: TagCreateWithoutProductsInputInputObject
      ProductImageCreateManyWithoutProductInput: ProductImageCreateManyWithoutProductInputInputObject
      ProductImageCreateWithoutProductInput: ProductImageCreateWithoutProductInputInputObject
      VariantCreateManyWithoutProductInput: VariantCreateManyWithoutProductInputInputObject
      VariantCreateWithoutProductInput: VariantCreateWithoutProductInputInputObject
      VariantCreatevaluesInput: VariantCreatevaluesInputInputObject
      ProductReviewCreateManyWithoutProductInput: ProductReviewCreateManyWithoutProductInputInputObject
      ProductReviewCreateWithoutProductInput: ProductReviewCreateWithoutProductInputInputObject
      UserCreateOneWithoutProductReviewsInput: UserCreateOneWithoutProductReviewsInputInputObject
      UserCreateWithoutProductReviewsInput: UserCreateWithoutProductReviewsInputInputObject
      UserImageCreateManyWithoutUserInput: UserImageCreateManyWithoutUserInputInputObject
      UserImageCreateWithoutUserInput: UserImageCreateWithoutUserInputInputObject
      CartCreateOneWithoutUserInput: CartCreateOneWithoutUserInputInputObject
      CartCreateWithoutUserInput: CartCreateWithoutUserInputInputObject
      CartItemCreateManyWithoutCartInput: CartItemCreateManyWithoutCartInputInputObject
      CartItemCreateWithoutCartInput: CartItemCreateWithoutCartInputInputObject
      ProductCreateOneInput: ProductCreateOneInputInputObject
      ProductCreateInput: ProductCreateInputInputObject
      ShopCreateOneWithoutProductsInput: ShopCreateOneWithoutProductsInputInputObject
      ShopCreateWithoutProductsInput: ShopCreateWithoutProductsInputInputObject
      UserCreateManyWithoutShopsInput: UserCreateManyWithoutShopsInputInputObject
      UserCreateWithoutShopsInput: UserCreateWithoutShopsInputInputObject
      ProductReviewCreateManyWithoutUserInput: ProductReviewCreateManyWithoutUserInputInputObject
      ProductReviewCreateWithoutUserInput: ProductReviewCreateWithoutUserInputInputObject
      ProductCreateOneWithoutReviewsInput: ProductCreateOneWithoutReviewsInputInputObject
      ProductCreateWithoutReviewsInput: ProductCreateWithoutReviewsInputInputObject
      ForumPostCreateManyWithoutPostedByInput: ForumPostCreateManyWithoutPostedByInputInputObject
      ForumPostCreateWithoutPostedByInput: ForumPostCreateWithoutPostedByInputInputObject
      ForumCreateOneWithoutPostsInput: ForumCreateOneWithoutPostsInputInputObject
      ForumCreateWithoutPostsInput: ForumCreateWithoutPostsInputInputObject
      UserCreateManyWithoutForumsInput: UserCreateManyWithoutForumsInputInputObject
      UserCreateWithoutForumsInput: UserCreateWithoutForumsInputInputObject
      ForumPostCommentCreateManyWithoutUserInput: ForumPostCommentCreateManyWithoutUserInputInputObject
      ForumPostCommentCreateWithoutUserInput: ForumPostCommentCreateWithoutUserInputInputObject
      ForumPostCreateOneWithoutCommentsInput: ForumPostCreateOneWithoutCommentsInputInputObject
      ForumPostCreateWithoutCommentsInput: ForumPostCreateWithoutCommentsInputInputObject
      UserCreateOneWithoutForumpostsInput: UserCreateOneWithoutForumpostsInputInputObject
      UserCreateWithoutForumpostsInput: UserCreateWithoutForumpostsInputInputObject
      ForumCreateManyWithoutMembersInput: ForumCreateManyWithoutMembersInputInputObject
      ForumCreateWithoutMembersInput: ForumCreateWithoutMembersInputInputObject
      ForumPostCreateManyWithoutForumInput: ForumPostCreateManyWithoutForumInputInputObject
      ForumPostCreateWithoutForumInput: ForumPostCreateWithoutForumInputInputObject
      ForumPostCommentCreateManyWithoutForumPostInput: ForumPostCommentCreateManyWithoutForumPostInputInputObject
      ForumPostCommentCreateWithoutForumPostInput: ForumPostCommentCreateWithoutForumPostInputInputObject
      UserCreateOneWithoutPostCommentsInput: UserCreateOneWithoutPostCommentsInputInputObject
      UserCreateWithoutPostCommentsInput: UserCreateWithoutPostCommentsInputInputObject
      CartItemCreatevariantsInput: CartItemCreatevariantsInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      ShopUpdateManyWithoutOwnersInput: ShopUpdateManyWithoutOwnersInputInputObject
      ShopUpdateWithWhereUniqueWithoutOwnersInput: ShopUpdateWithWhereUniqueWithoutOwnersInputInputObject
      ShopUpdateWithoutOwnersDataInput: ShopUpdateWithoutOwnersDataInputInputObject
      ShopImageUpdateManyWithoutShopInput: ShopImageUpdateManyWithoutShopInputInputObject
      ShopImageUpdateWithWhereUniqueWithoutShopInput: ShopImageUpdateWithWhereUniqueWithoutShopInputInputObject
      ShopImageUpdateWithoutShopDataInput: ShopImageUpdateWithoutShopDataInputInputObject
      ShopImageUpsertWithWhereUniqueWithoutShopInput: ShopImageUpsertWithWhereUniqueWithoutShopInputInputObject
      ShopImageScalarWhereInput: ShopImageScalarWhereInputInputObject
      ShopImageUpdateManyWithWhereNestedInput: ShopImageUpdateManyWithWhereNestedInputInputObject
      ShopImageUpdateManyDataInput: ShopImageUpdateManyDataInputInputObject
      ProductUpdateManyWithoutShopInput: ProductUpdateManyWithoutShopInputInputObject
      ProductUpdateWithWhereUniqueWithoutShopInput: ProductUpdateWithWhereUniqueWithoutShopInputInputObject
      ProductUpdateWithoutShopDataInput: ProductUpdateWithoutShopDataInputInputObject
      CategoryUpdateManyWithoutProductInput: CategoryUpdateManyWithoutProductInputInputObject
      CategoryUpdateWithWhereUniqueWithoutProductInput: CategoryUpdateWithWhereUniqueWithoutProductInputInputObject
      CategoryUpdateWithoutProductDataInput: CategoryUpdateWithoutProductDataInputInputObject
      CategoryUpsertWithWhereUniqueWithoutProductInput: CategoryUpsertWithWhereUniqueWithoutProductInputInputObject
      CategoryScalarWhereInput: CategoryScalarWhereInputInputObject
      CategoryUpdateManyWithWhereNestedInput: CategoryUpdateManyWithWhereNestedInputInputObject
      CategoryUpdateManyDataInput: CategoryUpdateManyDataInputInputObject
      BrandUpdateOneWithoutProductsInput: BrandUpdateOneWithoutProductsInputInputObject
      BrandUpdateWithoutProductsDataInput: BrandUpdateWithoutProductsDataInputInputObject
      BrandUpsertWithoutProductsInput: BrandUpsertWithoutProductsInputInputObject
      TagUpdateManyWithoutProductsInput: TagUpdateManyWithoutProductsInputInputObject
      TagUpdateWithWhereUniqueWithoutProductsInput: TagUpdateWithWhereUniqueWithoutProductsInputInputObject
      TagUpdateWithoutProductsDataInput: TagUpdateWithoutProductsDataInputInputObject
      TagUpsertWithWhereUniqueWithoutProductsInput: TagUpsertWithWhereUniqueWithoutProductsInputInputObject
      TagScalarWhereInput: TagScalarWhereInputInputObject
      TagUpdateManyWithWhereNestedInput: TagUpdateManyWithWhereNestedInputInputObject
      TagUpdateManyDataInput: TagUpdateManyDataInputInputObject
      ProductImageUpdateManyWithoutProductInput: ProductImageUpdateManyWithoutProductInputInputObject
      ProductImageUpdateWithWhereUniqueWithoutProductInput: ProductImageUpdateWithWhereUniqueWithoutProductInputInputObject
      ProductImageUpdateWithoutProductDataInput: ProductImageUpdateWithoutProductDataInputInputObject
      ProductImageUpsertWithWhereUniqueWithoutProductInput: ProductImageUpsertWithWhereUniqueWithoutProductInputInputObject
      ProductImageScalarWhereInput: ProductImageScalarWhereInputInputObject
      ProductImageUpdateManyWithWhereNestedInput: ProductImageUpdateManyWithWhereNestedInputInputObject
      ProductImageUpdateManyDataInput: ProductImageUpdateManyDataInputInputObject
      VariantUpdateManyWithoutProductInput: VariantUpdateManyWithoutProductInputInputObject
      VariantUpdateWithWhereUniqueWithoutProductInput: VariantUpdateWithWhereUniqueWithoutProductInputInputObject
      VariantUpdateWithoutProductDataInput: VariantUpdateWithoutProductDataInputInputObject
      VariantUpdatevaluesInput: VariantUpdatevaluesInputInputObject
      VariantUpsertWithWhereUniqueWithoutProductInput: VariantUpsertWithWhereUniqueWithoutProductInputInputObject
      VariantScalarWhereInput: VariantScalarWhereInputInputObject
      VariantUpdateManyWithWhereNestedInput: VariantUpdateManyWithWhereNestedInputInputObject
      VariantUpdateManyDataInput: VariantUpdateManyDataInputInputObject
      ProductReviewUpdateManyWithoutProductInput: ProductReviewUpdateManyWithoutProductInputInputObject
      ProductReviewUpdateWithWhereUniqueWithoutProductInput: ProductReviewUpdateWithWhereUniqueWithoutProductInputInputObject
      ProductReviewUpdateWithoutProductDataInput: ProductReviewUpdateWithoutProductDataInputInputObject
      UserUpdateOneRequiredWithoutProductReviewsInput: UserUpdateOneRequiredWithoutProductReviewsInputInputObject
      UserUpdateWithoutProductReviewsDataInput: UserUpdateWithoutProductReviewsDataInputInputObject
      UserImageUpdateManyWithoutUserInput: UserImageUpdateManyWithoutUserInputInputObject
      UserImageUpdateWithWhereUniqueWithoutUserInput: UserImageUpdateWithWhereUniqueWithoutUserInputInputObject
      UserImageUpdateWithoutUserDataInput: UserImageUpdateWithoutUserDataInputInputObject
      UserImageUpsertWithWhereUniqueWithoutUserInput: UserImageUpsertWithWhereUniqueWithoutUserInputInputObject
      UserImageScalarWhereInput: UserImageScalarWhereInputInputObject
      UserImageUpdateManyWithWhereNestedInput: UserImageUpdateManyWithWhereNestedInputInputObject
      UserImageUpdateManyDataInput: UserImageUpdateManyDataInputInputObject
      CartUpdateOneWithoutUserInput: CartUpdateOneWithoutUserInputInputObject
      CartUpdateWithoutUserDataInput: CartUpdateWithoutUserDataInputInputObject
      CartItemUpdateManyWithoutCartInput: CartItemUpdateManyWithoutCartInputInputObject
      CartItemUpdateWithWhereUniqueWithoutCartInput: CartItemUpdateWithWhereUniqueWithoutCartInputInputObject
      CartItemUpdateWithoutCartDataInput: CartItemUpdateWithoutCartDataInputInputObject
      ProductUpdateOneRequiredInput: ProductUpdateOneRequiredInputInputObject
      ProductUpdateDataInput: ProductUpdateDataInputInputObject
      ShopUpdateOneRequiredWithoutProductsInput: ShopUpdateOneRequiredWithoutProductsInputInputObject
      ShopUpdateWithoutProductsDataInput: ShopUpdateWithoutProductsDataInputInputObject
      UserUpdateManyWithoutShopsInput: UserUpdateManyWithoutShopsInputInputObject
      UserUpdateWithWhereUniqueWithoutShopsInput: UserUpdateWithWhereUniqueWithoutShopsInputInputObject
      UserUpdateWithoutShopsDataInput: UserUpdateWithoutShopsDataInputInputObject
      ProductReviewUpdateManyWithoutUserInput: ProductReviewUpdateManyWithoutUserInputInputObject
      ProductReviewUpdateWithWhereUniqueWithoutUserInput: ProductReviewUpdateWithWhereUniqueWithoutUserInputInputObject
      ProductReviewUpdateWithoutUserDataInput: ProductReviewUpdateWithoutUserDataInputInputObject
      ProductUpdateOneRequiredWithoutReviewsInput: ProductUpdateOneRequiredWithoutReviewsInputInputObject
      ProductUpdateWithoutReviewsDataInput: ProductUpdateWithoutReviewsDataInputInputObject
      ProductUpsertWithoutReviewsInput: ProductUpsertWithoutReviewsInputInputObject
      ProductReviewUpsertWithWhereUniqueWithoutUserInput: ProductReviewUpsertWithWhereUniqueWithoutUserInputInputObject
      ProductReviewScalarWhereInput: ProductReviewScalarWhereInputInputObject
      ProductReviewUpdateManyWithWhereNestedInput: ProductReviewUpdateManyWithWhereNestedInputInputObject
      ProductReviewUpdateManyDataInput: ProductReviewUpdateManyDataInputInputObject
      ForumPostUpdateManyWithoutPostedByInput: ForumPostUpdateManyWithoutPostedByInputInputObject
      ForumPostUpdateWithWhereUniqueWithoutPostedByInput: ForumPostUpdateWithWhereUniqueWithoutPostedByInputInputObject
      ForumPostUpdateWithoutPostedByDataInput: ForumPostUpdateWithoutPostedByDataInputInputObject
      ForumUpdateOneRequiredWithoutPostsInput: ForumUpdateOneRequiredWithoutPostsInputInputObject
      ForumUpdateWithoutPostsDataInput: ForumUpdateWithoutPostsDataInputInputObject
      UserUpdateManyWithoutForumsInput: UserUpdateManyWithoutForumsInputInputObject
      UserUpdateWithWhereUniqueWithoutForumsInput: UserUpdateWithWhereUniqueWithoutForumsInputInputObject
      UserUpdateWithoutForumsDataInput: UserUpdateWithoutForumsDataInputInputObject
      ForumPostCommentUpdateManyWithoutUserInput: ForumPostCommentUpdateManyWithoutUserInputInputObject
      ForumPostCommentUpdateWithWhereUniqueWithoutUserInput: ForumPostCommentUpdateWithWhereUniqueWithoutUserInputInputObject
      ForumPostCommentUpdateWithoutUserDataInput: ForumPostCommentUpdateWithoutUserDataInputInputObject
      ForumPostUpdateOneRequiredWithoutCommentsInput: ForumPostUpdateOneRequiredWithoutCommentsInputInputObject
      ForumPostUpdateWithoutCommentsDataInput: ForumPostUpdateWithoutCommentsDataInputInputObject
      UserUpdateOneRequiredWithoutForumpostsInput: UserUpdateOneRequiredWithoutForumpostsInputInputObject
      UserUpdateWithoutForumpostsDataInput: UserUpdateWithoutForumpostsDataInputInputObject
      ForumUpdateManyWithoutMembersInput: ForumUpdateManyWithoutMembersInputInputObject
      ForumUpdateWithWhereUniqueWithoutMembersInput: ForumUpdateWithWhereUniqueWithoutMembersInputInputObject
      ForumUpdateWithoutMembersDataInput: ForumUpdateWithoutMembersDataInputInputObject
      ForumPostUpdateManyWithoutForumInput: ForumPostUpdateManyWithoutForumInputInputObject
      ForumPostUpdateWithWhereUniqueWithoutForumInput: ForumPostUpdateWithWhereUniqueWithoutForumInputInputObject
      ForumPostUpdateWithoutForumDataInput: ForumPostUpdateWithoutForumDataInputInputObject
      ForumPostCommentUpdateManyWithoutForumPostInput: ForumPostCommentUpdateManyWithoutForumPostInputInputObject
      ForumPostCommentUpdateWithWhereUniqueWithoutForumPostInput: ForumPostCommentUpdateWithWhereUniqueWithoutForumPostInputInputObject
      ForumPostCommentUpdateWithoutForumPostDataInput: ForumPostCommentUpdateWithoutForumPostDataInputInputObject
      UserUpdateOneRequiredWithoutPostCommentsInput: UserUpdateOneRequiredWithoutPostCommentsInputInputObject
      UserUpdateWithoutPostCommentsDataInput: UserUpdateWithoutPostCommentsDataInputInputObject
      UserUpsertWithoutPostCommentsInput: UserUpsertWithoutPostCommentsInputInputObject
      ForumPostCommentUpsertWithWhereUniqueWithoutForumPostInput: ForumPostCommentUpsertWithWhereUniqueWithoutForumPostInputInputObject
      ForumPostCommentScalarWhereInput: ForumPostCommentScalarWhereInputInputObject
      ForumPostCommentUpdateManyWithWhereNestedInput: ForumPostCommentUpdateManyWithWhereNestedInputInputObject
      ForumPostCommentUpdateManyDataInput: ForumPostCommentUpdateManyDataInputInputObject
      ForumPostUpsertWithWhereUniqueWithoutForumInput: ForumPostUpsertWithWhereUniqueWithoutForumInputInputObject
      ForumPostScalarWhereInput: ForumPostScalarWhereInputInputObject
      ForumPostUpdateManyWithWhereNestedInput: ForumPostUpdateManyWithWhereNestedInputInputObject
      ForumPostUpdateManyDataInput: ForumPostUpdateManyDataInputInputObject
      ForumUpsertWithWhereUniqueWithoutMembersInput: ForumUpsertWithWhereUniqueWithoutMembersInputInputObject
      ForumScalarWhereInput: ForumScalarWhereInputInputObject
      ForumUpdateManyWithWhereNestedInput: ForumUpdateManyWithWhereNestedInputInputObject
      ForumUpdateManyDataInput: ForumUpdateManyDataInputInputObject
      UserUpsertWithoutForumpostsInput: UserUpsertWithoutForumpostsInputInputObject
      ForumPostUpsertWithoutCommentsInput: ForumPostUpsertWithoutCommentsInputInputObject
      ForumPostCommentUpsertWithWhereUniqueWithoutUserInput: ForumPostCommentUpsertWithWhereUniqueWithoutUserInputInputObject
      UserUpsertWithWhereUniqueWithoutForumsInput: UserUpsertWithWhereUniqueWithoutForumsInputInputObject
      UserScalarWhereInput: UserScalarWhereInputInputObject
      UserUpdateManyWithWhereNestedInput: UserUpdateManyWithWhereNestedInputInputObject
      UserUpdateManyDataInput: UserUpdateManyDataInputInputObject
      ForumUpsertWithoutPostsInput: ForumUpsertWithoutPostsInputInputObject
      ForumPostUpsertWithWhereUniqueWithoutPostedByInput: ForumPostUpsertWithWhereUniqueWithoutPostedByInputInputObject
      UserUpsertWithWhereUniqueWithoutShopsInput: UserUpsertWithWhereUniqueWithoutShopsInputInputObject
      ShopUpsertWithoutProductsInput: ShopUpsertWithoutProductsInputInputObject
      ProductUpsertNestedInput: ProductUpsertNestedInputInputObject
      CartItemUpdatevariantsInput: CartItemUpdatevariantsInputInputObject
      CartItemUpsertWithWhereUniqueWithoutCartInput: CartItemUpsertWithWhereUniqueWithoutCartInputInputObject
      CartItemScalarWhereInput: CartItemScalarWhereInputInputObject
      CartItemUpdateManyWithWhereNestedInput: CartItemUpdateManyWithWhereNestedInputInputObject
      CartItemUpdateManyDataInput: CartItemUpdateManyDataInputInputObject
      CartUpsertWithoutUserInput: CartUpsertWithoutUserInputInputObject
      UserUpsertWithoutProductReviewsInput: UserUpsertWithoutProductReviewsInputInputObject
      ProductReviewUpsertWithWhereUniqueWithoutProductInput: ProductReviewUpsertWithWhereUniqueWithoutProductInputInputObject
      ProductUpsertWithWhereUniqueWithoutShopInput: ProductUpsertWithWhereUniqueWithoutShopInputInputObject
      ProductScalarWhereInput: ProductScalarWhereInputInputObject
      ProductUpdateManyWithWhereNestedInput: ProductUpdateManyWithWhereNestedInputInputObject
      ProductUpdateManyDataInput: ProductUpdateManyDataInputInputObject
      ShopUpsertWithWhereUniqueWithoutOwnersInput: ShopUpsertWithWhereUniqueWithoutOwnersInputInputObject
      ShopScalarWhereInput: ShopScalarWhereInputInputObject
      ShopUpdateManyWithWhereNestedInput: ShopUpdateManyWithWhereNestedInputInputObject
      ShopUpdateManyDataInput: ShopUpdateManyDataInputInputObject
      UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
      ForumCreateInput: ForumCreateInputInputObject
      ForumUpdateInput: ForumUpdateInputInputObject
      ForumUpdateManyMutationInput: ForumUpdateManyMutationInputInputObject
      ForumPostCreateInput: ForumPostCreateInputInputObject
      ForumPostUpdateInput: ForumPostUpdateInputInputObject
      ForumPostUpdateManyMutationInput: ForumPostUpdateManyMutationInputInputObject
      ForumPostCommentCreateInput: ForumPostCommentCreateInputInputObject
      ForumPostCommentUpdateInput: ForumPostCommentUpdateInputInputObject
      ForumPostCommentUpdateManyMutationInput: ForumPostCommentUpdateManyMutationInputInputObject
      ShopCreateInput: ShopCreateInputInputObject
      ShopUpdateInput: ShopUpdateInputInputObject
      ShopUpdateManyMutationInput: ShopUpdateManyMutationInputInputObject
      ShopImageCreateInput: ShopImageCreateInputInputObject
      ShopCreateOneWithoutImagesInput: ShopCreateOneWithoutImagesInputInputObject
      ShopCreateWithoutImagesInput: ShopCreateWithoutImagesInputInputObject
      ShopImageUpdateInput: ShopImageUpdateInputInputObject
      ShopUpdateOneWithoutImagesInput: ShopUpdateOneWithoutImagesInputInputObject
      ShopUpdateWithoutImagesDataInput: ShopUpdateWithoutImagesDataInputInputObject
      ShopUpsertWithoutImagesInput: ShopUpsertWithoutImagesInputInputObject
      ShopImageUpdateManyMutationInput: ShopImageUpdateManyMutationInputInputObject
      UserImageCreateInput: UserImageCreateInputInputObject
      UserCreateOneWithoutImagesInput: UserCreateOneWithoutImagesInputInputObject
      UserCreateWithoutImagesInput: UserCreateWithoutImagesInputInputObject
      UserImageUpdateInput: UserImageUpdateInputInputObject
      UserUpdateOneWithoutImagesInput: UserUpdateOneWithoutImagesInputInputObject
      UserUpdateWithoutImagesDataInput: UserUpdateWithoutImagesDataInputInputObject
      UserUpsertWithoutImagesInput: UserUpsertWithoutImagesInputInputObject
      UserImageUpdateManyMutationInput: UserImageUpdateManyMutationInputInputObject
      ProductUpdateInput: ProductUpdateInputInputObject
      ProductUpdateManyMutationInput: ProductUpdateManyMutationInputInputObject
      CartCreateInput: CartCreateInputInputObject
      UserCreateOneWithoutCartItemsInput: UserCreateOneWithoutCartItemsInputInputObject
      UserCreateWithoutCartItemsInput: UserCreateWithoutCartItemsInputInputObject
      CartUpdateInput: CartUpdateInputInputObject
      UserUpdateOneRequiredWithoutCartItemsInput: UserUpdateOneRequiredWithoutCartItemsInputInputObject
      UserUpdateWithoutCartItemsDataInput: UserUpdateWithoutCartItemsDataInputInputObject
      UserUpsertWithoutCartItemsInput: UserUpsertWithoutCartItemsInputInputObject
      CartItemCreateInput: CartItemCreateInputInputObject
      CartCreateOneWithoutItemsInput: CartCreateOneWithoutItemsInputInputObject
      CartCreateWithoutItemsInput: CartCreateWithoutItemsInputInputObject
      CartItemUpdateInput: CartItemUpdateInputInputObject
      CartUpdateOneRequiredWithoutItemsInput: CartUpdateOneRequiredWithoutItemsInputInputObject
      CartUpdateWithoutItemsDataInput: CartUpdateWithoutItemsDataInputInputObject
      CartUpsertWithoutItemsInput: CartUpsertWithoutItemsInputInputObject
      CartItemUpdateManyMutationInput: CartItemUpdateManyMutationInputInputObject
      orderItemCreateInput: orderItemCreateInputInputObject
      orderItemCreatevariantsInput: orderItemCreatevariantsInputInputObject
      orderItemUpdateInput: orderItemUpdateInputInputObject
      orderItemUpdatevariantsInput: orderItemUpdatevariantsInputInputObject
      orderItemUpdateManyMutationInput: orderItemUpdateManyMutationInputInputObject
      OrderCreateInput: OrderCreateInputInputObject
      orderItemCreateManyInput: orderItemCreateManyInputInputObject
      UserCreateOneInput: UserCreateOneInputInputObject
      OrderUpdateInput: OrderUpdateInputInputObject
      orderItemUpdateManyInput: orderItemUpdateManyInputInputObject
      orderItemUpdateWithWhereUniqueNestedInput: orderItemUpdateWithWhereUniqueNestedInputInputObject
      orderItemUpdateDataInput: orderItemUpdateDataInputInputObject
      orderItemUpsertWithWhereUniqueNestedInput: orderItemUpsertWithWhereUniqueNestedInputInputObject
      orderItemScalarWhereInput: orderItemScalarWhereInputInputObject
      orderItemUpdateManyWithWhereNestedInput: orderItemUpdateManyWithWhereNestedInputInputObject
      orderItemUpdateManyDataInput: orderItemUpdateManyDataInputInputObject
      UserUpdateOneRequiredInput: UserUpdateOneRequiredInputInputObject
      UserUpdateDataInput: UserUpdateDataInputInputObject
      UserUpsertNestedInput: UserUpsertNestedInputInputObject
      OrderUpdateManyMutationInput: OrderUpdateManyMutationInputInputObject
      BrandCreateInput: BrandCreateInputInputObject
      ProductCreateManyWithoutBrandInput: ProductCreateManyWithoutBrandInputInputObject
      ProductCreateWithoutBrandInput: ProductCreateWithoutBrandInputInputObject
      BrandUpdateInput: BrandUpdateInputInputObject
      ProductUpdateManyWithoutBrandInput: ProductUpdateManyWithoutBrandInputInputObject
      ProductUpdateWithWhereUniqueWithoutBrandInput: ProductUpdateWithWhereUniqueWithoutBrandInputInputObject
      ProductUpdateWithoutBrandDataInput: ProductUpdateWithoutBrandDataInputInputObject
      ProductUpsertWithWhereUniqueWithoutBrandInput: ProductUpsertWithWhereUniqueWithoutBrandInputInputObject
      BrandUpdateManyMutationInput: BrandUpdateManyMutationInputInputObject
      TagCreateInput: TagCreateInputInputObject
      ProductCreateManyWithoutTagsInput: ProductCreateManyWithoutTagsInputInputObject
      ProductCreateWithoutTagsInput: ProductCreateWithoutTagsInputInputObject
      TagUpdateInput: TagUpdateInputInputObject
      ProductUpdateManyWithoutTagsInput: ProductUpdateManyWithoutTagsInputInputObject
      ProductUpdateWithWhereUniqueWithoutTagsInput: ProductUpdateWithWhereUniqueWithoutTagsInputInputObject
      ProductUpdateWithoutTagsDataInput: ProductUpdateWithoutTagsDataInputInputObject
      ProductUpsertWithWhereUniqueWithoutTagsInput: ProductUpsertWithWhereUniqueWithoutTagsInputInputObject
      TagUpdateManyMutationInput: TagUpdateManyMutationInputInputObject
      CategoryCreateInput: CategoryCreateInputInputObject
      ProductCreateManyWithoutCategoriesInput: ProductCreateManyWithoutCategoriesInputInputObject
      ProductCreateWithoutCategoriesInput: ProductCreateWithoutCategoriesInputInputObject
      CategoryUpdateInput: CategoryUpdateInputInputObject
      ProductUpdateManyWithoutCategoriesInput: ProductUpdateManyWithoutCategoriesInputInputObject
      ProductUpdateWithWhereUniqueWithoutCategoriesInput: ProductUpdateWithWhereUniqueWithoutCategoriesInputInputObject
      ProductUpdateWithoutCategoriesDataInput: ProductUpdateWithoutCategoriesDataInputInputObject
      ProductUpsertWithWhereUniqueWithoutCategoriesInput: ProductUpsertWithWhereUniqueWithoutCategoriesInputInputObject
      CategoryUpdateManyMutationInput: CategoryUpdateManyMutationInputInputObject
      ProductImageCreateInput: ProductImageCreateInputInputObject
      ProductCreateOneWithoutImagesInput: ProductCreateOneWithoutImagesInputInputObject
      ProductCreateWithoutImagesInput: ProductCreateWithoutImagesInputInputObject
      ProductImageUpdateInput: ProductImageUpdateInputInputObject
      ProductUpdateOneWithoutImagesInput: ProductUpdateOneWithoutImagesInputInputObject
      ProductUpdateWithoutImagesDataInput: ProductUpdateWithoutImagesDataInputInputObject
      ProductUpsertWithoutImagesInput: ProductUpsertWithoutImagesInputInputObject
      ProductImageUpdateManyMutationInput: ProductImageUpdateManyMutationInputInputObject
      VariantCreateInput: VariantCreateInputInputObject
      ProductCreateOneWithoutVariantsInput: ProductCreateOneWithoutVariantsInputInputObject
      ProductCreateWithoutVariantsInput: ProductCreateWithoutVariantsInputInputObject
      VariantUpdateInput: VariantUpdateInputInputObject
      ProductUpdateOneRequiredWithoutVariantsInput: ProductUpdateOneRequiredWithoutVariantsInputInputObject
      ProductUpdateWithoutVariantsDataInput: ProductUpdateWithoutVariantsDataInputInputObject
      ProductUpsertWithoutVariantsInput: ProductUpsertWithoutVariantsInputInputObject
      VariantUpdateManyMutationInput: VariantUpdateManyMutationInputInputObject
      ProductReviewCreateInput: ProductReviewCreateInputInputObject
      ProductReviewUpdateInput: ProductReviewUpdateInputInputObject
      ProductReviewUpdateManyMutationInput: ProductReviewUpdateManyMutationInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
      ForumSubscriptionWhereInput: ForumSubscriptionWhereInputInputObject
      ForumPostSubscriptionWhereInput: ForumPostSubscriptionWhereInputInputObject
      ForumPostCommentSubscriptionWhereInput: ForumPostCommentSubscriptionWhereInputInputObject
      ShopSubscriptionWhereInput: ShopSubscriptionWhereInputInputObject
      ShopImageSubscriptionWhereInput: ShopImageSubscriptionWhereInputInputObject
      UserImageSubscriptionWhereInput: UserImageSubscriptionWhereInputInputObject
      ProductSubscriptionWhereInput: ProductSubscriptionWhereInputInputObject
      CartSubscriptionWhereInput: CartSubscriptionWhereInputInputObject
      CartItemSubscriptionWhereInput: CartItemSubscriptionWhereInputInputObject
      orderItemSubscriptionWhereInput: orderItemSubscriptionWhereInputInputObject
      OrderSubscriptionWhereInput: OrderSubscriptionWhereInputInputObject
      BrandSubscriptionWhereInput: BrandSubscriptionWhereInputInputObject
      TagSubscriptionWhereInput: TagSubscriptionWhereInputInputObject
      CategorySubscriptionWhereInput: CategorySubscriptionWhereInputInputObject
      ProductImageSubscriptionWhereInput: ProductImageSubscriptionWhereInputInputObject
      VariantSubscriptionWhereInput: VariantSubscriptionWhereInputInputObject
      ProductReviewSubscriptionWhereInput: ProductReviewSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    ForumPostType: ForumPostTypeValues,
    ShopOrderByInput: ShopOrderByInputValues,
    UserOrderByInput: UserOrderByInputValues,
    ShopImageOrderByInput: ShopImageOrderByInputValues,
    ProductOrderByInput: ProductOrderByInputValues,
    CategoryOrderByInput: CategoryOrderByInputValues,
    TagOrderByInput: TagOrderByInputValues,
    ProductImageOrderByInput: ProductImageOrderByInputValues,
    VariantOrderByInput: VariantOrderByInputValues,
    ProductReviewOrderByInput: ProductReviewOrderByInputValues,
    UserImageOrderByInput: UserImageOrderByInputValues,
    CartItemOrderByInput: CartItemOrderByInputValues,
    ForumPostOrderByInput: ForumPostOrderByInputValues,
    ForumPostCommentOrderByInput: ForumPostCommentOrderByInputValues,
    ForumOrderByInput: ForumOrderByInputValues,
    CartOrderByInput: CartOrderByInputValues,
    orderItemOrderByInput: orderItemOrderByInputValues,
    OrderOrderByInput: OrderOrderByInputValues,
    BrandOrderByInput: BrandOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'users', args?: QueryUsersArgs[] | false, alias?: string  } 
  | { name: 'usersConnection', args?: QueryUsersConnectionArgs[] | false, alias?: string  } 
  | { name: 'forum', args?: QueryForumArgs[] | false, alias?: string  } 
  | { name: 'forums', args?: QueryForumsArgs[] | false, alias?: string  } 
  | { name: 'forumsConnection', args?: QueryForumsConnectionArgs[] | false, alias?: string  } 
  | { name: 'forumPost', args?: QueryForumPostArgs[] | false, alias?: string  } 
  | { name: 'forumPosts', args?: QueryForumPostsArgs[] | false, alias?: string  } 
  | { name: 'forumPostsConnection', args?: QueryForumPostsConnectionArgs[] | false, alias?: string  } 
  | { name: 'forumPostComment', args?: QueryForumPostCommentArgs[] | false, alias?: string  } 
  | { name: 'forumPostComments', args?: QueryForumPostCommentsArgs[] | false, alias?: string  } 
  | { name: 'forumPostCommentsConnection', args?: QueryForumPostCommentsConnectionArgs[] | false, alias?: string  } 
  | { name: 'shop', args?: QueryShopArgs[] | false, alias?: string  } 
  | { name: 'shops', args?: QueryShopsArgs[] | false, alias?: string  } 
  | { name: 'shopsConnection', args?: QueryShopsConnectionArgs[] | false, alias?: string  } 
  | { name: 'shopImage', args?: QueryShopImageArgs[] | false, alias?: string  } 
  | { name: 'shopImages', args?: QueryShopImagesArgs[] | false, alias?: string  } 
  | { name: 'shopImagesConnection', args?: QueryShopImagesConnectionArgs[] | false, alias?: string  } 
  | { name: 'userImage', args?: QueryUserImageArgs[] | false, alias?: string  } 
  | { name: 'userImages', args?: QueryUserImagesArgs[] | false, alias?: string  } 
  | { name: 'userImagesConnection', args?: QueryUserImagesConnectionArgs[] | false, alias?: string  } 
  | { name: 'product', args?: QueryProductArgs[] | false, alias?: string  } 
  | { name: 'products', args?: QueryProductsArgs[] | false, alias?: string  } 
  | { name: 'productsConnection', args?: QueryProductsConnectionArgs[] | false, alias?: string  } 
  | { name: 'cart', args?: QueryCartArgs[] | false, alias?: string  } 
  | { name: 'carts', args?: QueryCartsArgs[] | false, alias?: string  } 
  | { name: 'cartsConnection', args?: QueryCartsConnectionArgs[] | false, alias?: string  } 
  | { name: 'cartItem', args?: QueryCartItemArgs[] | false, alias?: string  } 
  | { name: 'cartItems', args?: QueryCartItemsArgs[] | false, alias?: string  } 
  | { name: 'cartItemsConnection', args?: QueryCartItemsConnectionArgs[] | false, alias?: string  } 
  | { name: 'orderItem', args?: QueryOrderItemArgs[] | false, alias?: string  } 
  | { name: 'orderItems', args?: QueryOrderItemsArgs[] | false, alias?: string  } 
  | { name: 'orderItemsConnection', args?: QueryOrderItemsConnectionArgs[] | false, alias?: string  } 
  | { name: 'order', args?: QueryOrderArgs[] | false, alias?: string  } 
  | { name: 'orders', args?: QueryOrdersArgs[] | false, alias?: string  } 
  | { name: 'ordersConnection', args?: QueryOrdersConnectionArgs[] | false, alias?: string  } 
  | { name: 'brand', args?: QueryBrandArgs[] | false, alias?: string  } 
  | { name: 'brands', args?: QueryBrandsArgs[] | false, alias?: string  } 
  | { name: 'brandsConnection', args?: QueryBrandsConnectionArgs[] | false, alias?: string  } 
  | { name: 'tag', args?: QueryTagArgs[] | false, alias?: string  } 
  | { name: 'tags', args?: QueryTagsArgs[] | false, alias?: string  } 
  | { name: 'tagsConnection', args?: QueryTagsConnectionArgs[] | false, alias?: string  } 
  | { name: 'category', args?: QueryCategoryArgs[] | false, alias?: string  } 
  | { name: 'categories', args?: QueryCategoriesArgs[] | false, alias?: string  } 
  | { name: 'categoriesConnection', args?: QueryCategoriesConnectionArgs[] | false, alias?: string  } 
  | { name: 'productImage', args?: QueryProductImageArgs[] | false, alias?: string  } 
  | { name: 'productImages', args?: QueryProductImagesArgs[] | false, alias?: string  } 
  | { name: 'productImagesConnection', args?: QueryProductImagesConnectionArgs[] | false, alias?: string  } 
  | { name: 'variant', args?: QueryVariantArgs[] | false, alias?: string  } 
  | { name: 'variants', args?: QueryVariantsArgs[] | false, alias?: string  } 
  | { name: 'variantsConnection', args?: QueryVariantsConnectionArgs[] | false, alias?: string  } 
  | { name: 'productReview', args?: QueryProductReviewArgs[] | false, alias?: string  } 
  | { name: 'productReviews', args?: QueryProductReviewsArgs[] | false, alias?: string  } 
  | { name: 'productReviewsConnection', args?: QueryProductReviewsConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'user'
  | 'users'
  | 'usersConnection'
  | 'forum'
  | 'forums'
  | 'forumsConnection'
  | 'forumPost'
  | 'forumPosts'
  | 'forumPostsConnection'
  | 'forumPostComment'
  | 'forumPostComments'
  | 'forumPostCommentsConnection'
  | 'shop'
  | 'shops'
  | 'shopsConnection'
  | 'shopImage'
  | 'shopImages'
  | 'shopImagesConnection'
  | 'userImage'
  | 'userImages'
  | 'userImagesConnection'
  | 'product'
  | 'products'
  | 'productsConnection'
  | 'cart'
  | 'carts'
  | 'cartsConnection'
  | 'cartItem'
  | 'cartItems'
  | 'cartItemsConnection'
  | 'orderItem'
  | 'orderItems'
  | 'orderItemsConnection'
  | 'order'
  | 'orders'
  | 'ordersConnection'
  | 'brand'
  | 'brands'
  | 'brandsConnection'
  | 'tag'
  | 'tags'
  | 'tagsConnection'
  | 'category'
  | 'categories'
  | 'categoriesConnection'
  | 'productImage'
  | 'productImages'
  | 'productImagesConnection'
  | 'variant'
  | 'variants'
  | 'variantsConnection'
  | 'productReview'
  | 'productReviews'
  | 'productReviewsConnection'


type QueryUserArgs =
  | 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryForumArgs =
  | 'where'
type QueryForumsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryForumsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryForumPostArgs =
  | 'where'
type QueryForumPostsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryForumPostsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryForumPostCommentArgs =
  | 'where'
type QueryForumPostCommentsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryForumPostCommentsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryShopArgs =
  | 'where'
type QueryShopsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryShopsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryShopImageArgs =
  | 'where'
type QueryShopImagesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryShopImagesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUserImageArgs =
  | 'where'
type QueryUserImagesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUserImagesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProductArgs =
  | 'where'
type QueryProductsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProductsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCartArgs =
  | 'where'
type QueryCartsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCartsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCartItemArgs =
  | 'where'
type QueryCartItemsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCartItemsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryOrderItemArgs =
  | 'where'
type QueryOrderItemsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryOrderItemsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryOrderArgs =
  | 'where'
type QueryOrdersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryOrdersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryBrandArgs =
  | 'where'
type QueryBrandsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryBrandsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTagArgs =
  | 'where'
type QueryTagsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTagsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCategoryArgs =
  | 'where'
type QueryCategoriesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCategoriesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProductImageArgs =
  | 'where'
type QueryProductImagesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProductImagesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryVariantArgs =
  | 'where'
type QueryVariantsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryVariantsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProductReviewArgs =
  | 'where'
type QueryProductReviewsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProductReviewsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
  forum: {
    type: 'Forum'
    args: Record<QueryForumArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ForumWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Forum | null> | prisma.Forum | null
  }
  forums: {
    type: 'Forum'
    args: Record<QueryForumsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ForumWhereInput | null, orderBy?: prisma.ForumOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Forum[]> | prisma.Forum[]
  }
  forumsConnection: {
    type: 'ForumConnection'
    args: Record<QueryForumsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ForumWhereInput | null, orderBy?: prisma.ForumOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ForumConnection> | prisma.ForumConnection
  }
  forumPost: {
    type: 'ForumPost'
    args: Record<QueryForumPostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ForumPostWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ForumPost | null> | prisma.ForumPost | null
  }
  forumPosts: {
    type: 'ForumPost'
    args: Record<QueryForumPostsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ForumPostWhereInput | null, orderBy?: prisma.ForumPostOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ForumPost[]> | prisma.ForumPost[]
  }
  forumPostsConnection: {
    type: 'ForumPostConnection'
    args: Record<QueryForumPostsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ForumPostWhereInput | null, orderBy?: prisma.ForumPostOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ForumPostConnection> | prisma.ForumPostConnection
  }
  forumPostComment: {
    type: 'ForumPostComment'
    args: Record<QueryForumPostCommentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ForumPostCommentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ForumPostComment | null> | prisma.ForumPostComment | null
  }
  forumPostComments: {
    type: 'ForumPostComment'
    args: Record<QueryForumPostCommentsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ForumPostCommentWhereInput | null, orderBy?: prisma.ForumPostCommentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ForumPostComment[]> | prisma.ForumPostComment[]
  }
  forumPostCommentsConnection: {
    type: 'ForumPostCommentConnection'
    args: Record<QueryForumPostCommentsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ForumPostCommentWhereInput | null, orderBy?: prisma.ForumPostCommentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ForumPostCommentConnection> | prisma.ForumPostCommentConnection
  }
  shop: {
    type: 'Shop'
    args: Record<QueryShopArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ShopWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Shop | null> | prisma.Shop | null
  }
  shops: {
    type: 'Shop'
    args: Record<QueryShopsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ShopWhereInput | null, orderBy?: prisma.ShopOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Shop[]> | prisma.Shop[]
  }
  shopsConnection: {
    type: 'ShopConnection'
    args: Record<QueryShopsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ShopWhereInput | null, orderBy?: prisma.ShopOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ShopConnection> | prisma.ShopConnection
  }
  shopImage: {
    type: 'ShopImage'
    args: Record<QueryShopImageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ShopImageWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ShopImage | null> | prisma.ShopImage | null
  }
  shopImages: {
    type: 'ShopImage'
    args: Record<QueryShopImagesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ShopImageWhereInput | null, orderBy?: prisma.ShopImageOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ShopImage[]> | prisma.ShopImage[]
  }
  shopImagesConnection: {
    type: 'ShopImageConnection'
    args: Record<QueryShopImagesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ShopImageWhereInput | null, orderBy?: prisma.ShopImageOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ShopImageConnection> | prisma.ShopImageConnection
  }
  userImage: {
    type: 'UserImage'
    args: Record<QueryUserImageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserImageWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserImage | null> | prisma.UserImage | null
  }
  userImages: {
    type: 'UserImage'
    args: Record<QueryUserImagesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserImageWhereInput | null, orderBy?: prisma.UserImageOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserImage[]> | prisma.UserImage[]
  }
  userImagesConnection: {
    type: 'UserImageConnection'
    args: Record<QueryUserImagesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserImageWhereInput | null, orderBy?: prisma.UserImageOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserImageConnection> | prisma.UserImageConnection
  }
  product: {
    type: 'Product'
    args: Record<QueryProductArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ProductWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product | null> | prisma.Product | null
  }
  products: {
    type: 'Product'
    args: Record<QueryProductsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProductWhereInput | null, orderBy?: prisma.ProductOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product[]> | prisma.Product[]
  }
  productsConnection: {
    type: 'ProductConnection'
    args: Record<QueryProductsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProductWhereInput | null, orderBy?: prisma.ProductOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductConnection> | prisma.ProductConnection
  }
  cart: {
    type: 'Cart'
    args: Record<QueryCartArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: CartWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Cart | null> | prisma.Cart | null
  }
  carts: {
    type: 'Cart'
    args: Record<QueryCartsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CartWhereInput | null, orderBy?: prisma.CartOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Cart[]> | prisma.Cart[]
  }
  cartsConnection: {
    type: 'CartConnection'
    args: Record<QueryCartsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CartWhereInput | null, orderBy?: prisma.CartOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CartConnection> | prisma.CartConnection
  }
  cartItem: {
    type: 'CartItem'
    args: Record<QueryCartItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: CartItemWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CartItem | null> | prisma.CartItem | null
  }
  cartItems: {
    type: 'CartItem'
    args: Record<QueryCartItemsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CartItemWhereInput | null, orderBy?: prisma.CartItemOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CartItem[]> | prisma.CartItem[]
  }
  cartItemsConnection: {
    type: 'CartItemConnection'
    args: Record<QueryCartItemsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CartItemWhereInput | null, orderBy?: prisma.CartItemOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CartItemConnection> | prisma.CartItemConnection
  }
  orderItem: {
    type: 'orderItem'
    args: Record<QueryOrderItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: orderItemWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.orderItem | null> | prisma.orderItem | null
  }
  orderItems: {
    type: 'orderItem'
    args: Record<QueryOrderItemsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: orderItemWhereInput | null, orderBy?: prisma.orderItemOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.orderItem[]> | prisma.orderItem[]
  }
  orderItemsConnection: {
    type: 'orderItemConnection'
    args: Record<QueryOrderItemsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: orderItemWhereInput | null, orderBy?: prisma.orderItemOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.orderItemConnection> | prisma.orderItemConnection
  }
  order: {
    type: 'Order'
    args: Record<QueryOrderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: OrderWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Order | null> | prisma.Order | null
  }
  orders: {
    type: 'Order'
    args: Record<QueryOrdersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: OrderWhereInput | null, orderBy?: prisma.OrderOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Order[]> | prisma.Order[]
  }
  ordersConnection: {
    type: 'OrderConnection'
    args: Record<QueryOrdersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: OrderWhereInput | null, orderBy?: prisma.OrderOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderConnection> | prisma.OrderConnection
  }
  brand: {
    type: 'Brand'
    args: Record<QueryBrandArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: BrandWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Brand | null> | prisma.Brand | null
  }
  brands: {
    type: 'Brand'
    args: Record<QueryBrandsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: BrandWhereInput | null, orderBy?: prisma.BrandOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Brand[]> | prisma.Brand[]
  }
  brandsConnection: {
    type: 'BrandConnection'
    args: Record<QueryBrandsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: BrandWhereInput | null, orderBy?: prisma.BrandOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BrandConnection> | prisma.BrandConnection
  }
  tag: {
    type: 'Tag'
    args: Record<QueryTagArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: TagWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tag | null> | prisma.Tag | null
  }
  tags: {
    type: 'Tag'
    args: Record<QueryTagsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TagWhereInput | null, orderBy?: prisma.TagOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tag[]> | prisma.Tag[]
  }
  tagsConnection: {
    type: 'TagConnection'
    args: Record<QueryTagsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TagWhereInput | null, orderBy?: prisma.TagOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TagConnection> | prisma.TagConnection
  }
  category: {
    type: 'Category'
    args: Record<QueryCategoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: CategoryWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Category | null> | prisma.Category | null
  }
  categories: {
    type: 'Category'
    args: Record<QueryCategoriesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CategoryWhereInput | null, orderBy?: prisma.CategoryOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Category[]> | prisma.Category[]
  }
  categoriesConnection: {
    type: 'CategoryConnection'
    args: Record<QueryCategoriesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CategoryWhereInput | null, orderBy?: prisma.CategoryOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CategoryConnection> | prisma.CategoryConnection
  }
  productImage: {
    type: 'ProductImage'
    args: Record<QueryProductImageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ProductImageWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductImage | null> | prisma.ProductImage | null
  }
  productImages: {
    type: 'ProductImage'
    args: Record<QueryProductImagesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProductImageWhereInput | null, orderBy?: prisma.ProductImageOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductImage[]> | prisma.ProductImage[]
  }
  productImagesConnection: {
    type: 'ProductImageConnection'
    args: Record<QueryProductImagesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProductImageWhereInput | null, orderBy?: prisma.ProductImageOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductImageConnection> | prisma.ProductImageConnection
  }
  variant: {
    type: 'Variant'
    args: Record<QueryVariantArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: VariantWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Variant | null> | prisma.Variant | null
  }
  variants: {
    type: 'Variant'
    args: Record<QueryVariantsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: VariantWhereInput | null, orderBy?: prisma.VariantOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Variant[]> | prisma.Variant[]
  }
  variantsConnection: {
    type: 'VariantConnection'
    args: Record<QueryVariantsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: VariantWhereInput | null, orderBy?: prisma.VariantOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.VariantConnection> | prisma.VariantConnection
  }
  productReview: {
    type: 'ProductReview'
    args: Record<QueryProductReviewArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ProductReviewWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductReview | null> | prisma.ProductReview | null
  }
  productReviews: {
    type: 'ProductReview'
    args: Record<QueryProductReviewsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProductReviewWhereInput | null, orderBy?: prisma.ProductReviewOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductReview[]> | prisma.ProductReview[]
  }
  productReviewsConnection: {
    type: 'ProductReviewConnection'
    args: Record<QueryProductReviewsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProductReviewWhereInput | null, orderBy?: prisma.ProductReviewOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductReviewConnection> | prisma.ProductReviewConnection
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'firebaseId', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'username', args?: [] | false, alias?: string  } 
  | { name: 'profilePic', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'isAnonymous', args?: [] | false, alias?: string  } 
  | { name: 'emailVerified', args?: [] | false, alias?: string  } 
  | { name: 'shops', args?: UserShopsArgs[] | false, alias?: string  } 
  | { name: 'images', args?: UserImagesArgs[] | false, alias?: string  } 
  | { name: 'productReviews', args?: UserProductReviewsArgs[] | false, alias?: string  } 
  | { name: 'cartItems', args?: [] | false, alias?: string  } 
  | { name: 'forumposts', args?: UserForumpostsArgs[] | false, alias?: string  } 
  | { name: 'forums', args?: UserForumsArgs[] | false, alias?: string  } 
  | { name: 'postComments', args?: UserPostCommentsArgs[] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'firebaseId'
  | 'email'
  | 'name'
  | 'username'
  | 'profilePic'
  | 'createdAt'
  | 'updatedAt'
  | 'isAnonymous'
  | 'emailVerified'
  | 'shops'
  | 'images'
  | 'productReviews'
  | 'cartItems'
  | 'forumposts'
  | 'forums'
  | 'postComments'


type UserShopsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type UserImagesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type UserProductReviewsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type UserForumpostsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type UserForumsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type UserPostCommentsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface UserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  firebaseId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  username: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  profilePic: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  isAnonymous: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  emailVerified: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  shops: {
    type: 'Shop'
    args: Record<UserShopsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: ShopWhereInput | null, orderBy?: prisma.ShopOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Shop[]> | prisma.Shop[]
  }
  images: {
    type: 'UserImage'
    args: Record<UserImagesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: UserImageWhereInput | null, orderBy?: prisma.UserImageOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserImage[]> | prisma.UserImage[]
  }
  productReviews: {
    type: 'ProductReview'
    args: Record<UserProductReviewsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: ProductReviewWhereInput | null, orderBy?: prisma.ProductReviewOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductReview[]> | prisma.ProductReview[]
  }
  cartItems: {
    type: 'Cart'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"User">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Cart | null> | prisma.Cart | null
  }
  forumposts: {
    type: 'ForumPost'
    args: Record<UserForumpostsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: ForumPostWhereInput | null, orderBy?: prisma.ForumPostOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ForumPost[]> | prisma.ForumPost[]
  }
  forums: {
    type: 'Forum'
    args: Record<UserForumsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: ForumWhereInput | null, orderBy?: prisma.ForumOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Forum[]> | prisma.Forum[]
  }
  postComments: {
    type: 'ForumPostComment'
    args: Record<UserPostCommentsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: ForumPostCommentWhereInput | null, orderBy?: prisma.ForumPostCommentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ForumPostComment[]> | prisma.ForumPostComment[]
  }
}
  

// Types for Shop

type ShopObject =
  | ShopFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'category', args?: [] | false, alias?: string  } 
  | { name: 'live', args?: [] | false, alias?: string  } 
  | { name: 'owners', args?: ShopOwnersArgs[] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'images', args?: ShopImagesArgs[] | false, alias?: string  } 
  | { name: 'products', args?: ShopProductsArgs[] | false, alias?: string  } 

type ShopFields =
  | 'id'
  | 'name'
  | 'description'
  | 'category'
  | 'live'
  | 'owners'
  | 'createdAt'
  | 'updatedAt'
  | 'images'
  | 'products'


type ShopOwnersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type ShopImagesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type ShopProductsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface ShopFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  category: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  live: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  owners: {
    type: 'User'
    args: Record<ShopOwnersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Shop">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  images: {
    type: 'ShopImage'
    args: Record<ShopImagesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Shop">,
      args: { where?: ShopImageWhereInput | null, orderBy?: prisma.ShopImageOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ShopImage[]> | prisma.ShopImage[]
  }
  products: {
    type: 'Product'
    args: Record<ShopProductsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Shop">,
      args: { where?: ProductWhereInput | null, orderBy?: prisma.ProductOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product[]> | prisma.Product[]
  }
}
  

// Types for ShopImage

type ShopImageObject =
  | ShopImageFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'imageUrl', args?: [] | false, alias?: string  } 
  | { name: 'largeImageUrl', args?: [] | false, alias?: string  } 
  | { name: 'shop', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type ShopImageFields =
  | 'id'
  | 'imageUrl'
  | 'largeImageUrl'
  | 'shop'
  | 'createdAt'
  | 'updatedAt'



  

export interface ShopImageFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  imageUrl: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  largeImageUrl: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  shop: {
    type: 'Shop'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ShopImage">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Shop | null> | prisma.Shop | null
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Product

type ProductObject =
  | ProductFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'price', args?: [] | false, alias?: string  } 
  | { name: 'categories', args?: ProductCategoriesArgs[] | false, alias?: string  } 
  | { name: 'brand', args?: [] | false, alias?: string  } 
  | { name: 'tags', args?: ProductTagsArgs[] | false, alias?: string  } 
  | { name: 'images', args?: ProductImagesArgs[] | false, alias?: string  } 
  | { name: 'shop', args?: [] | false, alias?: string  } 
  | { name: 'variants', args?: ProductVariantsArgs[] | false, alias?: string  } 
  | { name: 'reviews', args?: ProductReviewsArgs[] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type ProductFields =
  | 'id'
  | 'title'
  | 'description'
  | 'price'
  | 'categories'
  | 'brand'
  | 'tags'
  | 'images'
  | 'shop'
  | 'variants'
  | 'reviews'
  | 'createdAt'
  | 'updatedAt'


type ProductCategoriesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type ProductTagsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type ProductImagesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type ProductVariantsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type ProductReviewsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface ProductFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  price: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  categories: {
    type: 'Category'
    args: Record<ProductCategoriesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Product">,
      args: { where?: CategoryWhereInput | null, orderBy?: prisma.CategoryOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Category[]> | prisma.Category[]
  }
  brand: {
    type: 'Brand'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Product">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Brand | null> | prisma.Brand | null
  }
  tags: {
    type: 'Tag'
    args: Record<ProductTagsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Product">,
      args: { where?: TagWhereInput | null, orderBy?: prisma.TagOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tag[]> | prisma.Tag[]
  }
  images: {
    type: 'ProductImage'
    args: Record<ProductImagesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Product">,
      args: { where?: ProductImageWhereInput | null, orderBy?: prisma.ProductImageOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductImage[]> | prisma.ProductImage[]
  }
  shop: {
    type: 'Shop'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Product">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Shop> | prisma.Shop
  }
  variants: {
    type: 'Variant'
    args: Record<ProductVariantsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Product">,
      args: { where?: VariantWhereInput | null, orderBy?: prisma.VariantOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Variant[]> | prisma.Variant[]
  }
  reviews: {
    type: 'ProductReview'
    args: Record<ProductReviewsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Product">,
      args: { where?: ProductReviewWhereInput | null, orderBy?: prisma.ProductReviewOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductReview[]> | prisma.ProductReview[]
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Category

type CategoryObject =
  | CategoryFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'product', args?: CategoryProductArgs[] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type CategoryFields =
  | 'id'
  | 'name'
  | 'product'
  | 'createdAt'
  | 'updatedAt'


type CategoryProductArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface CategoryFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  product: {
    type: 'Product'
    args: Record<CategoryProductArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Category">,
      args: { where?: ProductWhereInput | null, orderBy?: prisma.ProductOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product[]> | prisma.Product[]
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Brand

type BrandObject =
  | BrandFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'products', args?: BrandProductsArgs[] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type BrandFields =
  | 'id'
  | 'name'
  | 'products'
  | 'createdAt'
  | 'updatedAt'


type BrandProductsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface BrandFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  products: {
    type: 'Product'
    args: Record<BrandProductsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Brand">,
      args: { where?: ProductWhereInput | null, orderBy?: prisma.ProductOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product[]> | prisma.Product[]
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Tag

type TagObject =
  | TagFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'products', args?: TagProductsArgs[] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type TagFields =
  | 'id'
  | 'name'
  | 'products'
  | 'createdAt'
  | 'updatedAt'


type TagProductsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface TagFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  products: {
    type: 'Product'
    args: Record<TagProductsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Tag">,
      args: { where?: ProductWhereInput | null, orderBy?: prisma.ProductOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product[]> | prisma.Product[]
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProductImage

type ProductImageObject =
  | ProductImageFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'imageUrl', args?: [] | false, alias?: string  } 
  | { name: 'largeImageUrl', args?: [] | false, alias?: string  } 
  | { name: 'product', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type ProductImageFields =
  | 'id'
  | 'imageUrl'
  | 'largeImageUrl'
  | 'product'
  | 'createdAt'
  | 'updatedAt'



  

export interface ProductImageFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  imageUrl: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  largeImageUrl: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  product: {
    type: 'Product'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProductImage">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product | null> | prisma.Product | null
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Variant

type VariantObject =
  | VariantFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'product', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'values', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type VariantFields =
  | 'id'
  | 'product'
  | 'name'
  | 'values'
  | 'createdAt'
  | 'updatedAt'



  

export interface VariantFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  product: {
    type: 'Product'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Variant">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product> | prisma.Product
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  values: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProductReview

type ProductReviewObject =
  | ProductReviewFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'user', args?: [] | false, alias?: string  } 
  | { name: 'product', args?: [] | false, alias?: string  } 
  | { name: 'rating', args?: [] | false, alias?: string  } 
  | { name: 'review', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type ProductReviewFields =
  | 'id'
  | 'user'
  | 'product'
  | 'rating'
  | 'review'
  | 'createdAt'
  | 'updatedAt'



  

export interface ProductReviewFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  user: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProductReview">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  product: {
    type: 'Product'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProductReview">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product> | prisma.Product
  }
  rating: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  review: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for UserImage

type UserImageObject =
  | UserImageFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'imageUrl', args?: [] | false, alias?: string  } 
  | { name: 'user', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type UserImageFields =
  | 'id'
  | 'imageUrl'
  | 'user'
  | 'createdAt'
  | 'updatedAt'



  

export interface UserImageFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  imageUrl: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  user: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserImage">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Cart

type CartObject =
  | CartFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'user', args?: [] | false, alias?: string  } 
  | { name: 'items', args?: CartItemsArgs[] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type CartFields =
  | 'id'
  | 'user'
  | 'items'
  | 'createdAt'
  | 'updatedAt'


type CartItemsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface CartFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  user: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Cart">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  items: {
    type: 'CartItem'
    args: Record<CartItemsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Cart">,
      args: { where?: CartItemWhereInput | null, orderBy?: prisma.CartItemOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CartItem[]> | prisma.CartItem[]
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CartItem

type CartItemObject =
  | CartItemFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'product', args?: [] | false, alias?: string  } 
  | { name: 'quantity', args?: [] | false, alias?: string  } 
  | { name: 'variants', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'cart', args?: [] | false, alias?: string  } 

type CartItemFields =
  | 'id'
  | 'product'
  | 'quantity'
  | 'variants'
  | 'createdAt'
  | 'updatedAt'
  | 'cart'



  

export interface CartItemFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  product: {
    type: 'Product'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CartItem">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product> | prisma.Product
  }
  quantity: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  variants: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  cart: {
    type: 'Cart'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CartItem">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Cart> | prisma.Cart
  }
}
  

// Types for ForumPost

type ForumPostObject =
  | ForumPostFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'postedBy', args?: [] | false, alias?: string  } 
  | { name: 'forum', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'content', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'comments', args?: ForumPostCommentsArgs[] | false, alias?: string  } 

type ForumPostFields =
  | 'id'
  | 'postedBy'
  | 'forum'
  | 'createdAt'
  | 'updatedAt'
  | 'title'
  | 'content'
  | 'type'
  | 'comments'


type ForumPostCommentsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface ForumPostFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  postedBy: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ForumPost">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  forum: {
    type: 'Forum'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ForumPost">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Forum> | prisma.Forum
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  content: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  type: {
    type: 'ForumPostType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ForumPost">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ForumPostType> | prisma.ForumPostType
  }
  comments: {
    type: 'ForumPostComment'
    args: Record<ForumPostCommentsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ForumPost">,
      args: { where?: ForumPostCommentWhereInput | null, orderBy?: prisma.ForumPostCommentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ForumPostComment[]> | prisma.ForumPostComment[]
  }
}
  

// Types for Forum

type ForumObject =
  | ForumFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'avatarPic', args?: [] | false, alias?: string  } 
  | { name: 'coverPic', args?: [] | false, alias?: string  } 
  | { name: 'members', args?: ForumMembersArgs[] | false, alias?: string  } 
  | { name: 'posts', args?: ForumPostsArgs[] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type ForumFields =
  | 'id'
  | 'avatarPic'
  | 'coverPic'
  | 'members'
  | 'posts'
  | 'name'
  | 'description'
  | 'createdAt'
  | 'updatedAt'


type ForumMembersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type ForumPostsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface ForumFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  avatarPic: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  coverPic: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  members: {
    type: 'User'
    args: Record<ForumMembersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Forum">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  posts: {
    type: 'ForumPost'
    args: Record<ForumPostsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Forum">,
      args: { where?: ForumPostWhereInput | null, orderBy?: prisma.ForumPostOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ForumPost[]> | prisma.ForumPost[]
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ForumPostComment

type ForumPostCommentObject =
  | ForumPostCommentFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'user', args?: [] | false, alias?: string  } 
  | { name: 'forumPost', args?: [] | false, alias?: string  } 
  | { name: 'comment', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type ForumPostCommentFields =
  | 'id'
  | 'user'
  | 'forumPost'
  | 'comment'
  | 'createdAt'
  | 'updatedAt'



  

export interface ForumPostCommentFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  user: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ForumPostComment">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  forumPost: {
    type: 'ForumPost'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ForumPostComment">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ForumPost> | prisma.ForumPost
  }
  comment: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserFields =
  | 'count'



  

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ForumConnection

type ForumConnectionObject =
  | ForumConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ForumConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ForumConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ForumConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ForumEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ForumConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ForumEdge[]> | prisma.ForumEdge[]
  }
  aggregate: {
    type: 'AggregateForum'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ForumConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateForum> | prisma.AggregateForum
  }
}
  

// Types for ForumEdge

type ForumEdgeObject =
  | ForumEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ForumEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ForumEdgeFieldDetails {
  node: {
    type: 'Forum'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ForumEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Forum> | prisma.Forum
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateForum

type AggregateForumObject =
  | AggregateForumFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateForumFields =
  | 'count'



  

export interface AggregateForumFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ForumPostConnection

type ForumPostConnectionObject =
  | ForumPostConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ForumPostConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ForumPostConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ForumPostConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ForumPostEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ForumPostConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ForumPostEdge[]> | prisma.ForumPostEdge[]
  }
  aggregate: {
    type: 'AggregateForumPost'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ForumPostConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateForumPost> | prisma.AggregateForumPost
  }
}
  

// Types for ForumPostEdge

type ForumPostEdgeObject =
  | ForumPostEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ForumPostEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ForumPostEdgeFieldDetails {
  node: {
    type: 'ForumPost'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ForumPostEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ForumPost> | prisma.ForumPost
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateForumPost

type AggregateForumPostObject =
  | AggregateForumPostFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateForumPostFields =
  | 'count'



  

export interface AggregateForumPostFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ForumPostCommentConnection

type ForumPostCommentConnectionObject =
  | ForumPostCommentConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ForumPostCommentConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ForumPostCommentConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ForumPostCommentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ForumPostCommentEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ForumPostCommentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ForumPostCommentEdge[]> | prisma.ForumPostCommentEdge[]
  }
  aggregate: {
    type: 'AggregateForumPostComment'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ForumPostCommentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateForumPostComment> | prisma.AggregateForumPostComment
  }
}
  

// Types for ForumPostCommentEdge

type ForumPostCommentEdgeObject =
  | ForumPostCommentEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ForumPostCommentEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ForumPostCommentEdgeFieldDetails {
  node: {
    type: 'ForumPostComment'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ForumPostCommentEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ForumPostComment> | prisma.ForumPostComment
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateForumPostComment

type AggregateForumPostCommentObject =
  | AggregateForumPostCommentFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateForumPostCommentFields =
  | 'count'



  

export interface AggregateForumPostCommentFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ShopConnection

type ShopConnectionObject =
  | ShopConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ShopConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ShopConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ShopConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ShopEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ShopConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ShopEdge[]> | prisma.ShopEdge[]
  }
  aggregate: {
    type: 'AggregateShop'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ShopConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateShop> | prisma.AggregateShop
  }
}
  

// Types for ShopEdge

type ShopEdgeObject =
  | ShopEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ShopEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ShopEdgeFieldDetails {
  node: {
    type: 'Shop'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ShopEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Shop> | prisma.Shop
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateShop

type AggregateShopObject =
  | AggregateShopFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateShopFields =
  | 'count'



  

export interface AggregateShopFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ShopImageConnection

type ShopImageConnectionObject =
  | ShopImageConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ShopImageConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ShopImageConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ShopImageConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ShopImageEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ShopImageConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ShopImageEdge[]> | prisma.ShopImageEdge[]
  }
  aggregate: {
    type: 'AggregateShopImage'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ShopImageConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateShopImage> | prisma.AggregateShopImage
  }
}
  

// Types for ShopImageEdge

type ShopImageEdgeObject =
  | ShopImageEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ShopImageEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ShopImageEdgeFieldDetails {
  node: {
    type: 'ShopImage'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ShopImageEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ShopImage> | prisma.ShopImage
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateShopImage

type AggregateShopImageObject =
  | AggregateShopImageFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateShopImageFields =
  | 'count'



  

export interface AggregateShopImageFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for UserImageConnection

type UserImageConnectionObject =
  | UserImageConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserImageConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserImageConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserImageConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserImageEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserImageConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserImageEdge[]> | prisma.UserImageEdge[]
  }
  aggregate: {
    type: 'AggregateUserImage'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserImageConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUserImage> | prisma.AggregateUserImage
  }
}
  

// Types for UserImageEdge

type UserImageEdgeObject =
  | UserImageEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserImageEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserImageEdgeFieldDetails {
  node: {
    type: 'UserImage'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserImageEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserImage> | prisma.UserImage
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUserImage

type AggregateUserImageObject =
  | AggregateUserImageFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserImageFields =
  | 'count'



  

export interface AggregateUserImageFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProductConnection

type ProductConnectionObject =
  | ProductConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ProductConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ProductConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProductConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ProductEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ProductConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductEdge[]> | prisma.ProductEdge[]
  }
  aggregate: {
    type: 'AggregateProduct'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProductConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateProduct> | prisma.AggregateProduct
  }
}
  

// Types for ProductEdge

type ProductEdgeObject =
  | ProductEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ProductEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ProductEdgeFieldDetails {
  node: {
    type: 'Product'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProductEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product> | prisma.Product
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateProduct

type AggregateProductObject =
  | AggregateProductFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateProductFields =
  | 'count'



  

export interface AggregateProductFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CartConnection

type CartConnectionObject =
  | CartConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type CartConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface CartConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CartConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'CartEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"CartConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CartEdge[]> | prisma.CartEdge[]
  }
  aggregate: {
    type: 'AggregateCart'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CartConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateCart> | prisma.AggregateCart
  }
}
  

// Types for CartEdge

type CartEdgeObject =
  | CartEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type CartEdgeFields =
  | 'node'
  | 'cursor'



  

export interface CartEdgeFieldDetails {
  node: {
    type: 'Cart'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CartEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Cart> | prisma.Cart
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateCart

type AggregateCartObject =
  | AggregateCartFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateCartFields =
  | 'count'



  

export interface AggregateCartFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CartItemConnection

type CartItemConnectionObject =
  | CartItemConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type CartItemConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface CartItemConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CartItemConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'CartItemEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"CartItemConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CartItemEdge[]> | prisma.CartItemEdge[]
  }
  aggregate: {
    type: 'AggregateCartItem'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CartItemConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateCartItem> | prisma.AggregateCartItem
  }
}
  

// Types for CartItemEdge

type CartItemEdgeObject =
  | CartItemEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type CartItemEdgeFields =
  | 'node'
  | 'cursor'



  

export interface CartItemEdgeFieldDetails {
  node: {
    type: 'CartItem'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CartItemEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CartItem> | prisma.CartItem
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateCartItem

type AggregateCartItemObject =
  | AggregateCartItemFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateCartItemFields =
  | 'count'



  

export interface AggregateCartItemFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for orderItem

type orderItemObject =
  | orderItemFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'price', args?: [] | false, alias?: string  } 
  | { name: 'quantity', args?: [] | false, alias?: string  } 
  | { name: 'imageUrl', args?: [] | false, alias?: string  } 
  | { name: 'variants', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type orderItemFields =
  | 'id'
  | 'title'
  | 'description'
  | 'price'
  | 'quantity'
  | 'imageUrl'
  | 'variants'
  | 'createdAt'
  | 'updatedAt'



  

export interface orderItemFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  price: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  quantity: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  imageUrl: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  variants: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for orderItemConnection

type orderItemConnectionObject =
  | orderItemConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type orderItemConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface orderItemConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"orderItemConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'orderItemEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"orderItemConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.orderItemEdge[]> | prisma.orderItemEdge[]
  }
  aggregate: {
    type: 'AggregateorderItem'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"orderItemConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateorderItem> | prisma.AggregateorderItem
  }
}
  

// Types for orderItemEdge

type orderItemEdgeObject =
  | orderItemEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type orderItemEdgeFields =
  | 'node'
  | 'cursor'



  

export interface orderItemEdgeFieldDetails {
  node: {
    type: 'orderItem'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"orderItemEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.orderItem> | prisma.orderItem
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateorderItem

type AggregateorderItemObject =
  | AggregateorderItemFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateorderItemFields =
  | 'count'



  

export interface AggregateorderItemFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Order

type OrderObject =
  | OrderFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'items', args?: OrderItemsArgs[] | false, alias?: string  } 
  | { name: 'total', args?: [] | false, alias?: string  } 
  | { name: 'user', args?: [] | false, alias?: string  } 
  | { name: 'paymentId', args?: [] | false, alias?: string  } 
  | { name: 'PayerID', args?: [] | false, alias?: string  } 
  | { name: 'imageUrl', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type OrderFields =
  | 'id'
  | 'items'
  | 'total'
  | 'user'
  | 'paymentId'
  | 'PayerID'
  | 'imageUrl'
  | 'createdAt'
  | 'updatedAt'


type OrderItemsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface OrderFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  items: {
    type: 'orderItem'
    args: Record<OrderItemsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Order">,
      args: { where?: orderItemWhereInput | null, orderBy?: prisma.orderItemOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.orderItem[]> | prisma.orderItem[]
  }
  total: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  user: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Order">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  paymentId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  PayerID: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  imageUrl: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for OrderConnection

type OrderConnectionObject =
  | OrderConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type OrderConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface OrderConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OrderConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'OrderEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"OrderConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderEdge[]> | prisma.OrderEdge[]
  }
  aggregate: {
    type: 'AggregateOrder'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OrderConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateOrder> | prisma.AggregateOrder
  }
}
  

// Types for OrderEdge

type OrderEdgeObject =
  | OrderEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type OrderEdgeFields =
  | 'node'
  | 'cursor'



  

export interface OrderEdgeFieldDetails {
  node: {
    type: 'Order'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OrderEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Order> | prisma.Order
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateOrder

type AggregateOrderObject =
  | AggregateOrderFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateOrderFields =
  | 'count'



  

export interface AggregateOrderFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for BrandConnection

type BrandConnectionObject =
  | BrandConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type BrandConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface BrandConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BrandConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'BrandEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"BrandConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BrandEdge[]> | prisma.BrandEdge[]
  }
  aggregate: {
    type: 'AggregateBrand'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BrandConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateBrand> | prisma.AggregateBrand
  }
}
  

// Types for BrandEdge

type BrandEdgeObject =
  | BrandEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type BrandEdgeFields =
  | 'node'
  | 'cursor'



  

export interface BrandEdgeFieldDetails {
  node: {
    type: 'Brand'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BrandEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Brand> | prisma.Brand
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateBrand

type AggregateBrandObject =
  | AggregateBrandFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateBrandFields =
  | 'count'



  

export interface AggregateBrandFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TagConnection

type TagConnectionObject =
  | TagConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type TagConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface TagConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TagConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'TagEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"TagConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TagEdge[]> | prisma.TagEdge[]
  }
  aggregate: {
    type: 'AggregateTag'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TagConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateTag> | prisma.AggregateTag
  }
}
  

// Types for TagEdge

type TagEdgeObject =
  | TagEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type TagEdgeFields =
  | 'node'
  | 'cursor'



  

export interface TagEdgeFieldDetails {
  node: {
    type: 'Tag'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TagEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tag> | prisma.Tag
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateTag

type AggregateTagObject =
  | AggregateTagFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateTagFields =
  | 'count'



  

export interface AggregateTagFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CategoryConnection

type CategoryConnectionObject =
  | CategoryConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type CategoryConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface CategoryConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CategoryConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'CategoryEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"CategoryConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CategoryEdge[]> | prisma.CategoryEdge[]
  }
  aggregate: {
    type: 'AggregateCategory'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CategoryConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateCategory> | prisma.AggregateCategory
  }
}
  

// Types for CategoryEdge

type CategoryEdgeObject =
  | CategoryEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type CategoryEdgeFields =
  | 'node'
  | 'cursor'



  

export interface CategoryEdgeFieldDetails {
  node: {
    type: 'Category'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CategoryEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Category> | prisma.Category
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateCategory

type AggregateCategoryObject =
  | AggregateCategoryFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateCategoryFields =
  | 'count'



  

export interface AggregateCategoryFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProductImageConnection

type ProductImageConnectionObject =
  | ProductImageConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ProductImageConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ProductImageConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProductImageConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ProductImageEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ProductImageConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductImageEdge[]> | prisma.ProductImageEdge[]
  }
  aggregate: {
    type: 'AggregateProductImage'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProductImageConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateProductImage> | prisma.AggregateProductImage
  }
}
  

// Types for ProductImageEdge

type ProductImageEdgeObject =
  | ProductImageEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ProductImageEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ProductImageEdgeFieldDetails {
  node: {
    type: 'ProductImage'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProductImageEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductImage> | prisma.ProductImage
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateProductImage

type AggregateProductImageObject =
  | AggregateProductImageFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateProductImageFields =
  | 'count'



  

export interface AggregateProductImageFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for VariantConnection

type VariantConnectionObject =
  | VariantConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type VariantConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface VariantConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"VariantConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'VariantEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"VariantConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.VariantEdge[]> | prisma.VariantEdge[]
  }
  aggregate: {
    type: 'AggregateVariant'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"VariantConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateVariant> | prisma.AggregateVariant
  }
}
  

// Types for VariantEdge

type VariantEdgeObject =
  | VariantEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type VariantEdgeFields =
  | 'node'
  | 'cursor'



  

export interface VariantEdgeFieldDetails {
  node: {
    type: 'Variant'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"VariantEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Variant> | prisma.Variant
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateVariant

type AggregateVariantObject =
  | AggregateVariantFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateVariantFields =
  | 'count'



  

export interface AggregateVariantFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProductReviewConnection

type ProductReviewConnectionObject =
  | ProductReviewConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ProductReviewConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ProductReviewConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProductReviewConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ProductReviewEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ProductReviewConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductReviewEdge[]> | prisma.ProductReviewEdge[]
  }
  aggregate: {
    type: 'AggregateProductReview'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProductReviewConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateProductReview> | prisma.AggregateProductReview
  }
}
  

// Types for ProductReviewEdge

type ProductReviewEdgeObject =
  | ProductReviewEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ProductReviewEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ProductReviewEdgeFieldDetails {
  node: {
    type: 'ProductReview'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProductReviewEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductReview> | prisma.ProductReview
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateProductReview

type AggregateProductReviewObject =
  | AggregateProductReviewFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateProductReviewFields =
  | 'count'



  

export interface AggregateProductReviewFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createUser', args?: MutationCreateUserArgs[] | false, alias?: string  } 
  | { name: 'updateUser', args?: MutationUpdateUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyUsers', args?: MutationUpdateManyUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertUser', args?: MutationUpsertUserArgs[] | false, alias?: string  } 
  | { name: 'deleteUser', args?: MutationDeleteUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUsers', args?: MutationDeleteManyUsersArgs[] | false, alias?: string  } 
  | { name: 'createForum', args?: MutationCreateForumArgs[] | false, alias?: string  } 
  | { name: 'updateForum', args?: MutationUpdateForumArgs[] | false, alias?: string  } 
  | { name: 'updateManyForums', args?: MutationUpdateManyForumsArgs[] | false, alias?: string  } 
  | { name: 'upsertForum', args?: MutationUpsertForumArgs[] | false, alias?: string  } 
  | { name: 'deleteForum', args?: MutationDeleteForumArgs[] | false, alias?: string  } 
  | { name: 'deleteManyForums', args?: MutationDeleteManyForumsArgs[] | false, alias?: string  } 
  | { name: 'createForumPost', args?: MutationCreateForumPostArgs[] | false, alias?: string  } 
  | { name: 'updateForumPost', args?: MutationUpdateForumPostArgs[] | false, alias?: string  } 
  | { name: 'updateManyForumPosts', args?: MutationUpdateManyForumPostsArgs[] | false, alias?: string  } 
  | { name: 'upsertForumPost', args?: MutationUpsertForumPostArgs[] | false, alias?: string  } 
  | { name: 'deleteForumPost', args?: MutationDeleteForumPostArgs[] | false, alias?: string  } 
  | { name: 'deleteManyForumPosts', args?: MutationDeleteManyForumPostsArgs[] | false, alias?: string  } 
  | { name: 'createForumPostComment', args?: MutationCreateForumPostCommentArgs[] | false, alias?: string  } 
  | { name: 'updateForumPostComment', args?: MutationUpdateForumPostCommentArgs[] | false, alias?: string  } 
  | { name: 'updateManyForumPostComments', args?: MutationUpdateManyForumPostCommentsArgs[] | false, alias?: string  } 
  | { name: 'upsertForumPostComment', args?: MutationUpsertForumPostCommentArgs[] | false, alias?: string  } 
  | { name: 'deleteForumPostComment', args?: MutationDeleteForumPostCommentArgs[] | false, alias?: string  } 
  | { name: 'deleteManyForumPostComments', args?: MutationDeleteManyForumPostCommentsArgs[] | false, alias?: string  } 
  | { name: 'createShop', args?: MutationCreateShopArgs[] | false, alias?: string  } 
  | { name: 'updateShop', args?: MutationUpdateShopArgs[] | false, alias?: string  } 
  | { name: 'updateManyShops', args?: MutationUpdateManyShopsArgs[] | false, alias?: string  } 
  | { name: 'upsertShop', args?: MutationUpsertShopArgs[] | false, alias?: string  } 
  | { name: 'deleteShop', args?: MutationDeleteShopArgs[] | false, alias?: string  } 
  | { name: 'deleteManyShops', args?: MutationDeleteManyShopsArgs[] | false, alias?: string  } 
  | { name: 'createShopImage', args?: MutationCreateShopImageArgs[] | false, alias?: string  } 
  | { name: 'updateShopImage', args?: MutationUpdateShopImageArgs[] | false, alias?: string  } 
  | { name: 'updateManyShopImages', args?: MutationUpdateManyShopImagesArgs[] | false, alias?: string  } 
  | { name: 'upsertShopImage', args?: MutationUpsertShopImageArgs[] | false, alias?: string  } 
  | { name: 'deleteShopImage', args?: MutationDeleteShopImageArgs[] | false, alias?: string  } 
  | { name: 'deleteManyShopImages', args?: MutationDeleteManyShopImagesArgs[] | false, alias?: string  } 
  | { name: 'createUserImage', args?: MutationCreateUserImageArgs[] | false, alias?: string  } 
  | { name: 'updateUserImage', args?: MutationUpdateUserImageArgs[] | false, alias?: string  } 
  | { name: 'updateManyUserImages', args?: MutationUpdateManyUserImagesArgs[] | false, alias?: string  } 
  | { name: 'upsertUserImage', args?: MutationUpsertUserImageArgs[] | false, alias?: string  } 
  | { name: 'deleteUserImage', args?: MutationDeleteUserImageArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUserImages', args?: MutationDeleteManyUserImagesArgs[] | false, alias?: string  } 
  | { name: 'createProduct', args?: MutationCreateProductArgs[] | false, alias?: string  } 
  | { name: 'updateProduct', args?: MutationUpdateProductArgs[] | false, alias?: string  } 
  | { name: 'updateManyProducts', args?: MutationUpdateManyProductsArgs[] | false, alias?: string  } 
  | { name: 'upsertProduct', args?: MutationUpsertProductArgs[] | false, alias?: string  } 
  | { name: 'deleteProduct', args?: MutationDeleteProductArgs[] | false, alias?: string  } 
  | { name: 'deleteManyProducts', args?: MutationDeleteManyProductsArgs[] | false, alias?: string  } 
  | { name: 'createCart', args?: MutationCreateCartArgs[] | false, alias?: string  } 
  | { name: 'updateCart', args?: MutationUpdateCartArgs[] | false, alias?: string  } 
  | { name: 'upsertCart', args?: MutationUpsertCartArgs[] | false, alias?: string  } 
  | { name: 'deleteCart', args?: MutationDeleteCartArgs[] | false, alias?: string  } 
  | { name: 'deleteManyCarts', args?: MutationDeleteManyCartsArgs[] | false, alias?: string  } 
  | { name: 'createCartItem', args?: MutationCreateCartItemArgs[] | false, alias?: string  } 
  | { name: 'updateCartItem', args?: MutationUpdateCartItemArgs[] | false, alias?: string  } 
  | { name: 'updateManyCartItems', args?: MutationUpdateManyCartItemsArgs[] | false, alias?: string  } 
  | { name: 'upsertCartItem', args?: MutationUpsertCartItemArgs[] | false, alias?: string  } 
  | { name: 'deleteCartItem', args?: MutationDeleteCartItemArgs[] | false, alias?: string  } 
  | { name: 'deleteManyCartItems', args?: MutationDeleteManyCartItemsArgs[] | false, alias?: string  } 
  | { name: 'createorderItem', args?: MutationCreateorderItemArgs[] | false, alias?: string  } 
  | { name: 'updateorderItem', args?: MutationUpdateorderItemArgs[] | false, alias?: string  } 
  | { name: 'updateManyorderItems', args?: MutationUpdateManyorderItemsArgs[] | false, alias?: string  } 
  | { name: 'upsertorderItem', args?: MutationUpsertorderItemArgs[] | false, alias?: string  } 
  | { name: 'deleteorderItem', args?: MutationDeleteorderItemArgs[] | false, alias?: string  } 
  | { name: 'deleteManyorderItems', args?: MutationDeleteManyorderItemsArgs[] | false, alias?: string  } 
  | { name: 'createOrder', args?: MutationCreateOrderArgs[] | false, alias?: string  } 
  | { name: 'updateOrder', args?: MutationUpdateOrderArgs[] | false, alias?: string  } 
  | { name: 'updateManyOrders', args?: MutationUpdateManyOrdersArgs[] | false, alias?: string  } 
  | { name: 'upsertOrder', args?: MutationUpsertOrderArgs[] | false, alias?: string  } 
  | { name: 'deleteOrder', args?: MutationDeleteOrderArgs[] | false, alias?: string  } 
  | { name: 'deleteManyOrders', args?: MutationDeleteManyOrdersArgs[] | false, alias?: string  } 
  | { name: 'createBrand', args?: MutationCreateBrandArgs[] | false, alias?: string  } 
  | { name: 'updateBrand', args?: MutationUpdateBrandArgs[] | false, alias?: string  } 
  | { name: 'updateManyBrands', args?: MutationUpdateManyBrandsArgs[] | false, alias?: string  } 
  | { name: 'upsertBrand', args?: MutationUpsertBrandArgs[] | false, alias?: string  } 
  | { name: 'deleteBrand', args?: MutationDeleteBrandArgs[] | false, alias?: string  } 
  | { name: 'deleteManyBrands', args?: MutationDeleteManyBrandsArgs[] | false, alias?: string  } 
  | { name: 'createTag', args?: MutationCreateTagArgs[] | false, alias?: string  } 
  | { name: 'updateTag', args?: MutationUpdateTagArgs[] | false, alias?: string  } 
  | { name: 'updateManyTags', args?: MutationUpdateManyTagsArgs[] | false, alias?: string  } 
  | { name: 'upsertTag', args?: MutationUpsertTagArgs[] | false, alias?: string  } 
  | { name: 'deleteTag', args?: MutationDeleteTagArgs[] | false, alias?: string  } 
  | { name: 'deleteManyTags', args?: MutationDeleteManyTagsArgs[] | false, alias?: string  } 
  | { name: 'createCategory', args?: MutationCreateCategoryArgs[] | false, alias?: string  } 
  | { name: 'updateCategory', args?: MutationUpdateCategoryArgs[] | false, alias?: string  } 
  | { name: 'updateManyCategories', args?: MutationUpdateManyCategoriesArgs[] | false, alias?: string  } 
  | { name: 'upsertCategory', args?: MutationUpsertCategoryArgs[] | false, alias?: string  } 
  | { name: 'deleteCategory', args?: MutationDeleteCategoryArgs[] | false, alias?: string  } 
  | { name: 'deleteManyCategories', args?: MutationDeleteManyCategoriesArgs[] | false, alias?: string  } 
  | { name: 'createProductImage', args?: MutationCreateProductImageArgs[] | false, alias?: string  } 
  | { name: 'updateProductImage', args?: MutationUpdateProductImageArgs[] | false, alias?: string  } 
  | { name: 'updateManyProductImages', args?: MutationUpdateManyProductImagesArgs[] | false, alias?: string  } 
  | { name: 'upsertProductImage', args?: MutationUpsertProductImageArgs[] | false, alias?: string  } 
  | { name: 'deleteProductImage', args?: MutationDeleteProductImageArgs[] | false, alias?: string  } 
  | { name: 'deleteManyProductImages', args?: MutationDeleteManyProductImagesArgs[] | false, alias?: string  } 
  | { name: 'createVariant', args?: MutationCreateVariantArgs[] | false, alias?: string  } 
  | { name: 'updateVariant', args?: MutationUpdateVariantArgs[] | false, alias?: string  } 
  | { name: 'updateManyVariants', args?: MutationUpdateManyVariantsArgs[] | false, alias?: string  } 
  | { name: 'upsertVariant', args?: MutationUpsertVariantArgs[] | false, alias?: string  } 
  | { name: 'deleteVariant', args?: MutationDeleteVariantArgs[] | false, alias?: string  } 
  | { name: 'deleteManyVariants', args?: MutationDeleteManyVariantsArgs[] | false, alias?: string  } 
  | { name: 'createProductReview', args?: MutationCreateProductReviewArgs[] | false, alias?: string  } 
  | { name: 'updateProductReview', args?: MutationUpdateProductReviewArgs[] | false, alias?: string  } 
  | { name: 'updateManyProductReviews', args?: MutationUpdateManyProductReviewsArgs[] | false, alias?: string  } 
  | { name: 'upsertProductReview', args?: MutationUpsertProductReviewArgs[] | false, alias?: string  } 
  | { name: 'deleteProductReview', args?: MutationDeleteProductReviewArgs[] | false, alias?: string  } 
  | { name: 'deleteManyProductReviews', args?: MutationDeleteManyProductReviewsArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createUser'
  | 'updateUser'
  | 'updateManyUsers'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'
  | 'createForum'
  | 'updateForum'
  | 'updateManyForums'
  | 'upsertForum'
  | 'deleteForum'
  | 'deleteManyForums'
  | 'createForumPost'
  | 'updateForumPost'
  | 'updateManyForumPosts'
  | 'upsertForumPost'
  | 'deleteForumPost'
  | 'deleteManyForumPosts'
  | 'createForumPostComment'
  | 'updateForumPostComment'
  | 'updateManyForumPostComments'
  | 'upsertForumPostComment'
  | 'deleteForumPostComment'
  | 'deleteManyForumPostComments'
  | 'createShop'
  | 'updateShop'
  | 'updateManyShops'
  | 'upsertShop'
  | 'deleteShop'
  | 'deleteManyShops'
  | 'createShopImage'
  | 'updateShopImage'
  | 'updateManyShopImages'
  | 'upsertShopImage'
  | 'deleteShopImage'
  | 'deleteManyShopImages'
  | 'createUserImage'
  | 'updateUserImage'
  | 'updateManyUserImages'
  | 'upsertUserImage'
  | 'deleteUserImage'
  | 'deleteManyUserImages'
  | 'createProduct'
  | 'updateProduct'
  | 'updateManyProducts'
  | 'upsertProduct'
  | 'deleteProduct'
  | 'deleteManyProducts'
  | 'createCart'
  | 'updateCart'
  | 'upsertCart'
  | 'deleteCart'
  | 'deleteManyCarts'
  | 'createCartItem'
  | 'updateCartItem'
  | 'updateManyCartItems'
  | 'upsertCartItem'
  | 'deleteCartItem'
  | 'deleteManyCartItems'
  | 'createorderItem'
  | 'updateorderItem'
  | 'updateManyorderItems'
  | 'upsertorderItem'
  | 'deleteorderItem'
  | 'deleteManyorderItems'
  | 'createOrder'
  | 'updateOrder'
  | 'updateManyOrders'
  | 'upsertOrder'
  | 'deleteOrder'
  | 'deleteManyOrders'
  | 'createBrand'
  | 'updateBrand'
  | 'updateManyBrands'
  | 'upsertBrand'
  | 'deleteBrand'
  | 'deleteManyBrands'
  | 'createTag'
  | 'updateTag'
  | 'updateManyTags'
  | 'upsertTag'
  | 'deleteTag'
  | 'deleteManyTags'
  | 'createCategory'
  | 'updateCategory'
  | 'updateManyCategories'
  | 'upsertCategory'
  | 'deleteCategory'
  | 'deleteManyCategories'
  | 'createProductImage'
  | 'updateProductImage'
  | 'updateManyProductImages'
  | 'upsertProductImage'
  | 'deleteProductImage'
  | 'deleteManyProductImages'
  | 'createVariant'
  | 'updateVariant'
  | 'updateManyVariants'
  | 'upsertVariant'
  | 'deleteVariant'
  | 'deleteManyVariants'
  | 'createProductReview'
  | 'updateProductReview'
  | 'updateManyProductReviews'
  | 'upsertProductReview'
  | 'deleteProductReview'
  | 'deleteManyProductReviews'


type MutationCreateUserArgs =
  | 'data'
type MutationUpdateUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserArgs =
  | 'where'
type MutationDeleteManyUsersArgs =
  | 'where'
type MutationCreateForumArgs =
  | 'data'
type MutationUpdateForumArgs =
  | 'data'
  | 'where'
type MutationUpdateManyForumsArgs =
  | 'data'
  | 'where'
type MutationUpsertForumArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteForumArgs =
  | 'where'
type MutationDeleteManyForumsArgs =
  | 'where'
type MutationCreateForumPostArgs =
  | 'data'
type MutationUpdateForumPostArgs =
  | 'data'
  | 'where'
type MutationUpdateManyForumPostsArgs =
  | 'data'
  | 'where'
type MutationUpsertForumPostArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteForumPostArgs =
  | 'where'
type MutationDeleteManyForumPostsArgs =
  | 'where'
type MutationCreateForumPostCommentArgs =
  | 'data'
type MutationUpdateForumPostCommentArgs =
  | 'data'
  | 'where'
type MutationUpdateManyForumPostCommentsArgs =
  | 'data'
  | 'where'
type MutationUpsertForumPostCommentArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteForumPostCommentArgs =
  | 'where'
type MutationDeleteManyForumPostCommentsArgs =
  | 'where'
type MutationCreateShopArgs =
  | 'data'
type MutationUpdateShopArgs =
  | 'data'
  | 'where'
type MutationUpdateManyShopsArgs =
  | 'data'
  | 'where'
type MutationUpsertShopArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteShopArgs =
  | 'where'
type MutationDeleteManyShopsArgs =
  | 'where'
type MutationCreateShopImageArgs =
  | 'data'
type MutationUpdateShopImageArgs =
  | 'data'
  | 'where'
type MutationUpdateManyShopImagesArgs =
  | 'data'
  | 'where'
type MutationUpsertShopImageArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteShopImageArgs =
  | 'where'
type MutationDeleteManyShopImagesArgs =
  | 'where'
type MutationCreateUserImageArgs =
  | 'data'
type MutationUpdateUserImageArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUserImagesArgs =
  | 'data'
  | 'where'
type MutationUpsertUserImageArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserImageArgs =
  | 'where'
type MutationDeleteManyUserImagesArgs =
  | 'where'
type MutationCreateProductArgs =
  | 'data'
type MutationUpdateProductArgs =
  | 'data'
  | 'where'
type MutationUpdateManyProductsArgs =
  | 'data'
  | 'where'
type MutationUpsertProductArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteProductArgs =
  | 'where'
type MutationDeleteManyProductsArgs =
  | 'where'
type MutationCreateCartArgs =
  | 'data'
type MutationUpdateCartArgs =
  | 'data'
  | 'where'
type MutationUpsertCartArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteCartArgs =
  | 'where'
type MutationDeleteManyCartsArgs =
  | 'where'
type MutationCreateCartItemArgs =
  | 'data'
type MutationUpdateCartItemArgs =
  | 'data'
  | 'where'
type MutationUpdateManyCartItemsArgs =
  | 'data'
  | 'where'
type MutationUpsertCartItemArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteCartItemArgs =
  | 'where'
type MutationDeleteManyCartItemsArgs =
  | 'where'
type MutationCreateorderItemArgs =
  | 'data'
type MutationUpdateorderItemArgs =
  | 'data'
  | 'where'
type MutationUpdateManyorderItemsArgs =
  | 'data'
  | 'where'
type MutationUpsertorderItemArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteorderItemArgs =
  | 'where'
type MutationDeleteManyorderItemsArgs =
  | 'where'
type MutationCreateOrderArgs =
  | 'data'
type MutationUpdateOrderArgs =
  | 'data'
  | 'where'
type MutationUpdateManyOrdersArgs =
  | 'data'
  | 'where'
type MutationUpsertOrderArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteOrderArgs =
  | 'where'
type MutationDeleteManyOrdersArgs =
  | 'where'
type MutationCreateBrandArgs =
  | 'data'
type MutationUpdateBrandArgs =
  | 'data'
  | 'where'
type MutationUpdateManyBrandsArgs =
  | 'data'
  | 'where'
type MutationUpsertBrandArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteBrandArgs =
  | 'where'
type MutationDeleteManyBrandsArgs =
  | 'where'
type MutationCreateTagArgs =
  | 'data'
type MutationUpdateTagArgs =
  | 'data'
  | 'where'
type MutationUpdateManyTagsArgs =
  | 'data'
  | 'where'
type MutationUpsertTagArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteTagArgs =
  | 'where'
type MutationDeleteManyTagsArgs =
  | 'where'
type MutationCreateCategoryArgs =
  | 'data'
type MutationUpdateCategoryArgs =
  | 'data'
  | 'where'
type MutationUpdateManyCategoriesArgs =
  | 'data'
  | 'where'
type MutationUpsertCategoryArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteCategoryArgs =
  | 'where'
type MutationDeleteManyCategoriesArgs =
  | 'where'
type MutationCreateProductImageArgs =
  | 'data'
type MutationUpdateProductImageArgs =
  | 'data'
  | 'where'
type MutationUpdateManyProductImagesArgs =
  | 'data'
  | 'where'
type MutationUpsertProductImageArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteProductImageArgs =
  | 'where'
type MutationDeleteManyProductImagesArgs =
  | 'where'
type MutationCreateVariantArgs =
  | 'data'
type MutationUpdateVariantArgs =
  | 'data'
  | 'where'
type MutationUpdateManyVariantsArgs =
  | 'data'
  | 'where'
type MutationUpsertVariantArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteVariantArgs =
  | 'where'
type MutationDeleteManyVariantsArgs =
  | 'where'
type MutationCreateProductReviewArgs =
  | 'data'
type MutationUpdateProductReviewArgs =
  | 'data'
  | 'where'
type MutationUpdateManyProductReviewsArgs =
  | 'data'
  | 'where'
type MutationUpsertProductReviewArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteProductReviewArgs =
  | 'where'
type MutationDeleteManyProductReviewsArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateInput, where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updateManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateManyMutationInput, where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createForum: {
    type: 'Forum'
    args: Record<MutationCreateForumArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ForumCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Forum> | prisma.Forum
  }
  updateForum: {
    type: 'Forum'
    args: Record<MutationUpdateForumArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ForumUpdateInput, where: ForumWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Forum | null> | prisma.Forum | null
  }
  updateManyForums: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyForumsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ForumUpdateManyMutationInput, where?: ForumWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertForum: {
    type: 'Forum'
    args: Record<MutationUpsertForumArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ForumWhereUniqueInput, create: ForumCreateInput, update: ForumUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Forum> | prisma.Forum
  }
  deleteForum: {
    type: 'Forum'
    args: Record<MutationDeleteForumArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ForumWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Forum | null> | prisma.Forum | null
  }
  deleteManyForums: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyForumsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ForumWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createForumPost: {
    type: 'ForumPost'
    args: Record<MutationCreateForumPostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ForumPostCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ForumPost> | prisma.ForumPost
  }
  updateForumPost: {
    type: 'ForumPost'
    args: Record<MutationUpdateForumPostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ForumPostUpdateInput, where: ForumPostWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ForumPost | null> | prisma.ForumPost | null
  }
  updateManyForumPosts: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyForumPostsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ForumPostUpdateManyMutationInput, where?: ForumPostWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertForumPost: {
    type: 'ForumPost'
    args: Record<MutationUpsertForumPostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ForumPostWhereUniqueInput, create: ForumPostCreateInput, update: ForumPostUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ForumPost> | prisma.ForumPost
  }
  deleteForumPost: {
    type: 'ForumPost'
    args: Record<MutationDeleteForumPostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ForumPostWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ForumPost | null> | prisma.ForumPost | null
  }
  deleteManyForumPosts: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyForumPostsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ForumPostWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createForumPostComment: {
    type: 'ForumPostComment'
    args: Record<MutationCreateForumPostCommentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ForumPostCommentCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ForumPostComment> | prisma.ForumPostComment
  }
  updateForumPostComment: {
    type: 'ForumPostComment'
    args: Record<MutationUpdateForumPostCommentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ForumPostCommentUpdateInput, where: ForumPostCommentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ForumPostComment | null> | prisma.ForumPostComment | null
  }
  updateManyForumPostComments: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyForumPostCommentsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ForumPostCommentUpdateManyMutationInput, where?: ForumPostCommentWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertForumPostComment: {
    type: 'ForumPostComment'
    args: Record<MutationUpsertForumPostCommentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ForumPostCommentWhereUniqueInput, create: ForumPostCommentCreateInput, update: ForumPostCommentUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ForumPostComment> | prisma.ForumPostComment
  }
  deleteForumPostComment: {
    type: 'ForumPostComment'
    args: Record<MutationDeleteForumPostCommentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ForumPostCommentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ForumPostComment | null> | prisma.ForumPostComment | null
  }
  deleteManyForumPostComments: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyForumPostCommentsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ForumPostCommentWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createShop: {
    type: 'Shop'
    args: Record<MutationCreateShopArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ShopCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Shop> | prisma.Shop
  }
  updateShop: {
    type: 'Shop'
    args: Record<MutationUpdateShopArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ShopUpdateInput, where: ShopWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Shop | null> | prisma.Shop | null
  }
  updateManyShops: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyShopsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ShopUpdateManyMutationInput, where?: ShopWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertShop: {
    type: 'Shop'
    args: Record<MutationUpsertShopArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ShopWhereUniqueInput, create: ShopCreateInput, update: ShopUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Shop> | prisma.Shop
  }
  deleteShop: {
    type: 'Shop'
    args: Record<MutationDeleteShopArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ShopWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Shop | null> | prisma.Shop | null
  }
  deleteManyShops: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyShopsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ShopWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createShopImage: {
    type: 'ShopImage'
    args: Record<MutationCreateShopImageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ShopImageCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ShopImage> | prisma.ShopImage
  }
  updateShopImage: {
    type: 'ShopImage'
    args: Record<MutationUpdateShopImageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ShopImageUpdateInput, where: ShopImageWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ShopImage | null> | prisma.ShopImage | null
  }
  updateManyShopImages: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyShopImagesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ShopImageUpdateManyMutationInput, where?: ShopImageWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertShopImage: {
    type: 'ShopImage'
    args: Record<MutationUpsertShopImageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ShopImageWhereUniqueInput, create: ShopImageCreateInput, update: ShopImageUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ShopImage> | prisma.ShopImage
  }
  deleteShopImage: {
    type: 'ShopImage'
    args: Record<MutationDeleteShopImageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ShopImageWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ShopImage | null> | prisma.ShopImage | null
  }
  deleteManyShopImages: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyShopImagesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ShopImageWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createUserImage: {
    type: 'UserImage'
    args: Record<MutationCreateUserImageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserImageCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserImage> | prisma.UserImage
  }
  updateUserImage: {
    type: 'UserImage'
    args: Record<MutationUpdateUserImageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserImageUpdateInput, where: UserImageWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserImage | null> | prisma.UserImage | null
  }
  updateManyUserImages: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUserImagesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserImageUpdateManyMutationInput, where?: UserImageWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUserImage: {
    type: 'UserImage'
    args: Record<MutationUpsertUserImageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserImageWhereUniqueInput, create: UserImageCreateInput, update: UserImageUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserImage> | prisma.UserImage
  }
  deleteUserImage: {
    type: 'UserImage'
    args: Record<MutationDeleteUserImageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserImageWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserImage | null> | prisma.UserImage | null
  }
  deleteManyUserImages: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUserImagesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserImageWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createProduct: {
    type: 'Product'
    args: Record<MutationCreateProductArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProductCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product> | prisma.Product
  }
  updateProduct: {
    type: 'Product'
    args: Record<MutationUpdateProductArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProductUpdateInput, where: ProductWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product | null> | prisma.Product | null
  }
  updateManyProducts: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyProductsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProductUpdateManyMutationInput, where?: ProductWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertProduct: {
    type: 'Product'
    args: Record<MutationUpsertProductArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProductWhereUniqueInput, create: ProductCreateInput, update: ProductUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product> | prisma.Product
  }
  deleteProduct: {
    type: 'Product'
    args: Record<MutationDeleteProductArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProductWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product | null> | prisma.Product | null
  }
  deleteManyProducts: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyProductsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ProductWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createCart: {
    type: 'Cart'
    args: Record<MutationCreateCartArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CartCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Cart> | prisma.Cart
  }
  updateCart: {
    type: 'Cart'
    args: Record<MutationUpdateCartArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CartUpdateInput, where: CartWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Cart | null> | prisma.Cart | null
  }
  upsertCart: {
    type: 'Cart'
    args: Record<MutationUpsertCartArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CartWhereUniqueInput, create: CartCreateInput, update: CartUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Cart> | prisma.Cart
  }
  deleteCart: {
    type: 'Cart'
    args: Record<MutationDeleteCartArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CartWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Cart | null> | prisma.Cart | null
  }
  deleteManyCarts: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyCartsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: CartWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createCartItem: {
    type: 'CartItem'
    args: Record<MutationCreateCartItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CartItemCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CartItem> | prisma.CartItem
  }
  updateCartItem: {
    type: 'CartItem'
    args: Record<MutationUpdateCartItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CartItemUpdateInput, where: CartItemWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CartItem | null> | prisma.CartItem | null
  }
  updateManyCartItems: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyCartItemsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CartItemUpdateManyMutationInput, where?: CartItemWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertCartItem: {
    type: 'CartItem'
    args: Record<MutationUpsertCartItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CartItemWhereUniqueInput, create: CartItemCreateInput, update: CartItemUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CartItem> | prisma.CartItem
  }
  deleteCartItem: {
    type: 'CartItem'
    args: Record<MutationDeleteCartItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CartItemWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CartItem | null> | prisma.CartItem | null
  }
  deleteManyCartItems: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyCartItemsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: CartItemWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createorderItem: {
    type: 'orderItem'
    args: Record<MutationCreateorderItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: orderItemCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.orderItem> | prisma.orderItem
  }
  updateorderItem: {
    type: 'orderItem'
    args: Record<MutationUpdateorderItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: orderItemUpdateInput, where: orderItemWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.orderItem | null> | prisma.orderItem | null
  }
  updateManyorderItems: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyorderItemsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: orderItemUpdateManyMutationInput, where?: orderItemWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertorderItem: {
    type: 'orderItem'
    args: Record<MutationUpsertorderItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: orderItemWhereUniqueInput, create: orderItemCreateInput, update: orderItemUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.orderItem> | prisma.orderItem
  }
  deleteorderItem: {
    type: 'orderItem'
    args: Record<MutationDeleteorderItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: orderItemWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.orderItem | null> | prisma.orderItem | null
  }
  deleteManyorderItems: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyorderItemsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: orderItemWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createOrder: {
    type: 'Order'
    args: Record<MutationCreateOrderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: OrderCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Order> | prisma.Order
  }
  updateOrder: {
    type: 'Order'
    args: Record<MutationUpdateOrderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: OrderUpdateInput, where: OrderWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Order | null> | prisma.Order | null
  }
  updateManyOrders: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyOrdersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: OrderUpdateManyMutationInput, where?: OrderWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertOrder: {
    type: 'Order'
    args: Record<MutationUpsertOrderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: OrderWhereUniqueInput, create: OrderCreateInput, update: OrderUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Order> | prisma.Order
  }
  deleteOrder: {
    type: 'Order'
    args: Record<MutationDeleteOrderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: OrderWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Order | null> | prisma.Order | null
  }
  deleteManyOrders: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyOrdersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: OrderWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createBrand: {
    type: 'Brand'
    args: Record<MutationCreateBrandArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: BrandCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Brand> | prisma.Brand
  }
  updateBrand: {
    type: 'Brand'
    args: Record<MutationUpdateBrandArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: BrandUpdateInput, where: BrandWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Brand | null> | prisma.Brand | null
  }
  updateManyBrands: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyBrandsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: BrandUpdateManyMutationInput, where?: BrandWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertBrand: {
    type: 'Brand'
    args: Record<MutationUpsertBrandArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: BrandWhereUniqueInput, create: BrandCreateInput, update: BrandUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Brand> | prisma.Brand
  }
  deleteBrand: {
    type: 'Brand'
    args: Record<MutationDeleteBrandArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: BrandWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Brand | null> | prisma.Brand | null
  }
  deleteManyBrands: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyBrandsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: BrandWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createTag: {
    type: 'Tag'
    args: Record<MutationCreateTagArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TagCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tag> | prisma.Tag
  }
  updateTag: {
    type: 'Tag'
    args: Record<MutationUpdateTagArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TagUpdateInput, where: TagWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tag | null> | prisma.Tag | null
  }
  updateManyTags: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyTagsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TagUpdateManyMutationInput, where?: TagWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertTag: {
    type: 'Tag'
    args: Record<MutationUpsertTagArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TagWhereUniqueInput, create: TagCreateInput, update: TagUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tag> | prisma.Tag
  }
  deleteTag: {
    type: 'Tag'
    args: Record<MutationDeleteTagArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TagWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tag | null> | prisma.Tag | null
  }
  deleteManyTags: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyTagsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: TagWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createCategory: {
    type: 'Category'
    args: Record<MutationCreateCategoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CategoryCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Category> | prisma.Category
  }
  updateCategory: {
    type: 'Category'
    args: Record<MutationUpdateCategoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CategoryUpdateInput, where: CategoryWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Category | null> | prisma.Category | null
  }
  updateManyCategories: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyCategoriesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CategoryUpdateManyMutationInput, where?: CategoryWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertCategory: {
    type: 'Category'
    args: Record<MutationUpsertCategoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CategoryWhereUniqueInput, create: CategoryCreateInput, update: CategoryUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Category> | prisma.Category
  }
  deleteCategory: {
    type: 'Category'
    args: Record<MutationDeleteCategoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CategoryWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Category | null> | prisma.Category | null
  }
  deleteManyCategories: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyCategoriesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: CategoryWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createProductImage: {
    type: 'ProductImage'
    args: Record<MutationCreateProductImageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProductImageCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductImage> | prisma.ProductImage
  }
  updateProductImage: {
    type: 'ProductImage'
    args: Record<MutationUpdateProductImageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProductImageUpdateInput, where: ProductImageWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductImage | null> | prisma.ProductImage | null
  }
  updateManyProductImages: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyProductImagesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProductImageUpdateManyMutationInput, where?: ProductImageWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertProductImage: {
    type: 'ProductImage'
    args: Record<MutationUpsertProductImageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProductImageWhereUniqueInput, create: ProductImageCreateInput, update: ProductImageUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductImage> | prisma.ProductImage
  }
  deleteProductImage: {
    type: 'ProductImage'
    args: Record<MutationDeleteProductImageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProductImageWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductImage | null> | prisma.ProductImage | null
  }
  deleteManyProductImages: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyProductImagesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ProductImageWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createVariant: {
    type: 'Variant'
    args: Record<MutationCreateVariantArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: VariantCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Variant> | prisma.Variant
  }
  updateVariant: {
    type: 'Variant'
    args: Record<MutationUpdateVariantArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: VariantUpdateInput, where: VariantWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Variant | null> | prisma.Variant | null
  }
  updateManyVariants: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyVariantsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: VariantUpdateManyMutationInput, where?: VariantWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertVariant: {
    type: 'Variant'
    args: Record<MutationUpsertVariantArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: VariantWhereUniqueInput, create: VariantCreateInput, update: VariantUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Variant> | prisma.Variant
  }
  deleteVariant: {
    type: 'Variant'
    args: Record<MutationDeleteVariantArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: VariantWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Variant | null> | prisma.Variant | null
  }
  deleteManyVariants: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyVariantsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: VariantWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createProductReview: {
    type: 'ProductReview'
    args: Record<MutationCreateProductReviewArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProductReviewCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductReview> | prisma.ProductReview
  }
  updateProductReview: {
    type: 'ProductReview'
    args: Record<MutationUpdateProductReviewArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProductReviewUpdateInput, where: ProductReviewWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductReview | null> | prisma.ProductReview | null
  }
  updateManyProductReviews: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyProductReviewsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProductReviewUpdateManyMutationInput, where?: ProductReviewWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertProductReview: {
    type: 'ProductReview'
    args: Record<MutationUpsertProductReviewArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProductReviewWhereUniqueInput, create: ProductReviewCreateInput, update: ProductReviewUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductReview> | prisma.ProductReview
  }
  deleteProductReview: {
    type: 'ProductReview'
    args: Record<MutationDeleteProductReviewArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProductReviewWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductReview | null> | prisma.ProductReview | null
  }
  deleteManyProductReviews: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyProductReviewsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ProductReviewWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'user', args?: SubscriptionUserArgs[] | false, alias?: string  } 
  | { name: 'forum', args?: SubscriptionForumArgs[] | false, alias?: string  } 
  | { name: 'forumPost', args?: SubscriptionForumPostArgs[] | false, alias?: string  } 
  | { name: 'forumPostComment', args?: SubscriptionForumPostCommentArgs[] | false, alias?: string  } 
  | { name: 'shop', args?: SubscriptionShopArgs[] | false, alias?: string  } 
  | { name: 'shopImage', args?: SubscriptionShopImageArgs[] | false, alias?: string  } 
  | { name: 'userImage', args?: SubscriptionUserImageArgs[] | false, alias?: string  } 
  | { name: 'product', args?: SubscriptionProductArgs[] | false, alias?: string  } 
  | { name: 'cart', args?: SubscriptionCartArgs[] | false, alias?: string  } 
  | { name: 'cartItem', args?: SubscriptionCartItemArgs[] | false, alias?: string  } 
  | { name: 'orderItem', args?: SubscriptionOrderItemArgs[] | false, alias?: string  } 
  | { name: 'order', args?: SubscriptionOrderArgs[] | false, alias?: string  } 
  | { name: 'brand', args?: SubscriptionBrandArgs[] | false, alias?: string  } 
  | { name: 'tag', args?: SubscriptionTagArgs[] | false, alias?: string  } 
  | { name: 'category', args?: SubscriptionCategoryArgs[] | false, alias?: string  } 
  | { name: 'productImage', args?: SubscriptionProductImageArgs[] | false, alias?: string  } 
  | { name: 'variant', args?: SubscriptionVariantArgs[] | false, alias?: string  } 
  | { name: 'productReview', args?: SubscriptionProductReviewArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'user'
  | 'forum'
  | 'forumPost'
  | 'forumPostComment'
  | 'shop'
  | 'shopImage'
  | 'userImage'
  | 'product'
  | 'cart'
  | 'cartItem'
  | 'orderItem'
  | 'order'
  | 'brand'
  | 'tag'
  | 'category'
  | 'productImage'
  | 'variant'
  | 'productReview'


type SubscriptionUserArgs =
  | 'where'
type SubscriptionForumArgs =
  | 'where'
type SubscriptionForumPostArgs =
  | 'where'
type SubscriptionForumPostCommentArgs =
  | 'where'
type SubscriptionShopArgs =
  | 'where'
type SubscriptionShopImageArgs =
  | 'where'
type SubscriptionUserImageArgs =
  | 'where'
type SubscriptionProductArgs =
  | 'where'
type SubscriptionCartArgs =
  | 'where'
type SubscriptionCartItemArgs =
  | 'where'
type SubscriptionOrderItemArgs =
  | 'where'
type SubscriptionOrderArgs =
  | 'where'
type SubscriptionBrandArgs =
  | 'where'
type SubscriptionTagArgs =
  | 'where'
type SubscriptionCategoryArgs =
  | 'where'
type SubscriptionProductImageArgs =
  | 'where'
type SubscriptionVariantArgs =
  | 'where'
type SubscriptionProductReviewArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserSubscriptionPayload | null> | prisma.UserSubscriptionPayload | null
  }
  forum: {
    type: 'ForumSubscriptionPayload'
    args: Record<SubscriptionForumArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ForumSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ForumSubscriptionPayload | null> | prisma.ForumSubscriptionPayload | null
  }
  forumPost: {
    type: 'ForumPostSubscriptionPayload'
    args: Record<SubscriptionForumPostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ForumPostSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ForumPostSubscriptionPayload | null> | prisma.ForumPostSubscriptionPayload | null
  }
  forumPostComment: {
    type: 'ForumPostCommentSubscriptionPayload'
    args: Record<SubscriptionForumPostCommentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ForumPostCommentSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ForumPostCommentSubscriptionPayload | null> | prisma.ForumPostCommentSubscriptionPayload | null
  }
  shop: {
    type: 'ShopSubscriptionPayload'
    args: Record<SubscriptionShopArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ShopSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ShopSubscriptionPayload | null> | prisma.ShopSubscriptionPayload | null
  }
  shopImage: {
    type: 'ShopImageSubscriptionPayload'
    args: Record<SubscriptionShopImageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ShopImageSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ShopImageSubscriptionPayload | null> | prisma.ShopImageSubscriptionPayload | null
  }
  userImage: {
    type: 'UserImageSubscriptionPayload'
    args: Record<SubscriptionUserImageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserImageSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserImageSubscriptionPayload | null> | prisma.UserImageSubscriptionPayload | null
  }
  product: {
    type: 'ProductSubscriptionPayload'
    args: Record<SubscriptionProductArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ProductSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductSubscriptionPayload | null> | prisma.ProductSubscriptionPayload | null
  }
  cart: {
    type: 'CartSubscriptionPayload'
    args: Record<SubscriptionCartArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: CartSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CartSubscriptionPayload | null> | prisma.CartSubscriptionPayload | null
  }
  cartItem: {
    type: 'CartItemSubscriptionPayload'
    args: Record<SubscriptionCartItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: CartItemSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CartItemSubscriptionPayload | null> | prisma.CartItemSubscriptionPayload | null
  }
  orderItem: {
    type: 'orderItemSubscriptionPayload'
    args: Record<SubscriptionOrderItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: orderItemSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.orderItemSubscriptionPayload | null> | prisma.orderItemSubscriptionPayload | null
  }
  order: {
    type: 'OrderSubscriptionPayload'
    args: Record<SubscriptionOrderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: OrderSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderSubscriptionPayload | null> | prisma.OrderSubscriptionPayload | null
  }
  brand: {
    type: 'BrandSubscriptionPayload'
    args: Record<SubscriptionBrandArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: BrandSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BrandSubscriptionPayload | null> | prisma.BrandSubscriptionPayload | null
  }
  tag: {
    type: 'TagSubscriptionPayload'
    args: Record<SubscriptionTagArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: TagSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TagSubscriptionPayload | null> | prisma.TagSubscriptionPayload | null
  }
  category: {
    type: 'CategorySubscriptionPayload'
    args: Record<SubscriptionCategoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: CategorySubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CategorySubscriptionPayload | null> | prisma.CategorySubscriptionPayload | null
  }
  productImage: {
    type: 'ProductImageSubscriptionPayload'
    args: Record<SubscriptionProductImageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ProductImageSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductImageSubscriptionPayload | null> | prisma.ProductImageSubscriptionPayload | null
  }
  variant: {
    type: 'VariantSubscriptionPayload'
    args: Record<SubscriptionVariantArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: VariantSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.VariantSubscriptionPayload | null> | prisma.VariantSubscriptionPayload | null
  }
  productReview: {
    type: 'ProductReviewSubscriptionPayload'
    args: Record<SubscriptionProductReviewArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ProductReviewSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductReviewSubscriptionPayload | null> | prisma.ProductReviewSubscriptionPayload | null
  }
}
  

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPreviousValues | null> | prisma.UserPreviousValues | null
  }
}
  

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'firebaseId', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'username', args?: [] | false, alias?: string  } 
  | { name: 'profilePic', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'isAnonymous', args?: [] | false, alias?: string  } 
  | { name: 'emailVerified', args?: [] | false, alias?: string  } 

type UserPreviousValuesFields =
  | 'id'
  | 'firebaseId'
  | 'email'
  | 'name'
  | 'username'
  | 'profilePic'
  | 'createdAt'
  | 'updatedAt'
  | 'isAnonymous'
  | 'emailVerified'



  

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  firebaseId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  username: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  profilePic: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  isAnonymous: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  emailVerified: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for ForumSubscriptionPayload

type ForumSubscriptionPayloadObject =
  | ForumSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ForumSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ForumSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ForumSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Forum'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ForumSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Forum | null> | prisma.Forum | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ForumPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ForumSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ForumPreviousValues | null> | prisma.ForumPreviousValues | null
  }
}
  

// Types for ForumPreviousValues

type ForumPreviousValuesObject =
  | ForumPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'avatarPic', args?: [] | false, alias?: string  } 
  | { name: 'coverPic', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type ForumPreviousValuesFields =
  | 'id'
  | 'avatarPic'
  | 'coverPic'
  | 'name'
  | 'description'
  | 'createdAt'
  | 'updatedAt'



  

export interface ForumPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  avatarPic: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  coverPic: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ForumPostSubscriptionPayload

type ForumPostSubscriptionPayloadObject =
  | ForumPostSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ForumPostSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ForumPostSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ForumPostSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'ForumPost'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ForumPostSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ForumPost | null> | prisma.ForumPost | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ForumPostPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ForumPostSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ForumPostPreviousValues | null> | prisma.ForumPostPreviousValues | null
  }
}
  

// Types for ForumPostPreviousValues

type ForumPostPreviousValuesObject =
  | ForumPostPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'content', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 

type ForumPostPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'title'
  | 'content'
  | 'type'



  

export interface ForumPostPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  content: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  type: {
    type: 'ForumPostType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ForumPostPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ForumPostType> | prisma.ForumPostType
  }
}
  

// Types for ForumPostCommentSubscriptionPayload

type ForumPostCommentSubscriptionPayloadObject =
  | ForumPostCommentSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ForumPostCommentSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ForumPostCommentSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ForumPostCommentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'ForumPostComment'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ForumPostCommentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ForumPostComment | null> | prisma.ForumPostComment | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ForumPostCommentPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ForumPostCommentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ForumPostCommentPreviousValues | null> | prisma.ForumPostCommentPreviousValues | null
  }
}
  

// Types for ForumPostCommentPreviousValues

type ForumPostCommentPreviousValuesObject =
  | ForumPostCommentPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'comment', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type ForumPostCommentPreviousValuesFields =
  | 'id'
  | 'comment'
  | 'createdAt'
  | 'updatedAt'



  

export interface ForumPostCommentPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  comment: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ShopSubscriptionPayload

type ShopSubscriptionPayloadObject =
  | ShopSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ShopSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ShopSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ShopSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Shop'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ShopSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Shop | null> | prisma.Shop | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ShopPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ShopSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ShopPreviousValues | null> | prisma.ShopPreviousValues | null
  }
}
  

// Types for ShopPreviousValues

type ShopPreviousValuesObject =
  | ShopPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'category', args?: [] | false, alias?: string  } 
  | { name: 'live', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type ShopPreviousValuesFields =
  | 'id'
  | 'name'
  | 'description'
  | 'category'
  | 'live'
  | 'createdAt'
  | 'updatedAt'



  

export interface ShopPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  category: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  live: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ShopImageSubscriptionPayload

type ShopImageSubscriptionPayloadObject =
  | ShopImageSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ShopImageSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ShopImageSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ShopImageSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'ShopImage'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ShopImageSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ShopImage | null> | prisma.ShopImage | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ShopImagePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ShopImageSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ShopImagePreviousValues | null> | prisma.ShopImagePreviousValues | null
  }
}
  

// Types for ShopImagePreviousValues

type ShopImagePreviousValuesObject =
  | ShopImagePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'imageUrl', args?: [] | false, alias?: string  } 
  | { name: 'largeImageUrl', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type ShopImagePreviousValuesFields =
  | 'id'
  | 'imageUrl'
  | 'largeImageUrl'
  | 'createdAt'
  | 'updatedAt'



  

export interface ShopImagePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  imageUrl: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  largeImageUrl: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for UserImageSubscriptionPayload

type UserImageSubscriptionPayloadObject =
  | UserImageSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserImageSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserImageSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserImageSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'UserImage'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserImageSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserImage | null> | prisma.UserImage | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserImagePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserImageSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserImagePreviousValues | null> | prisma.UserImagePreviousValues | null
  }
}
  

// Types for UserImagePreviousValues

type UserImagePreviousValuesObject =
  | UserImagePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'imageUrl', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type UserImagePreviousValuesFields =
  | 'id'
  | 'imageUrl'
  | 'createdAt'
  | 'updatedAt'



  

export interface UserImagePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  imageUrl: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProductSubscriptionPayload

type ProductSubscriptionPayloadObject =
  | ProductSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ProductSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ProductSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProductSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Product'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProductSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product | null> | prisma.Product | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ProductPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProductSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductPreviousValues | null> | prisma.ProductPreviousValues | null
  }
}
  

// Types for ProductPreviousValues

type ProductPreviousValuesObject =
  | ProductPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'price', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type ProductPreviousValuesFields =
  | 'id'
  | 'title'
  | 'description'
  | 'price'
  | 'createdAt'
  | 'updatedAt'



  

export interface ProductPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  price: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CartSubscriptionPayload

type CartSubscriptionPayloadObject =
  | CartSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type CartSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface CartSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CartSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Cart'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CartSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Cart | null> | prisma.Cart | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'CartPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CartSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CartPreviousValues | null> | prisma.CartPreviousValues | null
  }
}
  

// Types for CartPreviousValues

type CartPreviousValuesObject =
  | CartPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type CartPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'



  

export interface CartPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CartItemSubscriptionPayload

type CartItemSubscriptionPayloadObject =
  | CartItemSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type CartItemSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface CartItemSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CartItemSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'CartItem'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CartItemSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CartItem | null> | prisma.CartItem | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'CartItemPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CartItemSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CartItemPreviousValues | null> | prisma.CartItemPreviousValues | null
  }
}
  

// Types for CartItemPreviousValues

type CartItemPreviousValuesObject =
  | CartItemPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'quantity', args?: [] | false, alias?: string  } 
  | { name: 'variants', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type CartItemPreviousValuesFields =
  | 'id'
  | 'quantity'
  | 'variants'
  | 'createdAt'
  | 'updatedAt'



  

export interface CartItemPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  quantity: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  variants: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for orderItemSubscriptionPayload

type orderItemSubscriptionPayloadObject =
  | orderItemSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type orderItemSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface orderItemSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"orderItemSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'orderItem'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"orderItemSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.orderItem | null> | prisma.orderItem | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'orderItemPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"orderItemSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.orderItemPreviousValues | null> | prisma.orderItemPreviousValues | null
  }
}
  

// Types for orderItemPreviousValues

type orderItemPreviousValuesObject =
  | orderItemPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'price', args?: [] | false, alias?: string  } 
  | { name: 'quantity', args?: [] | false, alias?: string  } 
  | { name: 'imageUrl', args?: [] | false, alias?: string  } 
  | { name: 'variants', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type orderItemPreviousValuesFields =
  | 'id'
  | 'title'
  | 'description'
  | 'price'
  | 'quantity'
  | 'imageUrl'
  | 'variants'
  | 'createdAt'
  | 'updatedAt'



  

export interface orderItemPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  price: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  quantity: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  imageUrl: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  variants: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for OrderSubscriptionPayload

type OrderSubscriptionPayloadObject =
  | OrderSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type OrderSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface OrderSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OrderSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Order'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"OrderSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Order | null> | prisma.Order | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'OrderPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"OrderSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderPreviousValues | null> | prisma.OrderPreviousValues | null
  }
}
  

// Types for OrderPreviousValues

type OrderPreviousValuesObject =
  | OrderPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'total', args?: [] | false, alias?: string  } 
  | { name: 'paymentId', args?: [] | false, alias?: string  } 
  | { name: 'PayerID', args?: [] | false, alias?: string  } 
  | { name: 'imageUrl', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type OrderPreviousValuesFields =
  | 'id'
  | 'total'
  | 'paymentId'
  | 'PayerID'
  | 'imageUrl'
  | 'createdAt'
  | 'updatedAt'



  

export interface OrderPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  total: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  paymentId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  PayerID: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  imageUrl: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for BrandSubscriptionPayload

type BrandSubscriptionPayloadObject =
  | BrandSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type BrandSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface BrandSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BrandSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Brand'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"BrandSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Brand | null> | prisma.Brand | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'BrandPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"BrandSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BrandPreviousValues | null> | prisma.BrandPreviousValues | null
  }
}
  

// Types for BrandPreviousValues

type BrandPreviousValuesObject =
  | BrandPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type BrandPreviousValuesFields =
  | 'id'
  | 'name'
  | 'createdAt'
  | 'updatedAt'



  

export interface BrandPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TagSubscriptionPayload

type TagSubscriptionPayloadObject =
  | TagSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type TagSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface TagSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TagSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Tag'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TagSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tag | null> | prisma.Tag | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'TagPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TagSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TagPreviousValues | null> | prisma.TagPreviousValues | null
  }
}
  

// Types for TagPreviousValues

type TagPreviousValuesObject =
  | TagPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type TagPreviousValuesFields =
  | 'id'
  | 'name'
  | 'createdAt'
  | 'updatedAt'



  

export interface TagPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CategorySubscriptionPayload

type CategorySubscriptionPayloadObject =
  | CategorySubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type CategorySubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface CategorySubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CategorySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Category'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CategorySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Category | null> | prisma.Category | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'CategoryPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CategorySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CategoryPreviousValues | null> | prisma.CategoryPreviousValues | null
  }
}
  

// Types for CategoryPreviousValues

type CategoryPreviousValuesObject =
  | CategoryPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type CategoryPreviousValuesFields =
  | 'id'
  | 'name'
  | 'createdAt'
  | 'updatedAt'



  

export interface CategoryPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProductImageSubscriptionPayload

type ProductImageSubscriptionPayloadObject =
  | ProductImageSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ProductImageSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ProductImageSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProductImageSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'ProductImage'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProductImageSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductImage | null> | prisma.ProductImage | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ProductImagePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProductImageSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductImagePreviousValues | null> | prisma.ProductImagePreviousValues | null
  }
}
  

// Types for ProductImagePreviousValues

type ProductImagePreviousValuesObject =
  | ProductImagePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'imageUrl', args?: [] | false, alias?: string  } 
  | { name: 'largeImageUrl', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type ProductImagePreviousValuesFields =
  | 'id'
  | 'imageUrl'
  | 'largeImageUrl'
  | 'createdAt'
  | 'updatedAt'



  

export interface ProductImagePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  imageUrl: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  largeImageUrl: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for VariantSubscriptionPayload

type VariantSubscriptionPayloadObject =
  | VariantSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type VariantSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface VariantSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"VariantSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Variant'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"VariantSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Variant | null> | prisma.Variant | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'VariantPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"VariantSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.VariantPreviousValues | null> | prisma.VariantPreviousValues | null
  }
}
  

// Types for VariantPreviousValues

type VariantPreviousValuesObject =
  | VariantPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'values', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type VariantPreviousValuesFields =
  | 'id'
  | 'name'
  | 'values'
  | 'createdAt'
  | 'updatedAt'



  

export interface VariantPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  values: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProductReviewSubscriptionPayload

type ProductReviewSubscriptionPayloadObject =
  | ProductReviewSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ProductReviewSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ProductReviewSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProductReviewSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'ProductReview'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProductReviewSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductReview | null> | prisma.ProductReview | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ProductReviewPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProductReviewSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductReviewPreviousValues | null> | prisma.ProductReviewPreviousValues | null
  }
}
  

// Types for ProductReviewPreviousValues

type ProductReviewPreviousValuesObject =
  | ProductReviewPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'rating', args?: [] | false, alias?: string  } 
  | { name: 'review', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type ProductReviewPreviousValuesFields =
  | 'id'
  | 'rating'
  | 'review'
  | 'createdAt'
  | 'updatedAt'



  

export interface ProductReviewPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  rating: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  review: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  


export interface UserWhereUniqueInput {
  id?: string | null
  firebaseId?: string | null
  email?: string | null
  username?: string | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'firebaseId', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'username', alias?: string  } 
  
export interface ShopWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  category?: string | null
  category_not?: string | null
  category_in?: string[]
  category_not_in?: string[]
  category_lt?: string | null
  category_lte?: string | null
  category_gt?: string | null
  category_gte?: string | null
  category_contains?: string | null
  category_not_contains?: string | null
  category_starts_with?: string | null
  category_not_starts_with?: string | null
  category_ends_with?: string | null
  category_not_ends_with?: string | null
  live?: boolean | null
  live_not?: boolean | null
  owners_every?: UserWhereInput | null
  owners_some?: UserWhereInput | null
  owners_none?: UserWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  images_every?: ShopImageWhereInput | null
  images_some?: ShopImageWhereInput | null
  images_none?: ShopImageWhereInput | null
  products_every?: ProductWhereInput | null
  products_some?: ProductWhereInput | null
  products_none?: ProductWhereInput | null
  AND?: ShopWhereInput[]
  OR?: ShopWhereInput[]
  NOT?: ShopWhereInput[]
}
export type ShopWhereInputInputObject =
  | Extract<keyof ShopWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'category_not', alias?: string  } 
  | { name: 'category_in', alias?: string  } 
  | { name: 'category_not_in', alias?: string  } 
  | { name: 'category_lt', alias?: string  } 
  | { name: 'category_lte', alias?: string  } 
  | { name: 'category_gt', alias?: string  } 
  | { name: 'category_gte', alias?: string  } 
  | { name: 'category_contains', alias?: string  } 
  | { name: 'category_not_contains', alias?: string  } 
  | { name: 'category_starts_with', alias?: string  } 
  | { name: 'category_not_starts_with', alias?: string  } 
  | { name: 'category_ends_with', alias?: string  } 
  | { name: 'category_not_ends_with', alias?: string  } 
  | { name: 'live', alias?: string  } 
  | { name: 'live_not', alias?: string  } 
  | { name: 'owners_every', alias?: string  } 
  | { name: 'owners_some', alias?: string  } 
  | { name: 'owners_none', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'images_every', alias?: string  } 
  | { name: 'images_some', alias?: string  } 
  | { name: 'images_none', alias?: string  } 
  | { name: 'products_every', alias?: string  } 
  | { name: 'products_some', alias?: string  } 
  | { name: 'products_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  firebaseId?: string | null
  firebaseId_not?: string | null
  firebaseId_in?: string[]
  firebaseId_not_in?: string[]
  firebaseId_lt?: string | null
  firebaseId_lte?: string | null
  firebaseId_gt?: string | null
  firebaseId_gte?: string | null
  firebaseId_contains?: string | null
  firebaseId_not_contains?: string | null
  firebaseId_starts_with?: string | null
  firebaseId_not_starts_with?: string | null
  firebaseId_ends_with?: string | null
  firebaseId_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  username?: string | null
  username_not?: string | null
  username_in?: string[]
  username_not_in?: string[]
  username_lt?: string | null
  username_lte?: string | null
  username_gt?: string | null
  username_gte?: string | null
  username_contains?: string | null
  username_not_contains?: string | null
  username_starts_with?: string | null
  username_not_starts_with?: string | null
  username_ends_with?: string | null
  username_not_ends_with?: string | null
  profilePic?: string | null
  profilePic_not?: string | null
  profilePic_in?: string[]
  profilePic_not_in?: string[]
  profilePic_lt?: string | null
  profilePic_lte?: string | null
  profilePic_gt?: string | null
  profilePic_gte?: string | null
  profilePic_contains?: string | null
  profilePic_not_contains?: string | null
  profilePic_starts_with?: string | null
  profilePic_not_starts_with?: string | null
  profilePic_ends_with?: string | null
  profilePic_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  isAnonymous?: boolean | null
  isAnonymous_not?: boolean | null
  emailVerified?: boolean | null
  emailVerified_not?: boolean | null
  shops_every?: ShopWhereInput | null
  shops_some?: ShopWhereInput | null
  shops_none?: ShopWhereInput | null
  images_every?: UserImageWhereInput | null
  images_some?: UserImageWhereInput | null
  images_none?: UserImageWhereInput | null
  productReviews_every?: ProductReviewWhereInput | null
  productReviews_some?: ProductReviewWhereInput | null
  productReviews_none?: ProductReviewWhereInput | null
  cartItems?: CartWhereInput | null
  forumposts_every?: ForumPostWhereInput | null
  forumposts_some?: ForumPostWhereInput | null
  forumposts_none?: ForumPostWhereInput | null
  forums_every?: ForumWhereInput | null
  forums_some?: ForumWhereInput | null
  forums_none?: ForumWhereInput | null
  postComments_every?: ForumPostCommentWhereInput | null
  postComments_some?: ForumPostCommentWhereInput | null
  postComments_none?: ForumPostCommentWhereInput | null
  AND?: UserWhereInput[]
  OR?: UserWhereInput[]
  NOT?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'firebaseId', alias?: string  } 
  | { name: 'firebaseId_not', alias?: string  } 
  | { name: 'firebaseId_in', alias?: string  } 
  | { name: 'firebaseId_not_in', alias?: string  } 
  | { name: 'firebaseId_lt', alias?: string  } 
  | { name: 'firebaseId_lte', alias?: string  } 
  | { name: 'firebaseId_gt', alias?: string  } 
  | { name: 'firebaseId_gte', alias?: string  } 
  | { name: 'firebaseId_contains', alias?: string  } 
  | { name: 'firebaseId_not_contains', alias?: string  } 
  | { name: 'firebaseId_starts_with', alias?: string  } 
  | { name: 'firebaseId_not_starts_with', alias?: string  } 
  | { name: 'firebaseId_ends_with', alias?: string  } 
  | { name: 'firebaseId_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'username_not', alias?: string  } 
  | { name: 'username_in', alias?: string  } 
  | { name: 'username_not_in', alias?: string  } 
  | { name: 'username_lt', alias?: string  } 
  | { name: 'username_lte', alias?: string  } 
  | { name: 'username_gt', alias?: string  } 
  | { name: 'username_gte', alias?: string  } 
  | { name: 'username_contains', alias?: string  } 
  | { name: 'username_not_contains', alias?: string  } 
  | { name: 'username_starts_with', alias?: string  } 
  | { name: 'username_not_starts_with', alias?: string  } 
  | { name: 'username_ends_with', alias?: string  } 
  | { name: 'username_not_ends_with', alias?: string  } 
  | { name: 'profilePic', alias?: string  } 
  | { name: 'profilePic_not', alias?: string  } 
  | { name: 'profilePic_in', alias?: string  } 
  | { name: 'profilePic_not_in', alias?: string  } 
  | { name: 'profilePic_lt', alias?: string  } 
  | { name: 'profilePic_lte', alias?: string  } 
  | { name: 'profilePic_gt', alias?: string  } 
  | { name: 'profilePic_gte', alias?: string  } 
  | { name: 'profilePic_contains', alias?: string  } 
  | { name: 'profilePic_not_contains', alias?: string  } 
  | { name: 'profilePic_starts_with', alias?: string  } 
  | { name: 'profilePic_not_starts_with', alias?: string  } 
  | { name: 'profilePic_ends_with', alias?: string  } 
  | { name: 'profilePic_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'isAnonymous', alias?: string  } 
  | { name: 'isAnonymous_not', alias?: string  } 
  | { name: 'emailVerified', alias?: string  } 
  | { name: 'emailVerified_not', alias?: string  } 
  | { name: 'shops_every', alias?: string  } 
  | { name: 'shops_some', alias?: string  } 
  | { name: 'shops_none', alias?: string  } 
  | { name: 'images_every', alias?: string  } 
  | { name: 'images_some', alias?: string  } 
  | { name: 'images_none', alias?: string  } 
  | { name: 'productReviews_every', alias?: string  } 
  | { name: 'productReviews_some', alias?: string  } 
  | { name: 'productReviews_none', alias?: string  } 
  | { name: 'cartItems', alias?: string  } 
  | { name: 'forumposts_every', alias?: string  } 
  | { name: 'forumposts_some', alias?: string  } 
  | { name: 'forumposts_none', alias?: string  } 
  | { name: 'forums_every', alias?: string  } 
  | { name: 'forums_some', alias?: string  } 
  | { name: 'forums_none', alias?: string  } 
  | { name: 'postComments_every', alias?: string  } 
  | { name: 'postComments_some', alias?: string  } 
  | { name: 'postComments_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserImageWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  imageUrl?: string | null
  imageUrl_not?: string | null
  imageUrl_in?: string[]
  imageUrl_not_in?: string[]
  imageUrl_lt?: string | null
  imageUrl_lte?: string | null
  imageUrl_gt?: string | null
  imageUrl_gte?: string | null
  imageUrl_contains?: string | null
  imageUrl_not_contains?: string | null
  imageUrl_starts_with?: string | null
  imageUrl_not_starts_with?: string | null
  imageUrl_ends_with?: string | null
  imageUrl_not_ends_with?: string | null
  user?: UserWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: UserImageWhereInput[]
  OR?: UserImageWhereInput[]
  NOT?: UserImageWhereInput[]
}
export type UserImageWhereInputInputObject =
  | Extract<keyof UserImageWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'imageUrl', alias?: string  } 
  | { name: 'imageUrl_not', alias?: string  } 
  | { name: 'imageUrl_in', alias?: string  } 
  | { name: 'imageUrl_not_in', alias?: string  } 
  | { name: 'imageUrl_lt', alias?: string  } 
  | { name: 'imageUrl_lte', alias?: string  } 
  | { name: 'imageUrl_gt', alias?: string  } 
  | { name: 'imageUrl_gte', alias?: string  } 
  | { name: 'imageUrl_contains', alias?: string  } 
  | { name: 'imageUrl_not_contains', alias?: string  } 
  | { name: 'imageUrl_starts_with', alias?: string  } 
  | { name: 'imageUrl_not_starts_with', alias?: string  } 
  | { name: 'imageUrl_ends_with', alias?: string  } 
  | { name: 'imageUrl_not_ends_with', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProductReviewWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  user?: UserWhereInput | null
  product?: ProductWhereInput | null
  rating?: number | null
  rating_not?: number | null
  rating_in?: number[]
  rating_not_in?: number[]
  rating_lt?: number | null
  rating_lte?: number | null
  rating_gt?: number | null
  rating_gte?: number | null
  review?: string | null
  review_not?: string | null
  review_in?: string[]
  review_not_in?: string[]
  review_lt?: string | null
  review_lte?: string | null
  review_gt?: string | null
  review_gte?: string | null
  review_contains?: string | null
  review_not_contains?: string | null
  review_starts_with?: string | null
  review_not_starts_with?: string | null
  review_ends_with?: string | null
  review_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: ProductReviewWhereInput[]
  OR?: ProductReviewWhereInput[]
  NOT?: ProductReviewWhereInput[]
}
export type ProductReviewWhereInputInputObject =
  | Extract<keyof ProductReviewWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'product', alias?: string  } 
  | { name: 'rating', alias?: string  } 
  | { name: 'rating_not', alias?: string  } 
  | { name: 'rating_in', alias?: string  } 
  | { name: 'rating_not_in', alias?: string  } 
  | { name: 'rating_lt', alias?: string  } 
  | { name: 'rating_lte', alias?: string  } 
  | { name: 'rating_gt', alias?: string  } 
  | { name: 'rating_gte', alias?: string  } 
  | { name: 'review', alias?: string  } 
  | { name: 'review_not', alias?: string  } 
  | { name: 'review_in', alias?: string  } 
  | { name: 'review_not_in', alias?: string  } 
  | { name: 'review_lt', alias?: string  } 
  | { name: 'review_lte', alias?: string  } 
  | { name: 'review_gt', alias?: string  } 
  | { name: 'review_gte', alias?: string  } 
  | { name: 'review_contains', alias?: string  } 
  | { name: 'review_not_contains', alias?: string  } 
  | { name: 'review_starts_with', alias?: string  } 
  | { name: 'review_not_starts_with', alias?: string  } 
  | { name: 'review_ends_with', alias?: string  } 
  | { name: 'review_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProductWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  price?: string | null
  price_not?: string | null
  price_in?: string[]
  price_not_in?: string[]
  price_lt?: string | null
  price_lte?: string | null
  price_gt?: string | null
  price_gte?: string | null
  price_contains?: string | null
  price_not_contains?: string | null
  price_starts_with?: string | null
  price_not_starts_with?: string | null
  price_ends_with?: string | null
  price_not_ends_with?: string | null
  categories_every?: CategoryWhereInput | null
  categories_some?: CategoryWhereInput | null
  categories_none?: CategoryWhereInput | null
  brand?: BrandWhereInput | null
  tags_every?: TagWhereInput | null
  tags_some?: TagWhereInput | null
  tags_none?: TagWhereInput | null
  images_every?: ProductImageWhereInput | null
  images_some?: ProductImageWhereInput | null
  images_none?: ProductImageWhereInput | null
  shop?: ShopWhereInput | null
  variants_every?: VariantWhereInput | null
  variants_some?: VariantWhereInput | null
  variants_none?: VariantWhereInput | null
  reviews_every?: ProductReviewWhereInput | null
  reviews_some?: ProductReviewWhereInput | null
  reviews_none?: ProductReviewWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: ProductWhereInput[]
  OR?: ProductWhereInput[]
  NOT?: ProductWhereInput[]
}
export type ProductWhereInputInputObject =
  | Extract<keyof ProductWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'price_not', alias?: string  } 
  | { name: 'price_in', alias?: string  } 
  | { name: 'price_not_in', alias?: string  } 
  | { name: 'price_lt', alias?: string  } 
  | { name: 'price_lte', alias?: string  } 
  | { name: 'price_gt', alias?: string  } 
  | { name: 'price_gte', alias?: string  } 
  | { name: 'price_contains', alias?: string  } 
  | { name: 'price_not_contains', alias?: string  } 
  | { name: 'price_starts_with', alias?: string  } 
  | { name: 'price_not_starts_with', alias?: string  } 
  | { name: 'price_ends_with', alias?: string  } 
  | { name: 'price_not_ends_with', alias?: string  } 
  | { name: 'categories_every', alias?: string  } 
  | { name: 'categories_some', alias?: string  } 
  | { name: 'categories_none', alias?: string  } 
  | { name: 'brand', alias?: string  } 
  | { name: 'tags_every', alias?: string  } 
  | { name: 'tags_some', alias?: string  } 
  | { name: 'tags_none', alias?: string  } 
  | { name: 'images_every', alias?: string  } 
  | { name: 'images_some', alias?: string  } 
  | { name: 'images_none', alias?: string  } 
  | { name: 'shop', alias?: string  } 
  | { name: 'variants_every', alias?: string  } 
  | { name: 'variants_some', alias?: string  } 
  | { name: 'variants_none', alias?: string  } 
  | { name: 'reviews_every', alias?: string  } 
  | { name: 'reviews_some', alias?: string  } 
  | { name: 'reviews_none', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CategoryWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  product_every?: ProductWhereInput | null
  product_some?: ProductWhereInput | null
  product_none?: ProductWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: CategoryWhereInput[]
  OR?: CategoryWhereInput[]
  NOT?: CategoryWhereInput[]
}
export type CategoryWhereInputInputObject =
  | Extract<keyof CategoryWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'product_every', alias?: string  } 
  | { name: 'product_some', alias?: string  } 
  | { name: 'product_none', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface BrandWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  products_every?: ProductWhereInput | null
  products_some?: ProductWhereInput | null
  products_none?: ProductWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: BrandWhereInput[]
  OR?: BrandWhereInput[]
  NOT?: BrandWhereInput[]
}
export type BrandWhereInputInputObject =
  | Extract<keyof BrandWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'products_every', alias?: string  } 
  | { name: 'products_some', alias?: string  } 
  | { name: 'products_none', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TagWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  products_every?: ProductWhereInput | null
  products_some?: ProductWhereInput | null
  products_none?: ProductWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: TagWhereInput[]
  OR?: TagWhereInput[]
  NOT?: TagWhereInput[]
}
export type TagWhereInputInputObject =
  | Extract<keyof TagWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'products_every', alias?: string  } 
  | { name: 'products_some', alias?: string  } 
  | { name: 'products_none', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProductImageWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  imageUrl?: string | null
  imageUrl_not?: string | null
  imageUrl_in?: string[]
  imageUrl_not_in?: string[]
  imageUrl_lt?: string | null
  imageUrl_lte?: string | null
  imageUrl_gt?: string | null
  imageUrl_gte?: string | null
  imageUrl_contains?: string | null
  imageUrl_not_contains?: string | null
  imageUrl_starts_with?: string | null
  imageUrl_not_starts_with?: string | null
  imageUrl_ends_with?: string | null
  imageUrl_not_ends_with?: string | null
  largeImageUrl?: string | null
  largeImageUrl_not?: string | null
  largeImageUrl_in?: string[]
  largeImageUrl_not_in?: string[]
  largeImageUrl_lt?: string | null
  largeImageUrl_lte?: string | null
  largeImageUrl_gt?: string | null
  largeImageUrl_gte?: string | null
  largeImageUrl_contains?: string | null
  largeImageUrl_not_contains?: string | null
  largeImageUrl_starts_with?: string | null
  largeImageUrl_not_starts_with?: string | null
  largeImageUrl_ends_with?: string | null
  largeImageUrl_not_ends_with?: string | null
  product?: ProductWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: ProductImageWhereInput[]
  OR?: ProductImageWhereInput[]
  NOT?: ProductImageWhereInput[]
}
export type ProductImageWhereInputInputObject =
  | Extract<keyof ProductImageWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'imageUrl', alias?: string  } 
  | { name: 'imageUrl_not', alias?: string  } 
  | { name: 'imageUrl_in', alias?: string  } 
  | { name: 'imageUrl_not_in', alias?: string  } 
  | { name: 'imageUrl_lt', alias?: string  } 
  | { name: 'imageUrl_lte', alias?: string  } 
  | { name: 'imageUrl_gt', alias?: string  } 
  | { name: 'imageUrl_gte', alias?: string  } 
  | { name: 'imageUrl_contains', alias?: string  } 
  | { name: 'imageUrl_not_contains', alias?: string  } 
  | { name: 'imageUrl_starts_with', alias?: string  } 
  | { name: 'imageUrl_not_starts_with', alias?: string  } 
  | { name: 'imageUrl_ends_with', alias?: string  } 
  | { name: 'imageUrl_not_ends_with', alias?: string  } 
  | { name: 'largeImageUrl', alias?: string  } 
  | { name: 'largeImageUrl_not', alias?: string  } 
  | { name: 'largeImageUrl_in', alias?: string  } 
  | { name: 'largeImageUrl_not_in', alias?: string  } 
  | { name: 'largeImageUrl_lt', alias?: string  } 
  | { name: 'largeImageUrl_lte', alias?: string  } 
  | { name: 'largeImageUrl_gt', alias?: string  } 
  | { name: 'largeImageUrl_gte', alias?: string  } 
  | { name: 'largeImageUrl_contains', alias?: string  } 
  | { name: 'largeImageUrl_not_contains', alias?: string  } 
  | { name: 'largeImageUrl_starts_with', alias?: string  } 
  | { name: 'largeImageUrl_not_starts_with', alias?: string  } 
  | { name: 'largeImageUrl_ends_with', alias?: string  } 
  | { name: 'largeImageUrl_not_ends_with', alias?: string  } 
  | { name: 'product', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface VariantWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  product?: ProductWhereInput | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: VariantWhereInput[]
  OR?: VariantWhereInput[]
  NOT?: VariantWhereInput[]
}
export type VariantWhereInputInputObject =
  | Extract<keyof VariantWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'product', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CartWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  user?: UserWhereInput | null
  items_every?: CartItemWhereInput | null
  items_some?: CartItemWhereInput | null
  items_none?: CartItemWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: CartWhereInput[]
  OR?: CartWhereInput[]
  NOT?: CartWhereInput[]
}
export type CartWhereInputInputObject =
  | Extract<keyof CartWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'items_every', alias?: string  } 
  | { name: 'items_some', alias?: string  } 
  | { name: 'items_none', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CartItemWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  product?: ProductWhereInput | null
  quantity?: number | null
  quantity_not?: number | null
  quantity_in?: number[]
  quantity_not_in?: number[]
  quantity_lt?: number | null
  quantity_lte?: number | null
  quantity_gt?: number | null
  quantity_gte?: number | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  cart?: CartWhereInput | null
  AND?: CartItemWhereInput[]
  OR?: CartItemWhereInput[]
  NOT?: CartItemWhereInput[]
}
export type CartItemWhereInputInputObject =
  | Extract<keyof CartItemWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'product', alias?: string  } 
  | { name: 'quantity', alias?: string  } 
  | { name: 'quantity_not', alias?: string  } 
  | { name: 'quantity_in', alias?: string  } 
  | { name: 'quantity_not_in', alias?: string  } 
  | { name: 'quantity_lt', alias?: string  } 
  | { name: 'quantity_lte', alias?: string  } 
  | { name: 'quantity_gt', alias?: string  } 
  | { name: 'quantity_gte', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'cart', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ForumPostWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  postedBy?: UserWhereInput | null
  forum?: ForumWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  content?: string | null
  content_not?: string | null
  content_in?: string[]
  content_not_in?: string[]
  content_lt?: string | null
  content_lte?: string | null
  content_gt?: string | null
  content_gte?: string | null
  content_contains?: string | null
  content_not_contains?: string | null
  content_starts_with?: string | null
  content_not_starts_with?: string | null
  content_ends_with?: string | null
  content_not_ends_with?: string | null
  type?: prisma.ForumPostType | null
  type_not?: prisma.ForumPostType | null
  type_in?: prisma.ForumPostType[]
  type_not_in?: prisma.ForumPostType[]
  comments_every?: ForumPostCommentWhereInput | null
  comments_some?: ForumPostCommentWhereInput | null
  comments_none?: ForumPostCommentWhereInput | null
  AND?: ForumPostWhereInput[]
  OR?: ForumPostWhereInput[]
  NOT?: ForumPostWhereInput[]
}
export type ForumPostWhereInputInputObject =
  | Extract<keyof ForumPostWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'postedBy', alias?: string  } 
  | { name: 'forum', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'content_not', alias?: string  } 
  | { name: 'content_in', alias?: string  } 
  | { name: 'content_not_in', alias?: string  } 
  | { name: 'content_lt', alias?: string  } 
  | { name: 'content_lte', alias?: string  } 
  | { name: 'content_gt', alias?: string  } 
  | { name: 'content_gte', alias?: string  } 
  | { name: 'content_contains', alias?: string  } 
  | { name: 'content_not_contains', alias?: string  } 
  | { name: 'content_starts_with', alias?: string  } 
  | { name: 'content_not_starts_with', alias?: string  } 
  | { name: 'content_ends_with', alias?: string  } 
  | { name: 'content_not_ends_with', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'comments_every', alias?: string  } 
  | { name: 'comments_some', alias?: string  } 
  | { name: 'comments_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ForumWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  avatarPic?: string | null
  avatarPic_not?: string | null
  avatarPic_in?: string[]
  avatarPic_not_in?: string[]
  avatarPic_lt?: string | null
  avatarPic_lte?: string | null
  avatarPic_gt?: string | null
  avatarPic_gte?: string | null
  avatarPic_contains?: string | null
  avatarPic_not_contains?: string | null
  avatarPic_starts_with?: string | null
  avatarPic_not_starts_with?: string | null
  avatarPic_ends_with?: string | null
  avatarPic_not_ends_with?: string | null
  coverPic?: string | null
  coverPic_not?: string | null
  coverPic_in?: string[]
  coverPic_not_in?: string[]
  coverPic_lt?: string | null
  coverPic_lte?: string | null
  coverPic_gt?: string | null
  coverPic_gte?: string | null
  coverPic_contains?: string | null
  coverPic_not_contains?: string | null
  coverPic_starts_with?: string | null
  coverPic_not_starts_with?: string | null
  coverPic_ends_with?: string | null
  coverPic_not_ends_with?: string | null
  members_every?: UserWhereInput | null
  members_some?: UserWhereInput | null
  members_none?: UserWhereInput | null
  posts_every?: ForumPostWhereInput | null
  posts_some?: ForumPostWhereInput | null
  posts_none?: ForumPostWhereInput | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: ForumWhereInput[]
  OR?: ForumWhereInput[]
  NOT?: ForumWhereInput[]
}
export type ForumWhereInputInputObject =
  | Extract<keyof ForumWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'avatarPic', alias?: string  } 
  | { name: 'avatarPic_not', alias?: string  } 
  | { name: 'avatarPic_in', alias?: string  } 
  | { name: 'avatarPic_not_in', alias?: string  } 
  | { name: 'avatarPic_lt', alias?: string  } 
  | { name: 'avatarPic_lte', alias?: string  } 
  | { name: 'avatarPic_gt', alias?: string  } 
  | { name: 'avatarPic_gte', alias?: string  } 
  | { name: 'avatarPic_contains', alias?: string  } 
  | { name: 'avatarPic_not_contains', alias?: string  } 
  | { name: 'avatarPic_starts_with', alias?: string  } 
  | { name: 'avatarPic_not_starts_with', alias?: string  } 
  | { name: 'avatarPic_ends_with', alias?: string  } 
  | { name: 'avatarPic_not_ends_with', alias?: string  } 
  | { name: 'coverPic', alias?: string  } 
  | { name: 'coverPic_not', alias?: string  } 
  | { name: 'coverPic_in', alias?: string  } 
  | { name: 'coverPic_not_in', alias?: string  } 
  | { name: 'coverPic_lt', alias?: string  } 
  | { name: 'coverPic_lte', alias?: string  } 
  | { name: 'coverPic_gt', alias?: string  } 
  | { name: 'coverPic_gte', alias?: string  } 
  | { name: 'coverPic_contains', alias?: string  } 
  | { name: 'coverPic_not_contains', alias?: string  } 
  | { name: 'coverPic_starts_with', alias?: string  } 
  | { name: 'coverPic_not_starts_with', alias?: string  } 
  | { name: 'coverPic_ends_with', alias?: string  } 
  | { name: 'coverPic_not_ends_with', alias?: string  } 
  | { name: 'members_every', alias?: string  } 
  | { name: 'members_some', alias?: string  } 
  | { name: 'members_none', alias?: string  } 
  | { name: 'posts_every', alias?: string  } 
  | { name: 'posts_some', alias?: string  } 
  | { name: 'posts_none', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ForumPostCommentWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  user?: UserWhereInput | null
  forumPost?: ForumPostWhereInput | null
  comment?: string | null
  comment_not?: string | null
  comment_in?: string[]
  comment_not_in?: string[]
  comment_lt?: string | null
  comment_lte?: string | null
  comment_gt?: string | null
  comment_gte?: string | null
  comment_contains?: string | null
  comment_not_contains?: string | null
  comment_starts_with?: string | null
  comment_not_starts_with?: string | null
  comment_ends_with?: string | null
  comment_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: ForumPostCommentWhereInput[]
  OR?: ForumPostCommentWhereInput[]
  NOT?: ForumPostCommentWhereInput[]
}
export type ForumPostCommentWhereInputInputObject =
  | Extract<keyof ForumPostCommentWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'forumPost', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  | { name: 'comment_not', alias?: string  } 
  | { name: 'comment_in', alias?: string  } 
  | { name: 'comment_not_in', alias?: string  } 
  | { name: 'comment_lt', alias?: string  } 
  | { name: 'comment_lte', alias?: string  } 
  | { name: 'comment_gt', alias?: string  } 
  | { name: 'comment_gte', alias?: string  } 
  | { name: 'comment_contains', alias?: string  } 
  | { name: 'comment_not_contains', alias?: string  } 
  | { name: 'comment_starts_with', alias?: string  } 
  | { name: 'comment_not_starts_with', alias?: string  } 
  | { name: 'comment_ends_with', alias?: string  } 
  | { name: 'comment_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ShopImageWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  imageUrl?: string | null
  imageUrl_not?: string | null
  imageUrl_in?: string[]
  imageUrl_not_in?: string[]
  imageUrl_lt?: string | null
  imageUrl_lte?: string | null
  imageUrl_gt?: string | null
  imageUrl_gte?: string | null
  imageUrl_contains?: string | null
  imageUrl_not_contains?: string | null
  imageUrl_starts_with?: string | null
  imageUrl_not_starts_with?: string | null
  imageUrl_ends_with?: string | null
  imageUrl_not_ends_with?: string | null
  largeImageUrl?: string | null
  largeImageUrl_not?: string | null
  largeImageUrl_in?: string[]
  largeImageUrl_not_in?: string[]
  largeImageUrl_lt?: string | null
  largeImageUrl_lte?: string | null
  largeImageUrl_gt?: string | null
  largeImageUrl_gte?: string | null
  largeImageUrl_contains?: string | null
  largeImageUrl_not_contains?: string | null
  largeImageUrl_starts_with?: string | null
  largeImageUrl_not_starts_with?: string | null
  largeImageUrl_ends_with?: string | null
  largeImageUrl_not_ends_with?: string | null
  shop?: ShopWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: ShopImageWhereInput[]
  OR?: ShopImageWhereInput[]
  NOT?: ShopImageWhereInput[]
}
export type ShopImageWhereInputInputObject =
  | Extract<keyof ShopImageWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'imageUrl', alias?: string  } 
  | { name: 'imageUrl_not', alias?: string  } 
  | { name: 'imageUrl_in', alias?: string  } 
  | { name: 'imageUrl_not_in', alias?: string  } 
  | { name: 'imageUrl_lt', alias?: string  } 
  | { name: 'imageUrl_lte', alias?: string  } 
  | { name: 'imageUrl_gt', alias?: string  } 
  | { name: 'imageUrl_gte', alias?: string  } 
  | { name: 'imageUrl_contains', alias?: string  } 
  | { name: 'imageUrl_not_contains', alias?: string  } 
  | { name: 'imageUrl_starts_with', alias?: string  } 
  | { name: 'imageUrl_not_starts_with', alias?: string  } 
  | { name: 'imageUrl_ends_with', alias?: string  } 
  | { name: 'imageUrl_not_ends_with', alias?: string  } 
  | { name: 'largeImageUrl', alias?: string  } 
  | { name: 'largeImageUrl_not', alias?: string  } 
  | { name: 'largeImageUrl_in', alias?: string  } 
  | { name: 'largeImageUrl_not_in', alias?: string  } 
  | { name: 'largeImageUrl_lt', alias?: string  } 
  | { name: 'largeImageUrl_lte', alias?: string  } 
  | { name: 'largeImageUrl_gt', alias?: string  } 
  | { name: 'largeImageUrl_gte', alias?: string  } 
  | { name: 'largeImageUrl_contains', alias?: string  } 
  | { name: 'largeImageUrl_not_contains', alias?: string  } 
  | { name: 'largeImageUrl_starts_with', alias?: string  } 
  | { name: 'largeImageUrl_not_starts_with', alias?: string  } 
  | { name: 'largeImageUrl_ends_with', alias?: string  } 
  | { name: 'largeImageUrl_not_ends_with', alias?: string  } 
  | { name: 'shop', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ForumWhereUniqueInput {
  id?: string | null
  name?: string | null
}
export type ForumWhereUniqueInputInputObject =
  | Extract<keyof ForumWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface ForumPostWhereUniqueInput {
  id?: string | null
}
export type ForumPostWhereUniqueInputInputObject =
  | Extract<keyof ForumPostWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface ForumPostCommentWhereUniqueInput {
  id?: string | null
}
export type ForumPostCommentWhereUniqueInputInputObject =
  | Extract<keyof ForumPostCommentWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface ShopWhereUniqueInput {
  id?: string | null
  name?: string | null
}
export type ShopWhereUniqueInputInputObject =
  | Extract<keyof ShopWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface ShopImageWhereUniqueInput {
  id?: string | null
}
export type ShopImageWhereUniqueInputInputObject =
  | Extract<keyof ShopImageWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface UserImageWhereUniqueInput {
  id?: string | null
}
export type UserImageWhereUniqueInputInputObject =
  | Extract<keyof UserImageWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface ProductWhereUniqueInput {
  id?: string | null
}
export type ProductWhereUniqueInputInputObject =
  | Extract<keyof ProductWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface CartWhereUniqueInput {
  id?: string | null
}
export type CartWhereUniqueInputInputObject =
  | Extract<keyof CartWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface CartItemWhereUniqueInput {
  id?: string | null
}
export type CartItemWhereUniqueInputInputObject =
  | Extract<keyof CartItemWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface orderItemWhereUniqueInput {
  id?: string | null
}
export type orderItemWhereUniqueInputInputObject =
  | Extract<keyof orderItemWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface orderItemWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  price?: string | null
  price_not?: string | null
  price_in?: string[]
  price_not_in?: string[]
  price_lt?: string | null
  price_lte?: string | null
  price_gt?: string | null
  price_gte?: string | null
  price_contains?: string | null
  price_not_contains?: string | null
  price_starts_with?: string | null
  price_not_starts_with?: string | null
  price_ends_with?: string | null
  price_not_ends_with?: string | null
  quantity?: number | null
  quantity_not?: number | null
  quantity_in?: number[]
  quantity_not_in?: number[]
  quantity_lt?: number | null
  quantity_lte?: number | null
  quantity_gt?: number | null
  quantity_gte?: number | null
  imageUrl?: string | null
  imageUrl_not?: string | null
  imageUrl_in?: string[]
  imageUrl_not_in?: string[]
  imageUrl_lt?: string | null
  imageUrl_lte?: string | null
  imageUrl_gt?: string | null
  imageUrl_gte?: string | null
  imageUrl_contains?: string | null
  imageUrl_not_contains?: string | null
  imageUrl_starts_with?: string | null
  imageUrl_not_starts_with?: string | null
  imageUrl_ends_with?: string | null
  imageUrl_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: orderItemWhereInput[]
  OR?: orderItemWhereInput[]
  NOT?: orderItemWhereInput[]
}
export type orderItemWhereInputInputObject =
  | Extract<keyof orderItemWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'price_not', alias?: string  } 
  | { name: 'price_in', alias?: string  } 
  | { name: 'price_not_in', alias?: string  } 
  | { name: 'price_lt', alias?: string  } 
  | { name: 'price_lte', alias?: string  } 
  | { name: 'price_gt', alias?: string  } 
  | { name: 'price_gte', alias?: string  } 
  | { name: 'price_contains', alias?: string  } 
  | { name: 'price_not_contains', alias?: string  } 
  | { name: 'price_starts_with', alias?: string  } 
  | { name: 'price_not_starts_with', alias?: string  } 
  | { name: 'price_ends_with', alias?: string  } 
  | { name: 'price_not_ends_with', alias?: string  } 
  | { name: 'quantity', alias?: string  } 
  | { name: 'quantity_not', alias?: string  } 
  | { name: 'quantity_in', alias?: string  } 
  | { name: 'quantity_not_in', alias?: string  } 
  | { name: 'quantity_lt', alias?: string  } 
  | { name: 'quantity_lte', alias?: string  } 
  | { name: 'quantity_gt', alias?: string  } 
  | { name: 'quantity_gte', alias?: string  } 
  | { name: 'imageUrl', alias?: string  } 
  | { name: 'imageUrl_not', alias?: string  } 
  | { name: 'imageUrl_in', alias?: string  } 
  | { name: 'imageUrl_not_in', alias?: string  } 
  | { name: 'imageUrl_lt', alias?: string  } 
  | { name: 'imageUrl_lte', alias?: string  } 
  | { name: 'imageUrl_gt', alias?: string  } 
  | { name: 'imageUrl_gte', alias?: string  } 
  | { name: 'imageUrl_contains', alias?: string  } 
  | { name: 'imageUrl_not_contains', alias?: string  } 
  | { name: 'imageUrl_starts_with', alias?: string  } 
  | { name: 'imageUrl_not_starts_with', alias?: string  } 
  | { name: 'imageUrl_ends_with', alias?: string  } 
  | { name: 'imageUrl_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface OrderWhereUniqueInput {
  id?: string | null
}
export type OrderWhereUniqueInputInputObject =
  | Extract<keyof OrderWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface OrderWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  items_every?: orderItemWhereInput | null
  items_some?: orderItemWhereInput | null
  items_none?: orderItemWhereInput | null
  total?: string | null
  total_not?: string | null
  total_in?: string[]
  total_not_in?: string[]
  total_lt?: string | null
  total_lte?: string | null
  total_gt?: string | null
  total_gte?: string | null
  total_contains?: string | null
  total_not_contains?: string | null
  total_starts_with?: string | null
  total_not_starts_with?: string | null
  total_ends_with?: string | null
  total_not_ends_with?: string | null
  user?: UserWhereInput | null
  paymentId?: string | null
  paymentId_not?: string | null
  paymentId_in?: string[]
  paymentId_not_in?: string[]
  paymentId_lt?: string | null
  paymentId_lte?: string | null
  paymentId_gt?: string | null
  paymentId_gte?: string | null
  paymentId_contains?: string | null
  paymentId_not_contains?: string | null
  paymentId_starts_with?: string | null
  paymentId_not_starts_with?: string | null
  paymentId_ends_with?: string | null
  paymentId_not_ends_with?: string | null
  PayerID?: string | null
  PayerID_not?: string | null
  PayerID_in?: string[]
  PayerID_not_in?: string[]
  PayerID_lt?: string | null
  PayerID_lte?: string | null
  PayerID_gt?: string | null
  PayerID_gte?: string | null
  PayerID_contains?: string | null
  PayerID_not_contains?: string | null
  PayerID_starts_with?: string | null
  PayerID_not_starts_with?: string | null
  PayerID_ends_with?: string | null
  PayerID_not_ends_with?: string | null
  imageUrl?: string | null
  imageUrl_not?: string | null
  imageUrl_in?: string[]
  imageUrl_not_in?: string[]
  imageUrl_lt?: string | null
  imageUrl_lte?: string | null
  imageUrl_gt?: string | null
  imageUrl_gte?: string | null
  imageUrl_contains?: string | null
  imageUrl_not_contains?: string | null
  imageUrl_starts_with?: string | null
  imageUrl_not_starts_with?: string | null
  imageUrl_ends_with?: string | null
  imageUrl_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: OrderWhereInput[]
  OR?: OrderWhereInput[]
  NOT?: OrderWhereInput[]
}
export type OrderWhereInputInputObject =
  | Extract<keyof OrderWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'items_every', alias?: string  } 
  | { name: 'items_some', alias?: string  } 
  | { name: 'items_none', alias?: string  } 
  | { name: 'total', alias?: string  } 
  | { name: 'total_not', alias?: string  } 
  | { name: 'total_in', alias?: string  } 
  | { name: 'total_not_in', alias?: string  } 
  | { name: 'total_lt', alias?: string  } 
  | { name: 'total_lte', alias?: string  } 
  | { name: 'total_gt', alias?: string  } 
  | { name: 'total_gte', alias?: string  } 
  | { name: 'total_contains', alias?: string  } 
  | { name: 'total_not_contains', alias?: string  } 
  | { name: 'total_starts_with', alias?: string  } 
  | { name: 'total_not_starts_with', alias?: string  } 
  | { name: 'total_ends_with', alias?: string  } 
  | { name: 'total_not_ends_with', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'paymentId', alias?: string  } 
  | { name: 'paymentId_not', alias?: string  } 
  | { name: 'paymentId_in', alias?: string  } 
  | { name: 'paymentId_not_in', alias?: string  } 
  | { name: 'paymentId_lt', alias?: string  } 
  | { name: 'paymentId_lte', alias?: string  } 
  | { name: 'paymentId_gt', alias?: string  } 
  | { name: 'paymentId_gte', alias?: string  } 
  | { name: 'paymentId_contains', alias?: string  } 
  | { name: 'paymentId_not_contains', alias?: string  } 
  | { name: 'paymentId_starts_with', alias?: string  } 
  | { name: 'paymentId_not_starts_with', alias?: string  } 
  | { name: 'paymentId_ends_with', alias?: string  } 
  | { name: 'paymentId_not_ends_with', alias?: string  } 
  | { name: 'PayerID', alias?: string  } 
  | { name: 'PayerID_not', alias?: string  } 
  | { name: 'PayerID_in', alias?: string  } 
  | { name: 'PayerID_not_in', alias?: string  } 
  | { name: 'PayerID_lt', alias?: string  } 
  | { name: 'PayerID_lte', alias?: string  } 
  | { name: 'PayerID_gt', alias?: string  } 
  | { name: 'PayerID_gte', alias?: string  } 
  | { name: 'PayerID_contains', alias?: string  } 
  | { name: 'PayerID_not_contains', alias?: string  } 
  | { name: 'PayerID_starts_with', alias?: string  } 
  | { name: 'PayerID_not_starts_with', alias?: string  } 
  | { name: 'PayerID_ends_with', alias?: string  } 
  | { name: 'PayerID_not_ends_with', alias?: string  } 
  | { name: 'imageUrl', alias?: string  } 
  | { name: 'imageUrl_not', alias?: string  } 
  | { name: 'imageUrl_in', alias?: string  } 
  | { name: 'imageUrl_not_in', alias?: string  } 
  | { name: 'imageUrl_lt', alias?: string  } 
  | { name: 'imageUrl_lte', alias?: string  } 
  | { name: 'imageUrl_gt', alias?: string  } 
  | { name: 'imageUrl_gte', alias?: string  } 
  | { name: 'imageUrl_contains', alias?: string  } 
  | { name: 'imageUrl_not_contains', alias?: string  } 
  | { name: 'imageUrl_starts_with', alias?: string  } 
  | { name: 'imageUrl_not_starts_with', alias?: string  } 
  | { name: 'imageUrl_ends_with', alias?: string  } 
  | { name: 'imageUrl_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface BrandWhereUniqueInput {
  id?: string | null
  name?: string | null
}
export type BrandWhereUniqueInputInputObject =
  | Extract<keyof BrandWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface TagWhereUniqueInput {
  id?: string | null
  name?: string | null
}
export type TagWhereUniqueInputInputObject =
  | Extract<keyof TagWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface CategoryWhereUniqueInput {
  id?: string | null
  name?: string | null
}
export type CategoryWhereUniqueInputInputObject =
  | Extract<keyof CategoryWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface ProductImageWhereUniqueInput {
  id?: string | null
}
export type ProductImageWhereUniqueInputInputObject =
  | Extract<keyof ProductImageWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface VariantWhereUniqueInput {
  id?: string | null
}
export type VariantWhereUniqueInputInputObject =
  | Extract<keyof VariantWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface ProductReviewWhereUniqueInput {
  id?: string | null
}
export type ProductReviewWhereUniqueInputInputObject =
  | Extract<keyof ProductReviewWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface UserCreateInput {
  id?: string | null
  firebaseId?: string
  email?: string | null
  name?: string
  username?: string
  profilePic?: string | null
  isAnonymous?: boolean | null
  emailVerified?: boolean | null
  shops?: ShopCreateManyWithoutOwnersInput | null
  images?: UserImageCreateManyWithoutUserInput | null
  productReviews?: ProductReviewCreateManyWithoutUserInput | null
  cartItems?: CartCreateOneWithoutUserInput | null
  forumposts?: ForumPostCreateManyWithoutPostedByInput | null
  forums?: ForumCreateManyWithoutMembersInput | null
  postComments?: ForumPostCommentCreateManyWithoutUserInput | null
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'firebaseId', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'profilePic', alias?: string  } 
  | { name: 'isAnonymous', alias?: string  } 
  | { name: 'emailVerified', alias?: string  } 
  | { name: 'shops', alias?: string  } 
  | { name: 'images', alias?: string  } 
  | { name: 'productReviews', alias?: string  } 
  | { name: 'cartItems', alias?: string  } 
  | { name: 'forumposts', alias?: string  } 
  | { name: 'forums', alias?: string  } 
  | { name: 'postComments', alias?: string  } 
  
export interface ShopCreateManyWithoutOwnersInput {
  create?: ShopCreateWithoutOwnersInput[]
  connect?: ShopWhereUniqueInput[]
}
export type ShopCreateManyWithoutOwnersInputInputObject =
  | Extract<keyof ShopCreateManyWithoutOwnersInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ShopCreateWithoutOwnersInput {
  id?: string | null
  name?: string
  description?: string
  category?: string
  live?: boolean | null
  images?: ShopImageCreateManyWithoutShopInput | null
  products?: ProductCreateManyWithoutShopInput | null
}
export type ShopCreateWithoutOwnersInputInputObject =
  | Extract<keyof ShopCreateWithoutOwnersInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'live', alias?: string  } 
  | { name: 'images', alias?: string  } 
  | { name: 'products', alias?: string  } 
  
export interface ShopImageCreateManyWithoutShopInput {
  create?: ShopImageCreateWithoutShopInput[]
  connect?: ShopImageWhereUniqueInput[]
}
export type ShopImageCreateManyWithoutShopInputInputObject =
  | Extract<keyof ShopImageCreateManyWithoutShopInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ShopImageCreateWithoutShopInput {
  id?: string | null
  imageUrl?: string
  largeImageUrl?: string | null
}
export type ShopImageCreateWithoutShopInputInputObject =
  | Extract<keyof ShopImageCreateWithoutShopInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'imageUrl', alias?: string  } 
  | { name: 'largeImageUrl', alias?: string  } 
  
export interface ProductCreateManyWithoutShopInput {
  create?: ProductCreateWithoutShopInput[]
  connect?: ProductWhereUniqueInput[]
}
export type ProductCreateManyWithoutShopInputInputObject =
  | Extract<keyof ProductCreateManyWithoutShopInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProductCreateWithoutShopInput {
  id?: string | null
  title?: string
  description?: string
  price?: string
  categories?: CategoryCreateManyWithoutProductInput | null
  brand?: BrandCreateOneWithoutProductsInput | null
  tags?: TagCreateManyWithoutProductsInput | null
  images?: ProductImageCreateManyWithoutProductInput | null
  variants?: VariantCreateManyWithoutProductInput | null
  reviews?: ProductReviewCreateManyWithoutProductInput | null
}
export type ProductCreateWithoutShopInputInputObject =
  | Extract<keyof ProductCreateWithoutShopInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'categories', alias?: string  } 
  | { name: 'brand', alias?: string  } 
  | { name: 'tags', alias?: string  } 
  | { name: 'images', alias?: string  } 
  | { name: 'variants', alias?: string  } 
  | { name: 'reviews', alias?: string  } 
  
export interface CategoryCreateManyWithoutProductInput {
  create?: CategoryCreateWithoutProductInput[]
  connect?: CategoryWhereUniqueInput[]
}
export type CategoryCreateManyWithoutProductInputInputObject =
  | Extract<keyof CategoryCreateManyWithoutProductInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CategoryCreateWithoutProductInput {
  id?: string | null
  name?: string
}
export type CategoryCreateWithoutProductInputInputObject =
  | Extract<keyof CategoryCreateWithoutProductInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface BrandCreateOneWithoutProductsInput {
  create?: BrandCreateWithoutProductsInput | null
  connect?: BrandWhereUniqueInput | null
}
export type BrandCreateOneWithoutProductsInputInputObject =
  | Extract<keyof BrandCreateOneWithoutProductsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface BrandCreateWithoutProductsInput {
  id?: string | null
  name?: string
}
export type BrandCreateWithoutProductsInputInputObject =
  | Extract<keyof BrandCreateWithoutProductsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface TagCreateManyWithoutProductsInput {
  create?: TagCreateWithoutProductsInput[]
  connect?: TagWhereUniqueInput[]
}
export type TagCreateManyWithoutProductsInputInputObject =
  | Extract<keyof TagCreateManyWithoutProductsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TagCreateWithoutProductsInput {
  id?: string | null
  name?: string
}
export type TagCreateWithoutProductsInputInputObject =
  | Extract<keyof TagCreateWithoutProductsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface ProductImageCreateManyWithoutProductInput {
  create?: ProductImageCreateWithoutProductInput[]
  connect?: ProductImageWhereUniqueInput[]
}
export type ProductImageCreateManyWithoutProductInputInputObject =
  | Extract<keyof ProductImageCreateManyWithoutProductInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProductImageCreateWithoutProductInput {
  id?: string | null
  imageUrl?: string
  largeImageUrl?: string | null
}
export type ProductImageCreateWithoutProductInputInputObject =
  | Extract<keyof ProductImageCreateWithoutProductInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'imageUrl', alias?: string  } 
  | { name: 'largeImageUrl', alias?: string  } 
  
export interface VariantCreateManyWithoutProductInput {
  create?: VariantCreateWithoutProductInput[]
  connect?: VariantWhereUniqueInput[]
}
export type VariantCreateManyWithoutProductInputInputObject =
  | Extract<keyof VariantCreateManyWithoutProductInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface VariantCreateWithoutProductInput {
  id?: string | null
  name?: string
  values?: VariantCreatevaluesInput | null
}
export type VariantCreateWithoutProductInputInputObject =
  | Extract<keyof VariantCreateWithoutProductInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'values', alias?: string  } 
  
export interface VariantCreatevaluesInput {
  set?: string[]
}
export type VariantCreatevaluesInputInputObject =
  | Extract<keyof VariantCreatevaluesInput, string>
  | { name: 'set', alias?: string  } 
  
export interface ProductReviewCreateManyWithoutProductInput {
  create?: ProductReviewCreateWithoutProductInput[]
  connect?: ProductReviewWhereUniqueInput[]
}
export type ProductReviewCreateManyWithoutProductInputInputObject =
  | Extract<keyof ProductReviewCreateManyWithoutProductInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProductReviewCreateWithoutProductInput {
  id?: string | null
  user?: UserCreateOneWithoutProductReviewsInput
  rating?: number
  review?: string | null
}
export type ProductReviewCreateWithoutProductInputInputObject =
  | Extract<keyof ProductReviewCreateWithoutProductInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'rating', alias?: string  } 
  | { name: 'review', alias?: string  } 
  
export interface UserCreateOneWithoutProductReviewsInput {
  create?: UserCreateWithoutProductReviewsInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutProductReviewsInputInputObject =
  | Extract<keyof UserCreateOneWithoutProductReviewsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutProductReviewsInput {
  id?: string | null
  firebaseId?: string
  email?: string | null
  name?: string
  username?: string
  profilePic?: string | null
  isAnonymous?: boolean | null
  emailVerified?: boolean | null
  shops?: ShopCreateManyWithoutOwnersInput | null
  images?: UserImageCreateManyWithoutUserInput | null
  cartItems?: CartCreateOneWithoutUserInput | null
  forumposts?: ForumPostCreateManyWithoutPostedByInput | null
  forums?: ForumCreateManyWithoutMembersInput | null
  postComments?: ForumPostCommentCreateManyWithoutUserInput | null
}
export type UserCreateWithoutProductReviewsInputInputObject =
  | Extract<keyof UserCreateWithoutProductReviewsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'firebaseId', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'profilePic', alias?: string  } 
  | { name: 'isAnonymous', alias?: string  } 
  | { name: 'emailVerified', alias?: string  } 
  | { name: 'shops', alias?: string  } 
  | { name: 'images', alias?: string  } 
  | { name: 'cartItems', alias?: string  } 
  | { name: 'forumposts', alias?: string  } 
  | { name: 'forums', alias?: string  } 
  | { name: 'postComments', alias?: string  } 
  
export interface UserImageCreateManyWithoutUserInput {
  create?: UserImageCreateWithoutUserInput[]
  connect?: UserImageWhereUniqueInput[]
}
export type UserImageCreateManyWithoutUserInputInputObject =
  | Extract<keyof UserImageCreateManyWithoutUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserImageCreateWithoutUserInput {
  id?: string | null
  imageUrl?: string
}
export type UserImageCreateWithoutUserInputInputObject =
  | Extract<keyof UserImageCreateWithoutUserInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'imageUrl', alias?: string  } 
  
export interface CartCreateOneWithoutUserInput {
  create?: CartCreateWithoutUserInput | null
  connect?: CartWhereUniqueInput | null
}
export type CartCreateOneWithoutUserInputInputObject =
  | Extract<keyof CartCreateOneWithoutUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CartCreateWithoutUserInput {
  id?: string | null
  items?: CartItemCreateManyWithoutCartInput | null
}
export type CartCreateWithoutUserInputInputObject =
  | Extract<keyof CartCreateWithoutUserInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'items', alias?: string  } 
  
export interface CartItemCreateManyWithoutCartInput {
  create?: CartItemCreateWithoutCartInput[]
  connect?: CartItemWhereUniqueInput[]
}
export type CartItemCreateManyWithoutCartInputInputObject =
  | Extract<keyof CartItemCreateManyWithoutCartInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CartItemCreateWithoutCartInput {
  id?: string | null
  product?: ProductCreateOneInput
  quantity?: number
  variants?: CartItemCreatevariantsInput | null
}
export type CartItemCreateWithoutCartInputInputObject =
  | Extract<keyof CartItemCreateWithoutCartInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'product', alias?: string  } 
  | { name: 'quantity', alias?: string  } 
  | { name: 'variants', alias?: string  } 
  
export interface ProductCreateOneInput {
  create?: ProductCreateInput | null
  connect?: ProductWhereUniqueInput | null
}
export type ProductCreateOneInputInputObject =
  | Extract<keyof ProductCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProductCreateInput {
  id?: string | null
  title?: string
  description?: string
  price?: string
  categories?: CategoryCreateManyWithoutProductInput | null
  brand?: BrandCreateOneWithoutProductsInput | null
  tags?: TagCreateManyWithoutProductsInput | null
  images?: ProductImageCreateManyWithoutProductInput | null
  shop?: ShopCreateOneWithoutProductsInput
  variants?: VariantCreateManyWithoutProductInput | null
  reviews?: ProductReviewCreateManyWithoutProductInput | null
}
export type ProductCreateInputInputObject =
  | Extract<keyof ProductCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'categories', alias?: string  } 
  | { name: 'brand', alias?: string  } 
  | { name: 'tags', alias?: string  } 
  | { name: 'images', alias?: string  } 
  | { name: 'shop', alias?: string  } 
  | { name: 'variants', alias?: string  } 
  | { name: 'reviews', alias?: string  } 
  
export interface ShopCreateOneWithoutProductsInput {
  create?: ShopCreateWithoutProductsInput | null
  connect?: ShopWhereUniqueInput | null
}
export type ShopCreateOneWithoutProductsInputInputObject =
  | Extract<keyof ShopCreateOneWithoutProductsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ShopCreateWithoutProductsInput {
  id?: string | null
  name?: string
  description?: string
  category?: string
  live?: boolean | null
  owners?: UserCreateManyWithoutShopsInput | null
  images?: ShopImageCreateManyWithoutShopInput | null
}
export type ShopCreateWithoutProductsInputInputObject =
  | Extract<keyof ShopCreateWithoutProductsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'live', alias?: string  } 
  | { name: 'owners', alias?: string  } 
  | { name: 'images', alias?: string  } 
  
export interface UserCreateManyWithoutShopsInput {
  create?: UserCreateWithoutShopsInput[]
  connect?: UserWhereUniqueInput[]
}
export type UserCreateManyWithoutShopsInputInputObject =
  | Extract<keyof UserCreateManyWithoutShopsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutShopsInput {
  id?: string | null
  firebaseId?: string
  email?: string | null
  name?: string
  username?: string
  profilePic?: string | null
  isAnonymous?: boolean | null
  emailVerified?: boolean | null
  images?: UserImageCreateManyWithoutUserInput | null
  productReviews?: ProductReviewCreateManyWithoutUserInput | null
  cartItems?: CartCreateOneWithoutUserInput | null
  forumposts?: ForumPostCreateManyWithoutPostedByInput | null
  forums?: ForumCreateManyWithoutMembersInput | null
  postComments?: ForumPostCommentCreateManyWithoutUserInput | null
}
export type UserCreateWithoutShopsInputInputObject =
  | Extract<keyof UserCreateWithoutShopsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'firebaseId', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'profilePic', alias?: string  } 
  | { name: 'isAnonymous', alias?: string  } 
  | { name: 'emailVerified', alias?: string  } 
  | { name: 'images', alias?: string  } 
  | { name: 'productReviews', alias?: string  } 
  | { name: 'cartItems', alias?: string  } 
  | { name: 'forumposts', alias?: string  } 
  | { name: 'forums', alias?: string  } 
  | { name: 'postComments', alias?: string  } 
  
export interface ProductReviewCreateManyWithoutUserInput {
  create?: ProductReviewCreateWithoutUserInput[]
  connect?: ProductReviewWhereUniqueInput[]
}
export type ProductReviewCreateManyWithoutUserInputInputObject =
  | Extract<keyof ProductReviewCreateManyWithoutUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProductReviewCreateWithoutUserInput {
  id?: string | null
  product?: ProductCreateOneWithoutReviewsInput
  rating?: number
  review?: string | null
}
export type ProductReviewCreateWithoutUserInputInputObject =
  | Extract<keyof ProductReviewCreateWithoutUserInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'product', alias?: string  } 
  | { name: 'rating', alias?: string  } 
  | { name: 'review', alias?: string  } 
  
export interface ProductCreateOneWithoutReviewsInput {
  create?: ProductCreateWithoutReviewsInput | null
  connect?: ProductWhereUniqueInput | null
}
export type ProductCreateOneWithoutReviewsInputInputObject =
  | Extract<keyof ProductCreateOneWithoutReviewsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProductCreateWithoutReviewsInput {
  id?: string | null
  title?: string
  description?: string
  price?: string
  categories?: CategoryCreateManyWithoutProductInput | null
  brand?: BrandCreateOneWithoutProductsInput | null
  tags?: TagCreateManyWithoutProductsInput | null
  images?: ProductImageCreateManyWithoutProductInput | null
  shop?: ShopCreateOneWithoutProductsInput
  variants?: VariantCreateManyWithoutProductInput | null
}
export type ProductCreateWithoutReviewsInputInputObject =
  | Extract<keyof ProductCreateWithoutReviewsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'categories', alias?: string  } 
  | { name: 'brand', alias?: string  } 
  | { name: 'tags', alias?: string  } 
  | { name: 'images', alias?: string  } 
  | { name: 'shop', alias?: string  } 
  | { name: 'variants', alias?: string  } 
  
export interface ForumPostCreateManyWithoutPostedByInput {
  create?: ForumPostCreateWithoutPostedByInput[]
  connect?: ForumPostWhereUniqueInput[]
}
export type ForumPostCreateManyWithoutPostedByInputInputObject =
  | Extract<keyof ForumPostCreateManyWithoutPostedByInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ForumPostCreateWithoutPostedByInput {
  id?: string | null
  forum?: ForumCreateOneWithoutPostsInput
  title?: string
  content?: string | null
  type?: prisma.ForumPostType
  comments?: ForumPostCommentCreateManyWithoutForumPostInput | null
}
export type ForumPostCreateWithoutPostedByInputInputObject =
  | Extract<keyof ForumPostCreateWithoutPostedByInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'forum', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'comments', alias?: string  } 
  
export interface ForumCreateOneWithoutPostsInput {
  create?: ForumCreateWithoutPostsInput | null
  connect?: ForumWhereUniqueInput | null
}
export type ForumCreateOneWithoutPostsInputInputObject =
  | Extract<keyof ForumCreateOneWithoutPostsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ForumCreateWithoutPostsInput {
  id?: string | null
  avatarPic?: string | null
  coverPic?: string | null
  members?: UserCreateManyWithoutForumsInput | null
  name?: string
  description?: string | null
}
export type ForumCreateWithoutPostsInputInputObject =
  | Extract<keyof ForumCreateWithoutPostsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'avatarPic', alias?: string  } 
  | { name: 'coverPic', alias?: string  } 
  | { name: 'members', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  
export interface UserCreateManyWithoutForumsInput {
  create?: UserCreateWithoutForumsInput[]
  connect?: UserWhereUniqueInput[]
}
export type UserCreateManyWithoutForumsInputInputObject =
  | Extract<keyof UserCreateManyWithoutForumsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutForumsInput {
  id?: string | null
  firebaseId?: string
  email?: string | null
  name?: string
  username?: string
  profilePic?: string | null
  isAnonymous?: boolean | null
  emailVerified?: boolean | null
  shops?: ShopCreateManyWithoutOwnersInput | null
  images?: UserImageCreateManyWithoutUserInput | null
  productReviews?: ProductReviewCreateManyWithoutUserInput | null
  cartItems?: CartCreateOneWithoutUserInput | null
  forumposts?: ForumPostCreateManyWithoutPostedByInput | null
  postComments?: ForumPostCommentCreateManyWithoutUserInput | null
}
export type UserCreateWithoutForumsInputInputObject =
  | Extract<keyof UserCreateWithoutForumsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'firebaseId', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'profilePic', alias?: string  } 
  | { name: 'isAnonymous', alias?: string  } 
  | { name: 'emailVerified', alias?: string  } 
  | { name: 'shops', alias?: string  } 
  | { name: 'images', alias?: string  } 
  | { name: 'productReviews', alias?: string  } 
  | { name: 'cartItems', alias?: string  } 
  | { name: 'forumposts', alias?: string  } 
  | { name: 'postComments', alias?: string  } 
  
export interface ForumPostCommentCreateManyWithoutUserInput {
  create?: ForumPostCommentCreateWithoutUserInput[]
  connect?: ForumPostCommentWhereUniqueInput[]
}
export type ForumPostCommentCreateManyWithoutUserInputInputObject =
  | Extract<keyof ForumPostCommentCreateManyWithoutUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ForumPostCommentCreateWithoutUserInput {
  id?: string | null
  forumPost?: ForumPostCreateOneWithoutCommentsInput
  comment?: string
}
export type ForumPostCommentCreateWithoutUserInputInputObject =
  | Extract<keyof ForumPostCommentCreateWithoutUserInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'forumPost', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  
export interface ForumPostCreateOneWithoutCommentsInput {
  create?: ForumPostCreateWithoutCommentsInput | null
  connect?: ForumPostWhereUniqueInput | null
}
export type ForumPostCreateOneWithoutCommentsInputInputObject =
  | Extract<keyof ForumPostCreateOneWithoutCommentsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ForumPostCreateWithoutCommentsInput {
  id?: string | null
  postedBy?: UserCreateOneWithoutForumpostsInput
  forum?: ForumCreateOneWithoutPostsInput
  title?: string
  content?: string | null
  type?: prisma.ForumPostType
}
export type ForumPostCreateWithoutCommentsInputInputObject =
  | Extract<keyof ForumPostCreateWithoutCommentsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'postedBy', alias?: string  } 
  | { name: 'forum', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'type', alias?: string  } 
  
export interface UserCreateOneWithoutForumpostsInput {
  create?: UserCreateWithoutForumpostsInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutForumpostsInputInputObject =
  | Extract<keyof UserCreateOneWithoutForumpostsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutForumpostsInput {
  id?: string | null
  firebaseId?: string
  email?: string | null
  name?: string
  username?: string
  profilePic?: string | null
  isAnonymous?: boolean | null
  emailVerified?: boolean | null
  shops?: ShopCreateManyWithoutOwnersInput | null
  images?: UserImageCreateManyWithoutUserInput | null
  productReviews?: ProductReviewCreateManyWithoutUserInput | null
  cartItems?: CartCreateOneWithoutUserInput | null
  forums?: ForumCreateManyWithoutMembersInput | null
  postComments?: ForumPostCommentCreateManyWithoutUserInput | null
}
export type UserCreateWithoutForumpostsInputInputObject =
  | Extract<keyof UserCreateWithoutForumpostsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'firebaseId', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'profilePic', alias?: string  } 
  | { name: 'isAnonymous', alias?: string  } 
  | { name: 'emailVerified', alias?: string  } 
  | { name: 'shops', alias?: string  } 
  | { name: 'images', alias?: string  } 
  | { name: 'productReviews', alias?: string  } 
  | { name: 'cartItems', alias?: string  } 
  | { name: 'forums', alias?: string  } 
  | { name: 'postComments', alias?: string  } 
  
export interface ForumCreateManyWithoutMembersInput {
  create?: ForumCreateWithoutMembersInput[]
  connect?: ForumWhereUniqueInput[]
}
export type ForumCreateManyWithoutMembersInputInputObject =
  | Extract<keyof ForumCreateManyWithoutMembersInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ForumCreateWithoutMembersInput {
  id?: string | null
  avatarPic?: string | null
  coverPic?: string | null
  posts?: ForumPostCreateManyWithoutForumInput | null
  name?: string
  description?: string | null
}
export type ForumCreateWithoutMembersInputInputObject =
  | Extract<keyof ForumCreateWithoutMembersInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'avatarPic', alias?: string  } 
  | { name: 'coverPic', alias?: string  } 
  | { name: 'posts', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  
export interface ForumPostCreateManyWithoutForumInput {
  create?: ForumPostCreateWithoutForumInput[]
  connect?: ForumPostWhereUniqueInput[]
}
export type ForumPostCreateManyWithoutForumInputInputObject =
  | Extract<keyof ForumPostCreateManyWithoutForumInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ForumPostCreateWithoutForumInput {
  id?: string | null
  postedBy?: UserCreateOneWithoutForumpostsInput
  title?: string
  content?: string | null
  type?: prisma.ForumPostType
  comments?: ForumPostCommentCreateManyWithoutForumPostInput | null
}
export type ForumPostCreateWithoutForumInputInputObject =
  | Extract<keyof ForumPostCreateWithoutForumInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'postedBy', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'comments', alias?: string  } 
  
export interface ForumPostCommentCreateManyWithoutForumPostInput {
  create?: ForumPostCommentCreateWithoutForumPostInput[]
  connect?: ForumPostCommentWhereUniqueInput[]
}
export type ForumPostCommentCreateManyWithoutForumPostInputInputObject =
  | Extract<keyof ForumPostCommentCreateManyWithoutForumPostInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ForumPostCommentCreateWithoutForumPostInput {
  id?: string | null
  user?: UserCreateOneWithoutPostCommentsInput
  comment?: string
}
export type ForumPostCommentCreateWithoutForumPostInputInputObject =
  | Extract<keyof ForumPostCommentCreateWithoutForumPostInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  
export interface UserCreateOneWithoutPostCommentsInput {
  create?: UserCreateWithoutPostCommentsInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutPostCommentsInputInputObject =
  | Extract<keyof UserCreateOneWithoutPostCommentsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutPostCommentsInput {
  id?: string | null
  firebaseId?: string
  email?: string | null
  name?: string
  username?: string
  profilePic?: string | null
  isAnonymous?: boolean | null
  emailVerified?: boolean | null
  shops?: ShopCreateManyWithoutOwnersInput | null
  images?: UserImageCreateManyWithoutUserInput | null
  productReviews?: ProductReviewCreateManyWithoutUserInput | null
  cartItems?: CartCreateOneWithoutUserInput | null
  forumposts?: ForumPostCreateManyWithoutPostedByInput | null
  forums?: ForumCreateManyWithoutMembersInput | null
}
export type UserCreateWithoutPostCommentsInputInputObject =
  | Extract<keyof UserCreateWithoutPostCommentsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'firebaseId', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'profilePic', alias?: string  } 
  | { name: 'isAnonymous', alias?: string  } 
  | { name: 'emailVerified', alias?: string  } 
  | { name: 'shops', alias?: string  } 
  | { name: 'images', alias?: string  } 
  | { name: 'productReviews', alias?: string  } 
  | { name: 'cartItems', alias?: string  } 
  | { name: 'forumposts', alias?: string  } 
  | { name: 'forums', alias?: string  } 
  
export interface CartItemCreatevariantsInput {
  set?: string[]
}
export type CartItemCreatevariantsInputInputObject =
  | Extract<keyof CartItemCreatevariantsInput, string>
  | { name: 'set', alias?: string  } 
  
export interface UserUpdateInput {
  firebaseId?: string | null
  email?: string | null
  name?: string | null
  username?: string | null
  profilePic?: string | null
  isAnonymous?: boolean | null
  emailVerified?: boolean | null
  shops?: ShopUpdateManyWithoutOwnersInput | null
  images?: UserImageUpdateManyWithoutUserInput | null
  productReviews?: ProductReviewUpdateManyWithoutUserInput | null
  cartItems?: CartUpdateOneWithoutUserInput | null
  forumposts?: ForumPostUpdateManyWithoutPostedByInput | null
  forums?: ForumUpdateManyWithoutMembersInput | null
  postComments?: ForumPostCommentUpdateManyWithoutUserInput | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'firebaseId', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'profilePic', alias?: string  } 
  | { name: 'isAnonymous', alias?: string  } 
  | { name: 'emailVerified', alias?: string  } 
  | { name: 'shops', alias?: string  } 
  | { name: 'images', alias?: string  } 
  | { name: 'productReviews', alias?: string  } 
  | { name: 'cartItems', alias?: string  } 
  | { name: 'forumposts', alias?: string  } 
  | { name: 'forums', alias?: string  } 
  | { name: 'postComments', alias?: string  } 
  
export interface ShopUpdateManyWithoutOwnersInput {
  create?: ShopCreateWithoutOwnersInput[]
  delete?: ShopWhereUniqueInput[]
  connect?: ShopWhereUniqueInput[]
  set?: ShopWhereUniqueInput[]
  disconnect?: ShopWhereUniqueInput[]
  update?: ShopUpdateWithWhereUniqueWithoutOwnersInput[]
  upsert?: ShopUpsertWithWhereUniqueWithoutOwnersInput[]
  deleteMany?: ShopScalarWhereInput[]
  updateMany?: ShopUpdateManyWithWhereNestedInput[]
}
export type ShopUpdateManyWithoutOwnersInputInputObject =
  | Extract<keyof ShopUpdateManyWithoutOwnersInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ShopUpdateWithWhereUniqueWithoutOwnersInput {
  where?: ShopWhereUniqueInput
  data?: ShopUpdateWithoutOwnersDataInput
}
export type ShopUpdateWithWhereUniqueWithoutOwnersInputInputObject =
  | Extract<keyof ShopUpdateWithWhereUniqueWithoutOwnersInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ShopUpdateWithoutOwnersDataInput {
  name?: string | null
  description?: string | null
  category?: string | null
  live?: boolean | null
  images?: ShopImageUpdateManyWithoutShopInput | null
  products?: ProductUpdateManyWithoutShopInput | null
}
export type ShopUpdateWithoutOwnersDataInputInputObject =
  | Extract<keyof ShopUpdateWithoutOwnersDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'live', alias?: string  } 
  | { name: 'images', alias?: string  } 
  | { name: 'products', alias?: string  } 
  
export interface ShopImageUpdateManyWithoutShopInput {
  create?: ShopImageCreateWithoutShopInput[]
  delete?: ShopImageWhereUniqueInput[]
  connect?: ShopImageWhereUniqueInput[]
  set?: ShopImageWhereUniqueInput[]
  disconnect?: ShopImageWhereUniqueInput[]
  update?: ShopImageUpdateWithWhereUniqueWithoutShopInput[]
  upsert?: ShopImageUpsertWithWhereUniqueWithoutShopInput[]
  deleteMany?: ShopImageScalarWhereInput[]
  updateMany?: ShopImageUpdateManyWithWhereNestedInput[]
}
export type ShopImageUpdateManyWithoutShopInputInputObject =
  | Extract<keyof ShopImageUpdateManyWithoutShopInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ShopImageUpdateWithWhereUniqueWithoutShopInput {
  where?: ShopImageWhereUniqueInput
  data?: ShopImageUpdateWithoutShopDataInput
}
export type ShopImageUpdateWithWhereUniqueWithoutShopInputInputObject =
  | Extract<keyof ShopImageUpdateWithWhereUniqueWithoutShopInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ShopImageUpdateWithoutShopDataInput {
  imageUrl?: string | null
  largeImageUrl?: string | null
}
export type ShopImageUpdateWithoutShopDataInputInputObject =
  | Extract<keyof ShopImageUpdateWithoutShopDataInput, string>
  | { name: 'imageUrl', alias?: string  } 
  | { name: 'largeImageUrl', alias?: string  } 
  
export interface ShopImageUpsertWithWhereUniqueWithoutShopInput {
  where?: ShopImageWhereUniqueInput
  update?: ShopImageUpdateWithoutShopDataInput
  create?: ShopImageCreateWithoutShopInput
}
export type ShopImageUpsertWithWhereUniqueWithoutShopInputInputObject =
  | Extract<keyof ShopImageUpsertWithWhereUniqueWithoutShopInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ShopImageScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  imageUrl?: string | null
  imageUrl_not?: string | null
  imageUrl_in?: string[]
  imageUrl_not_in?: string[]
  imageUrl_lt?: string | null
  imageUrl_lte?: string | null
  imageUrl_gt?: string | null
  imageUrl_gte?: string | null
  imageUrl_contains?: string | null
  imageUrl_not_contains?: string | null
  imageUrl_starts_with?: string | null
  imageUrl_not_starts_with?: string | null
  imageUrl_ends_with?: string | null
  imageUrl_not_ends_with?: string | null
  largeImageUrl?: string | null
  largeImageUrl_not?: string | null
  largeImageUrl_in?: string[]
  largeImageUrl_not_in?: string[]
  largeImageUrl_lt?: string | null
  largeImageUrl_lte?: string | null
  largeImageUrl_gt?: string | null
  largeImageUrl_gte?: string | null
  largeImageUrl_contains?: string | null
  largeImageUrl_not_contains?: string | null
  largeImageUrl_starts_with?: string | null
  largeImageUrl_not_starts_with?: string | null
  largeImageUrl_ends_with?: string | null
  largeImageUrl_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: ShopImageScalarWhereInput[]
  OR?: ShopImageScalarWhereInput[]
  NOT?: ShopImageScalarWhereInput[]
}
export type ShopImageScalarWhereInputInputObject =
  | Extract<keyof ShopImageScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'imageUrl', alias?: string  } 
  | { name: 'imageUrl_not', alias?: string  } 
  | { name: 'imageUrl_in', alias?: string  } 
  | { name: 'imageUrl_not_in', alias?: string  } 
  | { name: 'imageUrl_lt', alias?: string  } 
  | { name: 'imageUrl_lte', alias?: string  } 
  | { name: 'imageUrl_gt', alias?: string  } 
  | { name: 'imageUrl_gte', alias?: string  } 
  | { name: 'imageUrl_contains', alias?: string  } 
  | { name: 'imageUrl_not_contains', alias?: string  } 
  | { name: 'imageUrl_starts_with', alias?: string  } 
  | { name: 'imageUrl_not_starts_with', alias?: string  } 
  | { name: 'imageUrl_ends_with', alias?: string  } 
  | { name: 'imageUrl_not_ends_with', alias?: string  } 
  | { name: 'largeImageUrl', alias?: string  } 
  | { name: 'largeImageUrl_not', alias?: string  } 
  | { name: 'largeImageUrl_in', alias?: string  } 
  | { name: 'largeImageUrl_not_in', alias?: string  } 
  | { name: 'largeImageUrl_lt', alias?: string  } 
  | { name: 'largeImageUrl_lte', alias?: string  } 
  | { name: 'largeImageUrl_gt', alias?: string  } 
  | { name: 'largeImageUrl_gte', alias?: string  } 
  | { name: 'largeImageUrl_contains', alias?: string  } 
  | { name: 'largeImageUrl_not_contains', alias?: string  } 
  | { name: 'largeImageUrl_starts_with', alias?: string  } 
  | { name: 'largeImageUrl_not_starts_with', alias?: string  } 
  | { name: 'largeImageUrl_ends_with', alias?: string  } 
  | { name: 'largeImageUrl_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ShopImageUpdateManyWithWhereNestedInput {
  where?: ShopImageScalarWhereInput
  data?: ShopImageUpdateManyDataInput
}
export type ShopImageUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof ShopImageUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ShopImageUpdateManyDataInput {
  imageUrl?: string | null
  largeImageUrl?: string | null
}
export type ShopImageUpdateManyDataInputInputObject =
  | Extract<keyof ShopImageUpdateManyDataInput, string>
  | { name: 'imageUrl', alias?: string  } 
  | { name: 'largeImageUrl', alias?: string  } 
  
export interface ProductUpdateManyWithoutShopInput {
  create?: ProductCreateWithoutShopInput[]
  delete?: ProductWhereUniqueInput[]
  connect?: ProductWhereUniqueInput[]
  set?: ProductWhereUniqueInput[]
  disconnect?: ProductWhereUniqueInput[]
  update?: ProductUpdateWithWhereUniqueWithoutShopInput[]
  upsert?: ProductUpsertWithWhereUniqueWithoutShopInput[]
  deleteMany?: ProductScalarWhereInput[]
  updateMany?: ProductUpdateManyWithWhereNestedInput[]
}
export type ProductUpdateManyWithoutShopInputInputObject =
  | Extract<keyof ProductUpdateManyWithoutShopInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ProductUpdateWithWhereUniqueWithoutShopInput {
  where?: ProductWhereUniqueInput
  data?: ProductUpdateWithoutShopDataInput
}
export type ProductUpdateWithWhereUniqueWithoutShopInputInputObject =
  | Extract<keyof ProductUpdateWithWhereUniqueWithoutShopInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProductUpdateWithoutShopDataInput {
  title?: string | null
  description?: string | null
  price?: string | null
  categories?: CategoryUpdateManyWithoutProductInput | null
  brand?: BrandUpdateOneWithoutProductsInput | null
  tags?: TagUpdateManyWithoutProductsInput | null
  images?: ProductImageUpdateManyWithoutProductInput | null
  variants?: VariantUpdateManyWithoutProductInput | null
  reviews?: ProductReviewUpdateManyWithoutProductInput | null
}
export type ProductUpdateWithoutShopDataInputInputObject =
  | Extract<keyof ProductUpdateWithoutShopDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'categories', alias?: string  } 
  | { name: 'brand', alias?: string  } 
  | { name: 'tags', alias?: string  } 
  | { name: 'images', alias?: string  } 
  | { name: 'variants', alias?: string  } 
  | { name: 'reviews', alias?: string  } 
  
export interface CategoryUpdateManyWithoutProductInput {
  create?: CategoryCreateWithoutProductInput[]
  delete?: CategoryWhereUniqueInput[]
  connect?: CategoryWhereUniqueInput[]
  set?: CategoryWhereUniqueInput[]
  disconnect?: CategoryWhereUniqueInput[]
  update?: CategoryUpdateWithWhereUniqueWithoutProductInput[]
  upsert?: CategoryUpsertWithWhereUniqueWithoutProductInput[]
  deleteMany?: CategoryScalarWhereInput[]
  updateMany?: CategoryUpdateManyWithWhereNestedInput[]
}
export type CategoryUpdateManyWithoutProductInputInputObject =
  | Extract<keyof CategoryUpdateManyWithoutProductInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface CategoryUpdateWithWhereUniqueWithoutProductInput {
  where?: CategoryWhereUniqueInput
  data?: CategoryUpdateWithoutProductDataInput
}
export type CategoryUpdateWithWhereUniqueWithoutProductInputInputObject =
  | Extract<keyof CategoryUpdateWithWhereUniqueWithoutProductInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface CategoryUpdateWithoutProductDataInput {
  name?: string | null
}
export type CategoryUpdateWithoutProductDataInputInputObject =
  | Extract<keyof CategoryUpdateWithoutProductDataInput, string>
  | { name: 'name', alias?: string  } 
  
export interface CategoryUpsertWithWhereUniqueWithoutProductInput {
  where?: CategoryWhereUniqueInput
  update?: CategoryUpdateWithoutProductDataInput
  create?: CategoryCreateWithoutProductInput
}
export type CategoryUpsertWithWhereUniqueWithoutProductInputInputObject =
  | Extract<keyof CategoryUpsertWithWhereUniqueWithoutProductInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CategoryScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: CategoryScalarWhereInput[]
  OR?: CategoryScalarWhereInput[]
  NOT?: CategoryScalarWhereInput[]
}
export type CategoryScalarWhereInputInputObject =
  | Extract<keyof CategoryScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CategoryUpdateManyWithWhereNestedInput {
  where?: CategoryScalarWhereInput
  data?: CategoryUpdateManyDataInput
}
export type CategoryUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof CategoryUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface CategoryUpdateManyDataInput {
  name?: string | null
}
export type CategoryUpdateManyDataInputInputObject =
  | Extract<keyof CategoryUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  
export interface BrandUpdateOneWithoutProductsInput {
  create?: BrandCreateWithoutProductsInput | null
  update?: BrandUpdateWithoutProductsDataInput | null
  upsert?: BrandUpsertWithoutProductsInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: BrandWhereUniqueInput | null
}
export type BrandUpdateOneWithoutProductsInputInputObject =
  | Extract<keyof BrandUpdateOneWithoutProductsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface BrandUpdateWithoutProductsDataInput {
  name?: string | null
}
export type BrandUpdateWithoutProductsDataInputInputObject =
  | Extract<keyof BrandUpdateWithoutProductsDataInput, string>
  | { name: 'name', alias?: string  } 
  
export interface BrandUpsertWithoutProductsInput {
  update?: BrandUpdateWithoutProductsDataInput
  create?: BrandCreateWithoutProductsInput
}
export type BrandUpsertWithoutProductsInputInputObject =
  | Extract<keyof BrandUpsertWithoutProductsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface TagUpdateManyWithoutProductsInput {
  create?: TagCreateWithoutProductsInput[]
  delete?: TagWhereUniqueInput[]
  connect?: TagWhereUniqueInput[]
  set?: TagWhereUniqueInput[]
  disconnect?: TagWhereUniqueInput[]
  update?: TagUpdateWithWhereUniqueWithoutProductsInput[]
  upsert?: TagUpsertWithWhereUniqueWithoutProductsInput[]
  deleteMany?: TagScalarWhereInput[]
  updateMany?: TagUpdateManyWithWhereNestedInput[]
}
export type TagUpdateManyWithoutProductsInputInputObject =
  | Extract<keyof TagUpdateManyWithoutProductsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface TagUpdateWithWhereUniqueWithoutProductsInput {
  where?: TagWhereUniqueInput
  data?: TagUpdateWithoutProductsDataInput
}
export type TagUpdateWithWhereUniqueWithoutProductsInputInputObject =
  | Extract<keyof TagUpdateWithWhereUniqueWithoutProductsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface TagUpdateWithoutProductsDataInput {
  name?: string | null
}
export type TagUpdateWithoutProductsDataInputInputObject =
  | Extract<keyof TagUpdateWithoutProductsDataInput, string>
  | { name: 'name', alias?: string  } 
  
export interface TagUpsertWithWhereUniqueWithoutProductsInput {
  where?: TagWhereUniqueInput
  update?: TagUpdateWithoutProductsDataInput
  create?: TagCreateWithoutProductsInput
}
export type TagUpsertWithWhereUniqueWithoutProductsInputInputObject =
  | Extract<keyof TagUpsertWithWhereUniqueWithoutProductsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface TagScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: TagScalarWhereInput[]
  OR?: TagScalarWhereInput[]
  NOT?: TagScalarWhereInput[]
}
export type TagScalarWhereInputInputObject =
  | Extract<keyof TagScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TagUpdateManyWithWhereNestedInput {
  where?: TagScalarWhereInput
  data?: TagUpdateManyDataInput
}
export type TagUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof TagUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface TagUpdateManyDataInput {
  name?: string | null
}
export type TagUpdateManyDataInputInputObject =
  | Extract<keyof TagUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  
export interface ProductImageUpdateManyWithoutProductInput {
  create?: ProductImageCreateWithoutProductInput[]
  delete?: ProductImageWhereUniqueInput[]
  connect?: ProductImageWhereUniqueInput[]
  set?: ProductImageWhereUniqueInput[]
  disconnect?: ProductImageWhereUniqueInput[]
  update?: ProductImageUpdateWithWhereUniqueWithoutProductInput[]
  upsert?: ProductImageUpsertWithWhereUniqueWithoutProductInput[]
  deleteMany?: ProductImageScalarWhereInput[]
  updateMany?: ProductImageUpdateManyWithWhereNestedInput[]
}
export type ProductImageUpdateManyWithoutProductInputInputObject =
  | Extract<keyof ProductImageUpdateManyWithoutProductInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ProductImageUpdateWithWhereUniqueWithoutProductInput {
  where?: ProductImageWhereUniqueInput
  data?: ProductImageUpdateWithoutProductDataInput
}
export type ProductImageUpdateWithWhereUniqueWithoutProductInputInputObject =
  | Extract<keyof ProductImageUpdateWithWhereUniqueWithoutProductInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProductImageUpdateWithoutProductDataInput {
  imageUrl?: string | null
  largeImageUrl?: string | null
}
export type ProductImageUpdateWithoutProductDataInputInputObject =
  | Extract<keyof ProductImageUpdateWithoutProductDataInput, string>
  | { name: 'imageUrl', alias?: string  } 
  | { name: 'largeImageUrl', alias?: string  } 
  
export interface ProductImageUpsertWithWhereUniqueWithoutProductInput {
  where?: ProductImageWhereUniqueInput
  update?: ProductImageUpdateWithoutProductDataInput
  create?: ProductImageCreateWithoutProductInput
}
export type ProductImageUpsertWithWhereUniqueWithoutProductInputInputObject =
  | Extract<keyof ProductImageUpsertWithWhereUniqueWithoutProductInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProductImageScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  imageUrl?: string | null
  imageUrl_not?: string | null
  imageUrl_in?: string[]
  imageUrl_not_in?: string[]
  imageUrl_lt?: string | null
  imageUrl_lte?: string | null
  imageUrl_gt?: string | null
  imageUrl_gte?: string | null
  imageUrl_contains?: string | null
  imageUrl_not_contains?: string | null
  imageUrl_starts_with?: string | null
  imageUrl_not_starts_with?: string | null
  imageUrl_ends_with?: string | null
  imageUrl_not_ends_with?: string | null
  largeImageUrl?: string | null
  largeImageUrl_not?: string | null
  largeImageUrl_in?: string[]
  largeImageUrl_not_in?: string[]
  largeImageUrl_lt?: string | null
  largeImageUrl_lte?: string | null
  largeImageUrl_gt?: string | null
  largeImageUrl_gte?: string | null
  largeImageUrl_contains?: string | null
  largeImageUrl_not_contains?: string | null
  largeImageUrl_starts_with?: string | null
  largeImageUrl_not_starts_with?: string | null
  largeImageUrl_ends_with?: string | null
  largeImageUrl_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: ProductImageScalarWhereInput[]
  OR?: ProductImageScalarWhereInput[]
  NOT?: ProductImageScalarWhereInput[]
}
export type ProductImageScalarWhereInputInputObject =
  | Extract<keyof ProductImageScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'imageUrl', alias?: string  } 
  | { name: 'imageUrl_not', alias?: string  } 
  | { name: 'imageUrl_in', alias?: string  } 
  | { name: 'imageUrl_not_in', alias?: string  } 
  | { name: 'imageUrl_lt', alias?: string  } 
  | { name: 'imageUrl_lte', alias?: string  } 
  | { name: 'imageUrl_gt', alias?: string  } 
  | { name: 'imageUrl_gte', alias?: string  } 
  | { name: 'imageUrl_contains', alias?: string  } 
  | { name: 'imageUrl_not_contains', alias?: string  } 
  | { name: 'imageUrl_starts_with', alias?: string  } 
  | { name: 'imageUrl_not_starts_with', alias?: string  } 
  | { name: 'imageUrl_ends_with', alias?: string  } 
  | { name: 'imageUrl_not_ends_with', alias?: string  } 
  | { name: 'largeImageUrl', alias?: string  } 
  | { name: 'largeImageUrl_not', alias?: string  } 
  | { name: 'largeImageUrl_in', alias?: string  } 
  | { name: 'largeImageUrl_not_in', alias?: string  } 
  | { name: 'largeImageUrl_lt', alias?: string  } 
  | { name: 'largeImageUrl_lte', alias?: string  } 
  | { name: 'largeImageUrl_gt', alias?: string  } 
  | { name: 'largeImageUrl_gte', alias?: string  } 
  | { name: 'largeImageUrl_contains', alias?: string  } 
  | { name: 'largeImageUrl_not_contains', alias?: string  } 
  | { name: 'largeImageUrl_starts_with', alias?: string  } 
  | { name: 'largeImageUrl_not_starts_with', alias?: string  } 
  | { name: 'largeImageUrl_ends_with', alias?: string  } 
  | { name: 'largeImageUrl_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProductImageUpdateManyWithWhereNestedInput {
  where?: ProductImageScalarWhereInput
  data?: ProductImageUpdateManyDataInput
}
export type ProductImageUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof ProductImageUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProductImageUpdateManyDataInput {
  imageUrl?: string | null
  largeImageUrl?: string | null
}
export type ProductImageUpdateManyDataInputInputObject =
  | Extract<keyof ProductImageUpdateManyDataInput, string>
  | { name: 'imageUrl', alias?: string  } 
  | { name: 'largeImageUrl', alias?: string  } 
  
export interface VariantUpdateManyWithoutProductInput {
  create?: VariantCreateWithoutProductInput[]
  delete?: VariantWhereUniqueInput[]
  connect?: VariantWhereUniqueInput[]
  set?: VariantWhereUniqueInput[]
  disconnect?: VariantWhereUniqueInput[]
  update?: VariantUpdateWithWhereUniqueWithoutProductInput[]
  upsert?: VariantUpsertWithWhereUniqueWithoutProductInput[]
  deleteMany?: VariantScalarWhereInput[]
  updateMany?: VariantUpdateManyWithWhereNestedInput[]
}
export type VariantUpdateManyWithoutProductInputInputObject =
  | Extract<keyof VariantUpdateManyWithoutProductInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface VariantUpdateWithWhereUniqueWithoutProductInput {
  where?: VariantWhereUniqueInput
  data?: VariantUpdateWithoutProductDataInput
}
export type VariantUpdateWithWhereUniqueWithoutProductInputInputObject =
  | Extract<keyof VariantUpdateWithWhereUniqueWithoutProductInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface VariantUpdateWithoutProductDataInput {
  name?: string | null
  values?: VariantUpdatevaluesInput | null
}
export type VariantUpdateWithoutProductDataInputInputObject =
  | Extract<keyof VariantUpdateWithoutProductDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'values', alias?: string  } 
  
export interface VariantUpdatevaluesInput {
  set?: string[]
}
export type VariantUpdatevaluesInputInputObject =
  | Extract<keyof VariantUpdatevaluesInput, string>
  | { name: 'set', alias?: string  } 
  
export interface VariantUpsertWithWhereUniqueWithoutProductInput {
  where?: VariantWhereUniqueInput
  update?: VariantUpdateWithoutProductDataInput
  create?: VariantCreateWithoutProductInput
}
export type VariantUpsertWithWhereUniqueWithoutProductInputInputObject =
  | Extract<keyof VariantUpsertWithWhereUniqueWithoutProductInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface VariantScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: VariantScalarWhereInput[]
  OR?: VariantScalarWhereInput[]
  NOT?: VariantScalarWhereInput[]
}
export type VariantScalarWhereInputInputObject =
  | Extract<keyof VariantScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface VariantUpdateManyWithWhereNestedInput {
  where?: VariantScalarWhereInput
  data?: VariantUpdateManyDataInput
}
export type VariantUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof VariantUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface VariantUpdateManyDataInput {
  name?: string | null
  values?: VariantUpdatevaluesInput | null
}
export type VariantUpdateManyDataInputInputObject =
  | Extract<keyof VariantUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'values', alias?: string  } 
  
export interface ProductReviewUpdateManyWithoutProductInput {
  create?: ProductReviewCreateWithoutProductInput[]
  delete?: ProductReviewWhereUniqueInput[]
  connect?: ProductReviewWhereUniqueInput[]
  set?: ProductReviewWhereUniqueInput[]
  disconnect?: ProductReviewWhereUniqueInput[]
  update?: ProductReviewUpdateWithWhereUniqueWithoutProductInput[]
  upsert?: ProductReviewUpsertWithWhereUniqueWithoutProductInput[]
  deleteMany?: ProductReviewScalarWhereInput[]
  updateMany?: ProductReviewUpdateManyWithWhereNestedInput[]
}
export type ProductReviewUpdateManyWithoutProductInputInputObject =
  | Extract<keyof ProductReviewUpdateManyWithoutProductInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ProductReviewUpdateWithWhereUniqueWithoutProductInput {
  where?: ProductReviewWhereUniqueInput
  data?: ProductReviewUpdateWithoutProductDataInput
}
export type ProductReviewUpdateWithWhereUniqueWithoutProductInputInputObject =
  | Extract<keyof ProductReviewUpdateWithWhereUniqueWithoutProductInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProductReviewUpdateWithoutProductDataInput {
  user?: UserUpdateOneRequiredWithoutProductReviewsInput | null
  rating?: number | null
  review?: string | null
}
export type ProductReviewUpdateWithoutProductDataInputInputObject =
  | Extract<keyof ProductReviewUpdateWithoutProductDataInput, string>
  | { name: 'user', alias?: string  } 
  | { name: 'rating', alias?: string  } 
  | { name: 'review', alias?: string  } 
  
export interface UserUpdateOneRequiredWithoutProductReviewsInput {
  create?: UserCreateWithoutProductReviewsInput | null
  update?: UserUpdateWithoutProductReviewsDataInput | null
  upsert?: UserUpsertWithoutProductReviewsInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredWithoutProductReviewsInputInputObject =
  | Extract<keyof UserUpdateOneRequiredWithoutProductReviewsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutProductReviewsDataInput {
  firebaseId?: string | null
  email?: string | null
  name?: string | null
  username?: string | null
  profilePic?: string | null
  isAnonymous?: boolean | null
  emailVerified?: boolean | null
  shops?: ShopUpdateManyWithoutOwnersInput | null
  images?: UserImageUpdateManyWithoutUserInput | null
  cartItems?: CartUpdateOneWithoutUserInput | null
  forumposts?: ForumPostUpdateManyWithoutPostedByInput | null
  forums?: ForumUpdateManyWithoutMembersInput | null
  postComments?: ForumPostCommentUpdateManyWithoutUserInput | null
}
export type UserUpdateWithoutProductReviewsDataInputInputObject =
  | Extract<keyof UserUpdateWithoutProductReviewsDataInput, string>
  | { name: 'firebaseId', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'profilePic', alias?: string  } 
  | { name: 'isAnonymous', alias?: string  } 
  | { name: 'emailVerified', alias?: string  } 
  | { name: 'shops', alias?: string  } 
  | { name: 'images', alias?: string  } 
  | { name: 'cartItems', alias?: string  } 
  | { name: 'forumposts', alias?: string  } 
  | { name: 'forums', alias?: string  } 
  | { name: 'postComments', alias?: string  } 
  
export interface UserImageUpdateManyWithoutUserInput {
  create?: UserImageCreateWithoutUserInput[]
  delete?: UserImageWhereUniqueInput[]
  connect?: UserImageWhereUniqueInput[]
  set?: UserImageWhereUniqueInput[]
  disconnect?: UserImageWhereUniqueInput[]
  update?: UserImageUpdateWithWhereUniqueWithoutUserInput[]
  upsert?: UserImageUpsertWithWhereUniqueWithoutUserInput[]
  deleteMany?: UserImageScalarWhereInput[]
  updateMany?: UserImageUpdateManyWithWhereNestedInput[]
}
export type UserImageUpdateManyWithoutUserInputInputObject =
  | Extract<keyof UserImageUpdateManyWithoutUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface UserImageUpdateWithWhereUniqueWithoutUserInput {
  where?: UserImageWhereUniqueInput
  data?: UserImageUpdateWithoutUserDataInput
}
export type UserImageUpdateWithWhereUniqueWithoutUserInputInputObject =
  | Extract<keyof UserImageUpdateWithWhereUniqueWithoutUserInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface UserImageUpdateWithoutUserDataInput {
  imageUrl?: string | null
}
export type UserImageUpdateWithoutUserDataInputInputObject =
  | Extract<keyof UserImageUpdateWithoutUserDataInput, string>
  | { name: 'imageUrl', alias?: string  } 
  
export interface UserImageUpsertWithWhereUniqueWithoutUserInput {
  where?: UserImageWhereUniqueInput
  update?: UserImageUpdateWithoutUserDataInput
  create?: UserImageCreateWithoutUserInput
}
export type UserImageUpsertWithWhereUniqueWithoutUserInputInputObject =
  | Extract<keyof UserImageUpsertWithWhereUniqueWithoutUserInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserImageScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  imageUrl?: string | null
  imageUrl_not?: string | null
  imageUrl_in?: string[]
  imageUrl_not_in?: string[]
  imageUrl_lt?: string | null
  imageUrl_lte?: string | null
  imageUrl_gt?: string | null
  imageUrl_gte?: string | null
  imageUrl_contains?: string | null
  imageUrl_not_contains?: string | null
  imageUrl_starts_with?: string | null
  imageUrl_not_starts_with?: string | null
  imageUrl_ends_with?: string | null
  imageUrl_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: UserImageScalarWhereInput[]
  OR?: UserImageScalarWhereInput[]
  NOT?: UserImageScalarWhereInput[]
}
export type UserImageScalarWhereInputInputObject =
  | Extract<keyof UserImageScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'imageUrl', alias?: string  } 
  | { name: 'imageUrl_not', alias?: string  } 
  | { name: 'imageUrl_in', alias?: string  } 
  | { name: 'imageUrl_not_in', alias?: string  } 
  | { name: 'imageUrl_lt', alias?: string  } 
  | { name: 'imageUrl_lte', alias?: string  } 
  | { name: 'imageUrl_gt', alias?: string  } 
  | { name: 'imageUrl_gte', alias?: string  } 
  | { name: 'imageUrl_contains', alias?: string  } 
  | { name: 'imageUrl_not_contains', alias?: string  } 
  | { name: 'imageUrl_starts_with', alias?: string  } 
  | { name: 'imageUrl_not_starts_with', alias?: string  } 
  | { name: 'imageUrl_ends_with', alias?: string  } 
  | { name: 'imageUrl_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserImageUpdateManyWithWhereNestedInput {
  where?: UserImageScalarWhereInput
  data?: UserImageUpdateManyDataInput
}
export type UserImageUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof UserImageUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface UserImageUpdateManyDataInput {
  imageUrl?: string | null
}
export type UserImageUpdateManyDataInputInputObject =
  | Extract<keyof UserImageUpdateManyDataInput, string>
  | { name: 'imageUrl', alias?: string  } 
  
export interface CartUpdateOneWithoutUserInput {
  create?: CartCreateWithoutUserInput | null
  update?: CartUpdateWithoutUserDataInput | null
  upsert?: CartUpsertWithoutUserInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: CartWhereUniqueInput | null
}
export type CartUpdateOneWithoutUserInputInputObject =
  | Extract<keyof CartUpdateOneWithoutUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CartUpdateWithoutUserDataInput {
  items?: CartItemUpdateManyWithoutCartInput | null
}
export type CartUpdateWithoutUserDataInputInputObject =
  | Extract<keyof CartUpdateWithoutUserDataInput, string>
  | { name: 'items', alias?: string  } 
  
export interface CartItemUpdateManyWithoutCartInput {
  create?: CartItemCreateWithoutCartInput[]
  delete?: CartItemWhereUniqueInput[]
  connect?: CartItemWhereUniqueInput[]
  set?: CartItemWhereUniqueInput[]
  disconnect?: CartItemWhereUniqueInput[]
  update?: CartItemUpdateWithWhereUniqueWithoutCartInput[]
  upsert?: CartItemUpsertWithWhereUniqueWithoutCartInput[]
  deleteMany?: CartItemScalarWhereInput[]
  updateMany?: CartItemUpdateManyWithWhereNestedInput[]
}
export type CartItemUpdateManyWithoutCartInputInputObject =
  | Extract<keyof CartItemUpdateManyWithoutCartInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface CartItemUpdateWithWhereUniqueWithoutCartInput {
  where?: CartItemWhereUniqueInput
  data?: CartItemUpdateWithoutCartDataInput
}
export type CartItemUpdateWithWhereUniqueWithoutCartInputInputObject =
  | Extract<keyof CartItemUpdateWithWhereUniqueWithoutCartInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface CartItemUpdateWithoutCartDataInput {
  product?: ProductUpdateOneRequiredInput | null
  quantity?: number | null
  variants?: CartItemUpdatevariantsInput | null
}
export type CartItemUpdateWithoutCartDataInputInputObject =
  | Extract<keyof CartItemUpdateWithoutCartDataInput, string>
  | { name: 'product', alias?: string  } 
  | { name: 'quantity', alias?: string  } 
  | { name: 'variants', alias?: string  } 
  
export interface ProductUpdateOneRequiredInput {
  create?: ProductCreateInput | null
  update?: ProductUpdateDataInput | null
  upsert?: ProductUpsertNestedInput | null
  connect?: ProductWhereUniqueInput | null
}
export type ProductUpdateOneRequiredInputInputObject =
  | Extract<keyof ProductUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProductUpdateDataInput {
  title?: string | null
  description?: string | null
  price?: string | null
  categories?: CategoryUpdateManyWithoutProductInput | null
  brand?: BrandUpdateOneWithoutProductsInput | null
  tags?: TagUpdateManyWithoutProductsInput | null
  images?: ProductImageUpdateManyWithoutProductInput | null
  shop?: ShopUpdateOneRequiredWithoutProductsInput | null
  variants?: VariantUpdateManyWithoutProductInput | null
  reviews?: ProductReviewUpdateManyWithoutProductInput | null
}
export type ProductUpdateDataInputInputObject =
  | Extract<keyof ProductUpdateDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'categories', alias?: string  } 
  | { name: 'brand', alias?: string  } 
  | { name: 'tags', alias?: string  } 
  | { name: 'images', alias?: string  } 
  | { name: 'shop', alias?: string  } 
  | { name: 'variants', alias?: string  } 
  | { name: 'reviews', alias?: string  } 
  
export interface ShopUpdateOneRequiredWithoutProductsInput {
  create?: ShopCreateWithoutProductsInput | null
  update?: ShopUpdateWithoutProductsDataInput | null
  upsert?: ShopUpsertWithoutProductsInput | null
  connect?: ShopWhereUniqueInput | null
}
export type ShopUpdateOneRequiredWithoutProductsInputInputObject =
  | Extract<keyof ShopUpdateOneRequiredWithoutProductsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ShopUpdateWithoutProductsDataInput {
  name?: string | null
  description?: string | null
  category?: string | null
  live?: boolean | null
  owners?: UserUpdateManyWithoutShopsInput | null
  images?: ShopImageUpdateManyWithoutShopInput | null
}
export type ShopUpdateWithoutProductsDataInputInputObject =
  | Extract<keyof ShopUpdateWithoutProductsDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'live', alias?: string  } 
  | { name: 'owners', alias?: string  } 
  | { name: 'images', alias?: string  } 
  
export interface UserUpdateManyWithoutShopsInput {
  create?: UserCreateWithoutShopsInput[]
  delete?: UserWhereUniqueInput[]
  connect?: UserWhereUniqueInput[]
  set?: UserWhereUniqueInput[]
  disconnect?: UserWhereUniqueInput[]
  update?: UserUpdateWithWhereUniqueWithoutShopsInput[]
  upsert?: UserUpsertWithWhereUniqueWithoutShopsInput[]
  deleteMany?: UserScalarWhereInput[]
  updateMany?: UserUpdateManyWithWhereNestedInput[]
}
export type UserUpdateManyWithoutShopsInputInputObject =
  | Extract<keyof UserUpdateManyWithoutShopsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface UserUpdateWithWhereUniqueWithoutShopsInput {
  where?: UserWhereUniqueInput
  data?: UserUpdateWithoutShopsDataInput
}
export type UserUpdateWithWhereUniqueWithoutShopsInputInputObject =
  | Extract<keyof UserUpdateWithWhereUniqueWithoutShopsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface UserUpdateWithoutShopsDataInput {
  firebaseId?: string | null
  email?: string | null
  name?: string | null
  username?: string | null
  profilePic?: string | null
  isAnonymous?: boolean | null
  emailVerified?: boolean | null
  images?: UserImageUpdateManyWithoutUserInput | null
  productReviews?: ProductReviewUpdateManyWithoutUserInput | null
  cartItems?: CartUpdateOneWithoutUserInput | null
  forumposts?: ForumPostUpdateManyWithoutPostedByInput | null
  forums?: ForumUpdateManyWithoutMembersInput | null
  postComments?: ForumPostCommentUpdateManyWithoutUserInput | null
}
export type UserUpdateWithoutShopsDataInputInputObject =
  | Extract<keyof UserUpdateWithoutShopsDataInput, string>
  | { name: 'firebaseId', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'profilePic', alias?: string  } 
  | { name: 'isAnonymous', alias?: string  } 
  | { name: 'emailVerified', alias?: string  } 
  | { name: 'images', alias?: string  } 
  | { name: 'productReviews', alias?: string  } 
  | { name: 'cartItems', alias?: string  } 
  | { name: 'forumposts', alias?: string  } 
  | { name: 'forums', alias?: string  } 
  | { name: 'postComments', alias?: string  } 
  
export interface ProductReviewUpdateManyWithoutUserInput {
  create?: ProductReviewCreateWithoutUserInput[]
  delete?: ProductReviewWhereUniqueInput[]
  connect?: ProductReviewWhereUniqueInput[]
  set?: ProductReviewWhereUniqueInput[]
  disconnect?: ProductReviewWhereUniqueInput[]
  update?: ProductReviewUpdateWithWhereUniqueWithoutUserInput[]
  upsert?: ProductReviewUpsertWithWhereUniqueWithoutUserInput[]
  deleteMany?: ProductReviewScalarWhereInput[]
  updateMany?: ProductReviewUpdateManyWithWhereNestedInput[]
}
export type ProductReviewUpdateManyWithoutUserInputInputObject =
  | Extract<keyof ProductReviewUpdateManyWithoutUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ProductReviewUpdateWithWhereUniqueWithoutUserInput {
  where?: ProductReviewWhereUniqueInput
  data?: ProductReviewUpdateWithoutUserDataInput
}
export type ProductReviewUpdateWithWhereUniqueWithoutUserInputInputObject =
  | Extract<keyof ProductReviewUpdateWithWhereUniqueWithoutUserInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProductReviewUpdateWithoutUserDataInput {
  product?: ProductUpdateOneRequiredWithoutReviewsInput | null
  rating?: number | null
  review?: string | null
}
export type ProductReviewUpdateWithoutUserDataInputInputObject =
  | Extract<keyof ProductReviewUpdateWithoutUserDataInput, string>
  | { name: 'product', alias?: string  } 
  | { name: 'rating', alias?: string  } 
  | { name: 'review', alias?: string  } 
  
export interface ProductUpdateOneRequiredWithoutReviewsInput {
  create?: ProductCreateWithoutReviewsInput | null
  update?: ProductUpdateWithoutReviewsDataInput | null
  upsert?: ProductUpsertWithoutReviewsInput | null
  connect?: ProductWhereUniqueInput | null
}
export type ProductUpdateOneRequiredWithoutReviewsInputInputObject =
  | Extract<keyof ProductUpdateOneRequiredWithoutReviewsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProductUpdateWithoutReviewsDataInput {
  title?: string | null
  description?: string | null
  price?: string | null
  categories?: CategoryUpdateManyWithoutProductInput | null
  brand?: BrandUpdateOneWithoutProductsInput | null
  tags?: TagUpdateManyWithoutProductsInput | null
  images?: ProductImageUpdateManyWithoutProductInput | null
  shop?: ShopUpdateOneRequiredWithoutProductsInput | null
  variants?: VariantUpdateManyWithoutProductInput | null
}
export type ProductUpdateWithoutReviewsDataInputInputObject =
  | Extract<keyof ProductUpdateWithoutReviewsDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'categories', alias?: string  } 
  | { name: 'brand', alias?: string  } 
  | { name: 'tags', alias?: string  } 
  | { name: 'images', alias?: string  } 
  | { name: 'shop', alias?: string  } 
  | { name: 'variants', alias?: string  } 
  
export interface ProductUpsertWithoutReviewsInput {
  update?: ProductUpdateWithoutReviewsDataInput
  create?: ProductCreateWithoutReviewsInput
}
export type ProductUpsertWithoutReviewsInputInputObject =
  | Extract<keyof ProductUpsertWithoutReviewsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProductReviewUpsertWithWhereUniqueWithoutUserInput {
  where?: ProductReviewWhereUniqueInput
  update?: ProductReviewUpdateWithoutUserDataInput
  create?: ProductReviewCreateWithoutUserInput
}
export type ProductReviewUpsertWithWhereUniqueWithoutUserInputInputObject =
  | Extract<keyof ProductReviewUpsertWithWhereUniqueWithoutUserInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProductReviewScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  rating?: number | null
  rating_not?: number | null
  rating_in?: number[]
  rating_not_in?: number[]
  rating_lt?: number | null
  rating_lte?: number | null
  rating_gt?: number | null
  rating_gte?: number | null
  review?: string | null
  review_not?: string | null
  review_in?: string[]
  review_not_in?: string[]
  review_lt?: string | null
  review_lte?: string | null
  review_gt?: string | null
  review_gte?: string | null
  review_contains?: string | null
  review_not_contains?: string | null
  review_starts_with?: string | null
  review_not_starts_with?: string | null
  review_ends_with?: string | null
  review_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: ProductReviewScalarWhereInput[]
  OR?: ProductReviewScalarWhereInput[]
  NOT?: ProductReviewScalarWhereInput[]
}
export type ProductReviewScalarWhereInputInputObject =
  | Extract<keyof ProductReviewScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'rating', alias?: string  } 
  | { name: 'rating_not', alias?: string  } 
  | { name: 'rating_in', alias?: string  } 
  | { name: 'rating_not_in', alias?: string  } 
  | { name: 'rating_lt', alias?: string  } 
  | { name: 'rating_lte', alias?: string  } 
  | { name: 'rating_gt', alias?: string  } 
  | { name: 'rating_gte', alias?: string  } 
  | { name: 'review', alias?: string  } 
  | { name: 'review_not', alias?: string  } 
  | { name: 'review_in', alias?: string  } 
  | { name: 'review_not_in', alias?: string  } 
  | { name: 'review_lt', alias?: string  } 
  | { name: 'review_lte', alias?: string  } 
  | { name: 'review_gt', alias?: string  } 
  | { name: 'review_gte', alias?: string  } 
  | { name: 'review_contains', alias?: string  } 
  | { name: 'review_not_contains', alias?: string  } 
  | { name: 'review_starts_with', alias?: string  } 
  | { name: 'review_not_starts_with', alias?: string  } 
  | { name: 'review_ends_with', alias?: string  } 
  | { name: 'review_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProductReviewUpdateManyWithWhereNestedInput {
  where?: ProductReviewScalarWhereInput
  data?: ProductReviewUpdateManyDataInput
}
export type ProductReviewUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof ProductReviewUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProductReviewUpdateManyDataInput {
  rating?: number | null
  review?: string | null
}
export type ProductReviewUpdateManyDataInputInputObject =
  | Extract<keyof ProductReviewUpdateManyDataInput, string>
  | { name: 'rating', alias?: string  } 
  | { name: 'review', alias?: string  } 
  
export interface ForumPostUpdateManyWithoutPostedByInput {
  create?: ForumPostCreateWithoutPostedByInput[]
  delete?: ForumPostWhereUniqueInput[]
  connect?: ForumPostWhereUniqueInput[]
  set?: ForumPostWhereUniqueInput[]
  disconnect?: ForumPostWhereUniqueInput[]
  update?: ForumPostUpdateWithWhereUniqueWithoutPostedByInput[]
  upsert?: ForumPostUpsertWithWhereUniqueWithoutPostedByInput[]
  deleteMany?: ForumPostScalarWhereInput[]
  updateMany?: ForumPostUpdateManyWithWhereNestedInput[]
}
export type ForumPostUpdateManyWithoutPostedByInputInputObject =
  | Extract<keyof ForumPostUpdateManyWithoutPostedByInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ForumPostUpdateWithWhereUniqueWithoutPostedByInput {
  where?: ForumPostWhereUniqueInput
  data?: ForumPostUpdateWithoutPostedByDataInput
}
export type ForumPostUpdateWithWhereUniqueWithoutPostedByInputInputObject =
  | Extract<keyof ForumPostUpdateWithWhereUniqueWithoutPostedByInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ForumPostUpdateWithoutPostedByDataInput {
  forum?: ForumUpdateOneRequiredWithoutPostsInput | null
  title?: string | null
  content?: string | null
  type?: prisma.ForumPostType | null
  comments?: ForumPostCommentUpdateManyWithoutForumPostInput | null
}
export type ForumPostUpdateWithoutPostedByDataInputInputObject =
  | Extract<keyof ForumPostUpdateWithoutPostedByDataInput, string>
  | { name: 'forum', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'comments', alias?: string  } 
  
export interface ForumUpdateOneRequiredWithoutPostsInput {
  create?: ForumCreateWithoutPostsInput | null
  update?: ForumUpdateWithoutPostsDataInput | null
  upsert?: ForumUpsertWithoutPostsInput | null
  connect?: ForumWhereUniqueInput | null
}
export type ForumUpdateOneRequiredWithoutPostsInputInputObject =
  | Extract<keyof ForumUpdateOneRequiredWithoutPostsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ForumUpdateWithoutPostsDataInput {
  avatarPic?: string | null
  coverPic?: string | null
  members?: UserUpdateManyWithoutForumsInput | null
  name?: string | null
  description?: string | null
}
export type ForumUpdateWithoutPostsDataInputInputObject =
  | Extract<keyof ForumUpdateWithoutPostsDataInput, string>
  | { name: 'avatarPic', alias?: string  } 
  | { name: 'coverPic', alias?: string  } 
  | { name: 'members', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  
export interface UserUpdateManyWithoutForumsInput {
  create?: UserCreateWithoutForumsInput[]
  delete?: UserWhereUniqueInput[]
  connect?: UserWhereUniqueInput[]
  set?: UserWhereUniqueInput[]
  disconnect?: UserWhereUniqueInput[]
  update?: UserUpdateWithWhereUniqueWithoutForumsInput[]
  upsert?: UserUpsertWithWhereUniqueWithoutForumsInput[]
  deleteMany?: UserScalarWhereInput[]
  updateMany?: UserUpdateManyWithWhereNestedInput[]
}
export type UserUpdateManyWithoutForumsInputInputObject =
  | Extract<keyof UserUpdateManyWithoutForumsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface UserUpdateWithWhereUniqueWithoutForumsInput {
  where?: UserWhereUniqueInput
  data?: UserUpdateWithoutForumsDataInput
}
export type UserUpdateWithWhereUniqueWithoutForumsInputInputObject =
  | Extract<keyof UserUpdateWithWhereUniqueWithoutForumsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface UserUpdateWithoutForumsDataInput {
  firebaseId?: string | null
  email?: string | null
  name?: string | null
  username?: string | null
  profilePic?: string | null
  isAnonymous?: boolean | null
  emailVerified?: boolean | null
  shops?: ShopUpdateManyWithoutOwnersInput | null
  images?: UserImageUpdateManyWithoutUserInput | null
  productReviews?: ProductReviewUpdateManyWithoutUserInput | null
  cartItems?: CartUpdateOneWithoutUserInput | null
  forumposts?: ForumPostUpdateManyWithoutPostedByInput | null
  postComments?: ForumPostCommentUpdateManyWithoutUserInput | null
}
export type UserUpdateWithoutForumsDataInputInputObject =
  | Extract<keyof UserUpdateWithoutForumsDataInput, string>
  | { name: 'firebaseId', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'profilePic', alias?: string  } 
  | { name: 'isAnonymous', alias?: string  } 
  | { name: 'emailVerified', alias?: string  } 
  | { name: 'shops', alias?: string  } 
  | { name: 'images', alias?: string  } 
  | { name: 'productReviews', alias?: string  } 
  | { name: 'cartItems', alias?: string  } 
  | { name: 'forumposts', alias?: string  } 
  | { name: 'postComments', alias?: string  } 
  
export interface ForumPostCommentUpdateManyWithoutUserInput {
  create?: ForumPostCommentCreateWithoutUserInput[]
  delete?: ForumPostCommentWhereUniqueInput[]
  connect?: ForumPostCommentWhereUniqueInput[]
  set?: ForumPostCommentWhereUniqueInput[]
  disconnect?: ForumPostCommentWhereUniqueInput[]
  update?: ForumPostCommentUpdateWithWhereUniqueWithoutUserInput[]
  upsert?: ForumPostCommentUpsertWithWhereUniqueWithoutUserInput[]
  deleteMany?: ForumPostCommentScalarWhereInput[]
  updateMany?: ForumPostCommentUpdateManyWithWhereNestedInput[]
}
export type ForumPostCommentUpdateManyWithoutUserInputInputObject =
  | Extract<keyof ForumPostCommentUpdateManyWithoutUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ForumPostCommentUpdateWithWhereUniqueWithoutUserInput {
  where?: ForumPostCommentWhereUniqueInput
  data?: ForumPostCommentUpdateWithoutUserDataInput
}
export type ForumPostCommentUpdateWithWhereUniqueWithoutUserInputInputObject =
  | Extract<keyof ForumPostCommentUpdateWithWhereUniqueWithoutUserInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ForumPostCommentUpdateWithoutUserDataInput {
  forumPost?: ForumPostUpdateOneRequiredWithoutCommentsInput | null
  comment?: string | null
}
export type ForumPostCommentUpdateWithoutUserDataInputInputObject =
  | Extract<keyof ForumPostCommentUpdateWithoutUserDataInput, string>
  | { name: 'forumPost', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  
export interface ForumPostUpdateOneRequiredWithoutCommentsInput {
  create?: ForumPostCreateWithoutCommentsInput | null
  update?: ForumPostUpdateWithoutCommentsDataInput | null
  upsert?: ForumPostUpsertWithoutCommentsInput | null
  connect?: ForumPostWhereUniqueInput | null
}
export type ForumPostUpdateOneRequiredWithoutCommentsInputInputObject =
  | Extract<keyof ForumPostUpdateOneRequiredWithoutCommentsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ForumPostUpdateWithoutCommentsDataInput {
  postedBy?: UserUpdateOneRequiredWithoutForumpostsInput | null
  forum?: ForumUpdateOneRequiredWithoutPostsInput | null
  title?: string | null
  content?: string | null
  type?: prisma.ForumPostType | null
}
export type ForumPostUpdateWithoutCommentsDataInputInputObject =
  | Extract<keyof ForumPostUpdateWithoutCommentsDataInput, string>
  | { name: 'postedBy', alias?: string  } 
  | { name: 'forum', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'type', alias?: string  } 
  
export interface UserUpdateOneRequiredWithoutForumpostsInput {
  create?: UserCreateWithoutForumpostsInput | null
  update?: UserUpdateWithoutForumpostsDataInput | null
  upsert?: UserUpsertWithoutForumpostsInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredWithoutForumpostsInputInputObject =
  | Extract<keyof UserUpdateOneRequiredWithoutForumpostsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutForumpostsDataInput {
  firebaseId?: string | null
  email?: string | null
  name?: string | null
  username?: string | null
  profilePic?: string | null
  isAnonymous?: boolean | null
  emailVerified?: boolean | null
  shops?: ShopUpdateManyWithoutOwnersInput | null
  images?: UserImageUpdateManyWithoutUserInput | null
  productReviews?: ProductReviewUpdateManyWithoutUserInput | null
  cartItems?: CartUpdateOneWithoutUserInput | null
  forums?: ForumUpdateManyWithoutMembersInput | null
  postComments?: ForumPostCommentUpdateManyWithoutUserInput | null
}
export type UserUpdateWithoutForumpostsDataInputInputObject =
  | Extract<keyof UserUpdateWithoutForumpostsDataInput, string>
  | { name: 'firebaseId', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'profilePic', alias?: string  } 
  | { name: 'isAnonymous', alias?: string  } 
  | { name: 'emailVerified', alias?: string  } 
  | { name: 'shops', alias?: string  } 
  | { name: 'images', alias?: string  } 
  | { name: 'productReviews', alias?: string  } 
  | { name: 'cartItems', alias?: string  } 
  | { name: 'forums', alias?: string  } 
  | { name: 'postComments', alias?: string  } 
  
export interface ForumUpdateManyWithoutMembersInput {
  create?: ForumCreateWithoutMembersInput[]
  delete?: ForumWhereUniqueInput[]
  connect?: ForumWhereUniqueInput[]
  set?: ForumWhereUniqueInput[]
  disconnect?: ForumWhereUniqueInput[]
  update?: ForumUpdateWithWhereUniqueWithoutMembersInput[]
  upsert?: ForumUpsertWithWhereUniqueWithoutMembersInput[]
  deleteMany?: ForumScalarWhereInput[]
  updateMany?: ForumUpdateManyWithWhereNestedInput[]
}
export type ForumUpdateManyWithoutMembersInputInputObject =
  | Extract<keyof ForumUpdateManyWithoutMembersInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ForumUpdateWithWhereUniqueWithoutMembersInput {
  where?: ForumWhereUniqueInput
  data?: ForumUpdateWithoutMembersDataInput
}
export type ForumUpdateWithWhereUniqueWithoutMembersInputInputObject =
  | Extract<keyof ForumUpdateWithWhereUniqueWithoutMembersInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ForumUpdateWithoutMembersDataInput {
  avatarPic?: string | null
  coverPic?: string | null
  posts?: ForumPostUpdateManyWithoutForumInput | null
  name?: string | null
  description?: string | null
}
export type ForumUpdateWithoutMembersDataInputInputObject =
  | Extract<keyof ForumUpdateWithoutMembersDataInput, string>
  | { name: 'avatarPic', alias?: string  } 
  | { name: 'coverPic', alias?: string  } 
  | { name: 'posts', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  
export interface ForumPostUpdateManyWithoutForumInput {
  create?: ForumPostCreateWithoutForumInput[]
  delete?: ForumPostWhereUniqueInput[]
  connect?: ForumPostWhereUniqueInput[]
  set?: ForumPostWhereUniqueInput[]
  disconnect?: ForumPostWhereUniqueInput[]
  update?: ForumPostUpdateWithWhereUniqueWithoutForumInput[]
  upsert?: ForumPostUpsertWithWhereUniqueWithoutForumInput[]
  deleteMany?: ForumPostScalarWhereInput[]
  updateMany?: ForumPostUpdateManyWithWhereNestedInput[]
}
export type ForumPostUpdateManyWithoutForumInputInputObject =
  | Extract<keyof ForumPostUpdateManyWithoutForumInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ForumPostUpdateWithWhereUniqueWithoutForumInput {
  where?: ForumPostWhereUniqueInput
  data?: ForumPostUpdateWithoutForumDataInput
}
export type ForumPostUpdateWithWhereUniqueWithoutForumInputInputObject =
  | Extract<keyof ForumPostUpdateWithWhereUniqueWithoutForumInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ForumPostUpdateWithoutForumDataInput {
  postedBy?: UserUpdateOneRequiredWithoutForumpostsInput | null
  title?: string | null
  content?: string | null
  type?: prisma.ForumPostType | null
  comments?: ForumPostCommentUpdateManyWithoutForumPostInput | null
}
export type ForumPostUpdateWithoutForumDataInputInputObject =
  | Extract<keyof ForumPostUpdateWithoutForumDataInput, string>
  | { name: 'postedBy', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'comments', alias?: string  } 
  
export interface ForumPostCommentUpdateManyWithoutForumPostInput {
  create?: ForumPostCommentCreateWithoutForumPostInput[]
  delete?: ForumPostCommentWhereUniqueInput[]
  connect?: ForumPostCommentWhereUniqueInput[]
  set?: ForumPostCommentWhereUniqueInput[]
  disconnect?: ForumPostCommentWhereUniqueInput[]
  update?: ForumPostCommentUpdateWithWhereUniqueWithoutForumPostInput[]
  upsert?: ForumPostCommentUpsertWithWhereUniqueWithoutForumPostInput[]
  deleteMany?: ForumPostCommentScalarWhereInput[]
  updateMany?: ForumPostCommentUpdateManyWithWhereNestedInput[]
}
export type ForumPostCommentUpdateManyWithoutForumPostInputInputObject =
  | Extract<keyof ForumPostCommentUpdateManyWithoutForumPostInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ForumPostCommentUpdateWithWhereUniqueWithoutForumPostInput {
  where?: ForumPostCommentWhereUniqueInput
  data?: ForumPostCommentUpdateWithoutForumPostDataInput
}
export type ForumPostCommentUpdateWithWhereUniqueWithoutForumPostInputInputObject =
  | Extract<keyof ForumPostCommentUpdateWithWhereUniqueWithoutForumPostInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ForumPostCommentUpdateWithoutForumPostDataInput {
  user?: UserUpdateOneRequiredWithoutPostCommentsInput | null
  comment?: string | null
}
export type ForumPostCommentUpdateWithoutForumPostDataInputInputObject =
  | Extract<keyof ForumPostCommentUpdateWithoutForumPostDataInput, string>
  | { name: 'user', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  
export interface UserUpdateOneRequiredWithoutPostCommentsInput {
  create?: UserCreateWithoutPostCommentsInput | null
  update?: UserUpdateWithoutPostCommentsDataInput | null
  upsert?: UserUpsertWithoutPostCommentsInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredWithoutPostCommentsInputInputObject =
  | Extract<keyof UserUpdateOneRequiredWithoutPostCommentsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutPostCommentsDataInput {
  firebaseId?: string | null
  email?: string | null
  name?: string | null
  username?: string | null
  profilePic?: string | null
  isAnonymous?: boolean | null
  emailVerified?: boolean | null
  shops?: ShopUpdateManyWithoutOwnersInput | null
  images?: UserImageUpdateManyWithoutUserInput | null
  productReviews?: ProductReviewUpdateManyWithoutUserInput | null
  cartItems?: CartUpdateOneWithoutUserInput | null
  forumposts?: ForumPostUpdateManyWithoutPostedByInput | null
  forums?: ForumUpdateManyWithoutMembersInput | null
}
export type UserUpdateWithoutPostCommentsDataInputInputObject =
  | Extract<keyof UserUpdateWithoutPostCommentsDataInput, string>
  | { name: 'firebaseId', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'profilePic', alias?: string  } 
  | { name: 'isAnonymous', alias?: string  } 
  | { name: 'emailVerified', alias?: string  } 
  | { name: 'shops', alias?: string  } 
  | { name: 'images', alias?: string  } 
  | { name: 'productReviews', alias?: string  } 
  | { name: 'cartItems', alias?: string  } 
  | { name: 'forumposts', alias?: string  } 
  | { name: 'forums', alias?: string  } 
  
export interface UserUpsertWithoutPostCommentsInput {
  update?: UserUpdateWithoutPostCommentsDataInput
  create?: UserCreateWithoutPostCommentsInput
}
export type UserUpsertWithoutPostCommentsInputInputObject =
  | Extract<keyof UserUpsertWithoutPostCommentsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ForumPostCommentUpsertWithWhereUniqueWithoutForumPostInput {
  where?: ForumPostCommentWhereUniqueInput
  update?: ForumPostCommentUpdateWithoutForumPostDataInput
  create?: ForumPostCommentCreateWithoutForumPostInput
}
export type ForumPostCommentUpsertWithWhereUniqueWithoutForumPostInputInputObject =
  | Extract<keyof ForumPostCommentUpsertWithWhereUniqueWithoutForumPostInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ForumPostCommentScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  comment?: string | null
  comment_not?: string | null
  comment_in?: string[]
  comment_not_in?: string[]
  comment_lt?: string | null
  comment_lte?: string | null
  comment_gt?: string | null
  comment_gte?: string | null
  comment_contains?: string | null
  comment_not_contains?: string | null
  comment_starts_with?: string | null
  comment_not_starts_with?: string | null
  comment_ends_with?: string | null
  comment_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: ForumPostCommentScalarWhereInput[]
  OR?: ForumPostCommentScalarWhereInput[]
  NOT?: ForumPostCommentScalarWhereInput[]
}
export type ForumPostCommentScalarWhereInputInputObject =
  | Extract<keyof ForumPostCommentScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  | { name: 'comment_not', alias?: string  } 
  | { name: 'comment_in', alias?: string  } 
  | { name: 'comment_not_in', alias?: string  } 
  | { name: 'comment_lt', alias?: string  } 
  | { name: 'comment_lte', alias?: string  } 
  | { name: 'comment_gt', alias?: string  } 
  | { name: 'comment_gte', alias?: string  } 
  | { name: 'comment_contains', alias?: string  } 
  | { name: 'comment_not_contains', alias?: string  } 
  | { name: 'comment_starts_with', alias?: string  } 
  | { name: 'comment_not_starts_with', alias?: string  } 
  | { name: 'comment_ends_with', alias?: string  } 
  | { name: 'comment_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ForumPostCommentUpdateManyWithWhereNestedInput {
  where?: ForumPostCommentScalarWhereInput
  data?: ForumPostCommentUpdateManyDataInput
}
export type ForumPostCommentUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof ForumPostCommentUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ForumPostCommentUpdateManyDataInput {
  comment?: string | null
}
export type ForumPostCommentUpdateManyDataInputInputObject =
  | Extract<keyof ForumPostCommentUpdateManyDataInput, string>
  | { name: 'comment', alias?: string  } 
  
export interface ForumPostUpsertWithWhereUniqueWithoutForumInput {
  where?: ForumPostWhereUniqueInput
  update?: ForumPostUpdateWithoutForumDataInput
  create?: ForumPostCreateWithoutForumInput
}
export type ForumPostUpsertWithWhereUniqueWithoutForumInputInputObject =
  | Extract<keyof ForumPostUpsertWithWhereUniqueWithoutForumInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ForumPostScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  content?: string | null
  content_not?: string | null
  content_in?: string[]
  content_not_in?: string[]
  content_lt?: string | null
  content_lte?: string | null
  content_gt?: string | null
  content_gte?: string | null
  content_contains?: string | null
  content_not_contains?: string | null
  content_starts_with?: string | null
  content_not_starts_with?: string | null
  content_ends_with?: string | null
  content_not_ends_with?: string | null
  type?: prisma.ForumPostType | null
  type_not?: prisma.ForumPostType | null
  type_in?: prisma.ForumPostType[]
  type_not_in?: prisma.ForumPostType[]
  AND?: ForumPostScalarWhereInput[]
  OR?: ForumPostScalarWhereInput[]
  NOT?: ForumPostScalarWhereInput[]
}
export type ForumPostScalarWhereInputInputObject =
  | Extract<keyof ForumPostScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'content_not', alias?: string  } 
  | { name: 'content_in', alias?: string  } 
  | { name: 'content_not_in', alias?: string  } 
  | { name: 'content_lt', alias?: string  } 
  | { name: 'content_lte', alias?: string  } 
  | { name: 'content_gt', alias?: string  } 
  | { name: 'content_gte', alias?: string  } 
  | { name: 'content_contains', alias?: string  } 
  | { name: 'content_not_contains', alias?: string  } 
  | { name: 'content_starts_with', alias?: string  } 
  | { name: 'content_not_starts_with', alias?: string  } 
  | { name: 'content_ends_with', alias?: string  } 
  | { name: 'content_not_ends_with', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ForumPostUpdateManyWithWhereNestedInput {
  where?: ForumPostScalarWhereInput
  data?: ForumPostUpdateManyDataInput
}
export type ForumPostUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof ForumPostUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ForumPostUpdateManyDataInput {
  title?: string | null
  content?: string | null
  type?: prisma.ForumPostType | null
}
export type ForumPostUpdateManyDataInputInputObject =
  | Extract<keyof ForumPostUpdateManyDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'type', alias?: string  } 
  
export interface ForumUpsertWithWhereUniqueWithoutMembersInput {
  where?: ForumWhereUniqueInput
  update?: ForumUpdateWithoutMembersDataInput
  create?: ForumCreateWithoutMembersInput
}
export type ForumUpsertWithWhereUniqueWithoutMembersInputInputObject =
  | Extract<keyof ForumUpsertWithWhereUniqueWithoutMembersInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ForumScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  avatarPic?: string | null
  avatarPic_not?: string | null
  avatarPic_in?: string[]
  avatarPic_not_in?: string[]
  avatarPic_lt?: string | null
  avatarPic_lte?: string | null
  avatarPic_gt?: string | null
  avatarPic_gte?: string | null
  avatarPic_contains?: string | null
  avatarPic_not_contains?: string | null
  avatarPic_starts_with?: string | null
  avatarPic_not_starts_with?: string | null
  avatarPic_ends_with?: string | null
  avatarPic_not_ends_with?: string | null
  coverPic?: string | null
  coverPic_not?: string | null
  coverPic_in?: string[]
  coverPic_not_in?: string[]
  coverPic_lt?: string | null
  coverPic_lte?: string | null
  coverPic_gt?: string | null
  coverPic_gte?: string | null
  coverPic_contains?: string | null
  coverPic_not_contains?: string | null
  coverPic_starts_with?: string | null
  coverPic_not_starts_with?: string | null
  coverPic_ends_with?: string | null
  coverPic_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: ForumScalarWhereInput[]
  OR?: ForumScalarWhereInput[]
  NOT?: ForumScalarWhereInput[]
}
export type ForumScalarWhereInputInputObject =
  | Extract<keyof ForumScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'avatarPic', alias?: string  } 
  | { name: 'avatarPic_not', alias?: string  } 
  | { name: 'avatarPic_in', alias?: string  } 
  | { name: 'avatarPic_not_in', alias?: string  } 
  | { name: 'avatarPic_lt', alias?: string  } 
  | { name: 'avatarPic_lte', alias?: string  } 
  | { name: 'avatarPic_gt', alias?: string  } 
  | { name: 'avatarPic_gte', alias?: string  } 
  | { name: 'avatarPic_contains', alias?: string  } 
  | { name: 'avatarPic_not_contains', alias?: string  } 
  | { name: 'avatarPic_starts_with', alias?: string  } 
  | { name: 'avatarPic_not_starts_with', alias?: string  } 
  | { name: 'avatarPic_ends_with', alias?: string  } 
  | { name: 'avatarPic_not_ends_with', alias?: string  } 
  | { name: 'coverPic', alias?: string  } 
  | { name: 'coverPic_not', alias?: string  } 
  | { name: 'coverPic_in', alias?: string  } 
  | { name: 'coverPic_not_in', alias?: string  } 
  | { name: 'coverPic_lt', alias?: string  } 
  | { name: 'coverPic_lte', alias?: string  } 
  | { name: 'coverPic_gt', alias?: string  } 
  | { name: 'coverPic_gte', alias?: string  } 
  | { name: 'coverPic_contains', alias?: string  } 
  | { name: 'coverPic_not_contains', alias?: string  } 
  | { name: 'coverPic_starts_with', alias?: string  } 
  | { name: 'coverPic_not_starts_with', alias?: string  } 
  | { name: 'coverPic_ends_with', alias?: string  } 
  | { name: 'coverPic_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ForumUpdateManyWithWhereNestedInput {
  where?: ForumScalarWhereInput
  data?: ForumUpdateManyDataInput
}
export type ForumUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof ForumUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ForumUpdateManyDataInput {
  avatarPic?: string | null
  coverPic?: string | null
  name?: string | null
  description?: string | null
}
export type ForumUpdateManyDataInputInputObject =
  | Extract<keyof ForumUpdateManyDataInput, string>
  | { name: 'avatarPic', alias?: string  } 
  | { name: 'coverPic', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  
export interface UserUpsertWithoutForumpostsInput {
  update?: UserUpdateWithoutForumpostsDataInput
  create?: UserCreateWithoutForumpostsInput
}
export type UserUpsertWithoutForumpostsInputInputObject =
  | Extract<keyof UserUpsertWithoutForumpostsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ForumPostUpsertWithoutCommentsInput {
  update?: ForumPostUpdateWithoutCommentsDataInput
  create?: ForumPostCreateWithoutCommentsInput
}
export type ForumPostUpsertWithoutCommentsInputInputObject =
  | Extract<keyof ForumPostUpsertWithoutCommentsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ForumPostCommentUpsertWithWhereUniqueWithoutUserInput {
  where?: ForumPostCommentWhereUniqueInput
  update?: ForumPostCommentUpdateWithoutUserDataInput
  create?: ForumPostCommentCreateWithoutUserInput
}
export type ForumPostCommentUpsertWithWhereUniqueWithoutUserInputInputObject =
  | Extract<keyof ForumPostCommentUpsertWithWhereUniqueWithoutUserInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserUpsertWithWhereUniqueWithoutForumsInput {
  where?: UserWhereUniqueInput
  update?: UserUpdateWithoutForumsDataInput
  create?: UserCreateWithoutForumsInput
}
export type UserUpsertWithWhereUniqueWithoutForumsInputInputObject =
  | Extract<keyof UserUpsertWithWhereUniqueWithoutForumsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  firebaseId?: string | null
  firebaseId_not?: string | null
  firebaseId_in?: string[]
  firebaseId_not_in?: string[]
  firebaseId_lt?: string | null
  firebaseId_lte?: string | null
  firebaseId_gt?: string | null
  firebaseId_gte?: string | null
  firebaseId_contains?: string | null
  firebaseId_not_contains?: string | null
  firebaseId_starts_with?: string | null
  firebaseId_not_starts_with?: string | null
  firebaseId_ends_with?: string | null
  firebaseId_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  username?: string | null
  username_not?: string | null
  username_in?: string[]
  username_not_in?: string[]
  username_lt?: string | null
  username_lte?: string | null
  username_gt?: string | null
  username_gte?: string | null
  username_contains?: string | null
  username_not_contains?: string | null
  username_starts_with?: string | null
  username_not_starts_with?: string | null
  username_ends_with?: string | null
  username_not_ends_with?: string | null
  profilePic?: string | null
  profilePic_not?: string | null
  profilePic_in?: string[]
  profilePic_not_in?: string[]
  profilePic_lt?: string | null
  profilePic_lte?: string | null
  profilePic_gt?: string | null
  profilePic_gte?: string | null
  profilePic_contains?: string | null
  profilePic_not_contains?: string | null
  profilePic_starts_with?: string | null
  profilePic_not_starts_with?: string | null
  profilePic_ends_with?: string | null
  profilePic_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  isAnonymous?: boolean | null
  isAnonymous_not?: boolean | null
  emailVerified?: boolean | null
  emailVerified_not?: boolean | null
  AND?: UserScalarWhereInput[]
  OR?: UserScalarWhereInput[]
  NOT?: UserScalarWhereInput[]
}
export type UserScalarWhereInputInputObject =
  | Extract<keyof UserScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'firebaseId', alias?: string  } 
  | { name: 'firebaseId_not', alias?: string  } 
  | { name: 'firebaseId_in', alias?: string  } 
  | { name: 'firebaseId_not_in', alias?: string  } 
  | { name: 'firebaseId_lt', alias?: string  } 
  | { name: 'firebaseId_lte', alias?: string  } 
  | { name: 'firebaseId_gt', alias?: string  } 
  | { name: 'firebaseId_gte', alias?: string  } 
  | { name: 'firebaseId_contains', alias?: string  } 
  | { name: 'firebaseId_not_contains', alias?: string  } 
  | { name: 'firebaseId_starts_with', alias?: string  } 
  | { name: 'firebaseId_not_starts_with', alias?: string  } 
  | { name: 'firebaseId_ends_with', alias?: string  } 
  | { name: 'firebaseId_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'username_not', alias?: string  } 
  | { name: 'username_in', alias?: string  } 
  | { name: 'username_not_in', alias?: string  } 
  | { name: 'username_lt', alias?: string  } 
  | { name: 'username_lte', alias?: string  } 
  | { name: 'username_gt', alias?: string  } 
  | { name: 'username_gte', alias?: string  } 
  | { name: 'username_contains', alias?: string  } 
  | { name: 'username_not_contains', alias?: string  } 
  | { name: 'username_starts_with', alias?: string  } 
  | { name: 'username_not_starts_with', alias?: string  } 
  | { name: 'username_ends_with', alias?: string  } 
  | { name: 'username_not_ends_with', alias?: string  } 
  | { name: 'profilePic', alias?: string  } 
  | { name: 'profilePic_not', alias?: string  } 
  | { name: 'profilePic_in', alias?: string  } 
  | { name: 'profilePic_not_in', alias?: string  } 
  | { name: 'profilePic_lt', alias?: string  } 
  | { name: 'profilePic_lte', alias?: string  } 
  | { name: 'profilePic_gt', alias?: string  } 
  | { name: 'profilePic_gte', alias?: string  } 
  | { name: 'profilePic_contains', alias?: string  } 
  | { name: 'profilePic_not_contains', alias?: string  } 
  | { name: 'profilePic_starts_with', alias?: string  } 
  | { name: 'profilePic_not_starts_with', alias?: string  } 
  | { name: 'profilePic_ends_with', alias?: string  } 
  | { name: 'profilePic_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'isAnonymous', alias?: string  } 
  | { name: 'isAnonymous_not', alias?: string  } 
  | { name: 'emailVerified', alias?: string  } 
  | { name: 'emailVerified_not', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserUpdateManyWithWhereNestedInput {
  where?: UserScalarWhereInput
  data?: UserUpdateManyDataInput
}
export type UserUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof UserUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface UserUpdateManyDataInput {
  firebaseId?: string | null
  email?: string | null
  name?: string | null
  username?: string | null
  profilePic?: string | null
  isAnonymous?: boolean | null
  emailVerified?: boolean | null
}
export type UserUpdateManyDataInputInputObject =
  | Extract<keyof UserUpdateManyDataInput, string>
  | { name: 'firebaseId', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'profilePic', alias?: string  } 
  | { name: 'isAnonymous', alias?: string  } 
  | { name: 'emailVerified', alias?: string  } 
  
export interface ForumUpsertWithoutPostsInput {
  update?: ForumUpdateWithoutPostsDataInput
  create?: ForumCreateWithoutPostsInput
}
export type ForumUpsertWithoutPostsInputInputObject =
  | Extract<keyof ForumUpsertWithoutPostsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ForumPostUpsertWithWhereUniqueWithoutPostedByInput {
  where?: ForumPostWhereUniqueInput
  update?: ForumPostUpdateWithoutPostedByDataInput
  create?: ForumPostCreateWithoutPostedByInput
}
export type ForumPostUpsertWithWhereUniqueWithoutPostedByInputInputObject =
  | Extract<keyof ForumPostUpsertWithWhereUniqueWithoutPostedByInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserUpsertWithWhereUniqueWithoutShopsInput {
  where?: UserWhereUniqueInput
  update?: UserUpdateWithoutShopsDataInput
  create?: UserCreateWithoutShopsInput
}
export type UserUpsertWithWhereUniqueWithoutShopsInputInputObject =
  | Extract<keyof UserUpsertWithWhereUniqueWithoutShopsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ShopUpsertWithoutProductsInput {
  update?: ShopUpdateWithoutProductsDataInput
  create?: ShopCreateWithoutProductsInput
}
export type ShopUpsertWithoutProductsInputInputObject =
  | Extract<keyof ShopUpsertWithoutProductsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProductUpsertNestedInput {
  update?: ProductUpdateDataInput
  create?: ProductCreateInput
}
export type ProductUpsertNestedInputInputObject =
  | Extract<keyof ProductUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CartItemUpdatevariantsInput {
  set?: string[]
}
export type CartItemUpdatevariantsInputInputObject =
  | Extract<keyof CartItemUpdatevariantsInput, string>
  | { name: 'set', alias?: string  } 
  
export interface CartItemUpsertWithWhereUniqueWithoutCartInput {
  where?: CartItemWhereUniqueInput
  update?: CartItemUpdateWithoutCartDataInput
  create?: CartItemCreateWithoutCartInput
}
export type CartItemUpsertWithWhereUniqueWithoutCartInputInputObject =
  | Extract<keyof CartItemUpsertWithWhereUniqueWithoutCartInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CartItemScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  quantity?: number | null
  quantity_not?: number | null
  quantity_in?: number[]
  quantity_not_in?: number[]
  quantity_lt?: number | null
  quantity_lte?: number | null
  quantity_gt?: number | null
  quantity_gte?: number | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: CartItemScalarWhereInput[]
  OR?: CartItemScalarWhereInput[]
  NOT?: CartItemScalarWhereInput[]
}
export type CartItemScalarWhereInputInputObject =
  | Extract<keyof CartItemScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'quantity', alias?: string  } 
  | { name: 'quantity_not', alias?: string  } 
  | { name: 'quantity_in', alias?: string  } 
  | { name: 'quantity_not_in', alias?: string  } 
  | { name: 'quantity_lt', alias?: string  } 
  | { name: 'quantity_lte', alias?: string  } 
  | { name: 'quantity_gt', alias?: string  } 
  | { name: 'quantity_gte', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CartItemUpdateManyWithWhereNestedInput {
  where?: CartItemScalarWhereInput
  data?: CartItemUpdateManyDataInput
}
export type CartItemUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof CartItemUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface CartItemUpdateManyDataInput {
  quantity?: number | null
  variants?: CartItemUpdatevariantsInput | null
}
export type CartItemUpdateManyDataInputInputObject =
  | Extract<keyof CartItemUpdateManyDataInput, string>
  | { name: 'quantity', alias?: string  } 
  | { name: 'variants', alias?: string  } 
  
export interface CartUpsertWithoutUserInput {
  update?: CartUpdateWithoutUserDataInput
  create?: CartCreateWithoutUserInput
}
export type CartUpsertWithoutUserInputInputObject =
  | Extract<keyof CartUpsertWithoutUserInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserUpsertWithoutProductReviewsInput {
  update?: UserUpdateWithoutProductReviewsDataInput
  create?: UserCreateWithoutProductReviewsInput
}
export type UserUpsertWithoutProductReviewsInputInputObject =
  | Extract<keyof UserUpsertWithoutProductReviewsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProductReviewUpsertWithWhereUniqueWithoutProductInput {
  where?: ProductReviewWhereUniqueInput
  update?: ProductReviewUpdateWithoutProductDataInput
  create?: ProductReviewCreateWithoutProductInput
}
export type ProductReviewUpsertWithWhereUniqueWithoutProductInputInputObject =
  | Extract<keyof ProductReviewUpsertWithWhereUniqueWithoutProductInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProductUpsertWithWhereUniqueWithoutShopInput {
  where?: ProductWhereUniqueInput
  update?: ProductUpdateWithoutShopDataInput
  create?: ProductCreateWithoutShopInput
}
export type ProductUpsertWithWhereUniqueWithoutShopInputInputObject =
  | Extract<keyof ProductUpsertWithWhereUniqueWithoutShopInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProductScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  price?: string | null
  price_not?: string | null
  price_in?: string[]
  price_not_in?: string[]
  price_lt?: string | null
  price_lte?: string | null
  price_gt?: string | null
  price_gte?: string | null
  price_contains?: string | null
  price_not_contains?: string | null
  price_starts_with?: string | null
  price_not_starts_with?: string | null
  price_ends_with?: string | null
  price_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: ProductScalarWhereInput[]
  OR?: ProductScalarWhereInput[]
  NOT?: ProductScalarWhereInput[]
}
export type ProductScalarWhereInputInputObject =
  | Extract<keyof ProductScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'price_not', alias?: string  } 
  | { name: 'price_in', alias?: string  } 
  | { name: 'price_not_in', alias?: string  } 
  | { name: 'price_lt', alias?: string  } 
  | { name: 'price_lte', alias?: string  } 
  | { name: 'price_gt', alias?: string  } 
  | { name: 'price_gte', alias?: string  } 
  | { name: 'price_contains', alias?: string  } 
  | { name: 'price_not_contains', alias?: string  } 
  | { name: 'price_starts_with', alias?: string  } 
  | { name: 'price_not_starts_with', alias?: string  } 
  | { name: 'price_ends_with', alias?: string  } 
  | { name: 'price_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProductUpdateManyWithWhereNestedInput {
  where?: ProductScalarWhereInput
  data?: ProductUpdateManyDataInput
}
export type ProductUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof ProductUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProductUpdateManyDataInput {
  title?: string | null
  description?: string | null
  price?: string | null
}
export type ProductUpdateManyDataInputInputObject =
  | Extract<keyof ProductUpdateManyDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'price', alias?: string  } 
  
export interface ShopUpsertWithWhereUniqueWithoutOwnersInput {
  where?: ShopWhereUniqueInput
  update?: ShopUpdateWithoutOwnersDataInput
  create?: ShopCreateWithoutOwnersInput
}
export type ShopUpsertWithWhereUniqueWithoutOwnersInputInputObject =
  | Extract<keyof ShopUpsertWithWhereUniqueWithoutOwnersInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ShopScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  category?: string | null
  category_not?: string | null
  category_in?: string[]
  category_not_in?: string[]
  category_lt?: string | null
  category_lte?: string | null
  category_gt?: string | null
  category_gte?: string | null
  category_contains?: string | null
  category_not_contains?: string | null
  category_starts_with?: string | null
  category_not_starts_with?: string | null
  category_ends_with?: string | null
  category_not_ends_with?: string | null
  live?: boolean | null
  live_not?: boolean | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: ShopScalarWhereInput[]
  OR?: ShopScalarWhereInput[]
  NOT?: ShopScalarWhereInput[]
}
export type ShopScalarWhereInputInputObject =
  | Extract<keyof ShopScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'category_not', alias?: string  } 
  | { name: 'category_in', alias?: string  } 
  | { name: 'category_not_in', alias?: string  } 
  | { name: 'category_lt', alias?: string  } 
  | { name: 'category_lte', alias?: string  } 
  | { name: 'category_gt', alias?: string  } 
  | { name: 'category_gte', alias?: string  } 
  | { name: 'category_contains', alias?: string  } 
  | { name: 'category_not_contains', alias?: string  } 
  | { name: 'category_starts_with', alias?: string  } 
  | { name: 'category_not_starts_with', alias?: string  } 
  | { name: 'category_ends_with', alias?: string  } 
  | { name: 'category_not_ends_with', alias?: string  } 
  | { name: 'live', alias?: string  } 
  | { name: 'live_not', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ShopUpdateManyWithWhereNestedInput {
  where?: ShopScalarWhereInput
  data?: ShopUpdateManyDataInput
}
export type ShopUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof ShopUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ShopUpdateManyDataInput {
  name?: string | null
  description?: string | null
  category?: string | null
  live?: boolean | null
}
export type ShopUpdateManyDataInputInputObject =
  | Extract<keyof ShopUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'live', alias?: string  } 
  
export interface UserUpdateManyMutationInput {
  firebaseId?: string | null
  email?: string | null
  name?: string | null
  username?: string | null
  profilePic?: string | null
  isAnonymous?: boolean | null
  emailVerified?: boolean | null
}
export type UserUpdateManyMutationInputInputObject =
  | Extract<keyof UserUpdateManyMutationInput, string>
  | { name: 'firebaseId', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'profilePic', alias?: string  } 
  | { name: 'isAnonymous', alias?: string  } 
  | { name: 'emailVerified', alias?: string  } 
  
export interface ForumCreateInput {
  id?: string | null
  avatarPic?: string | null
  coverPic?: string | null
  members?: UserCreateManyWithoutForumsInput | null
  posts?: ForumPostCreateManyWithoutForumInput | null
  name?: string
  description?: string | null
}
export type ForumCreateInputInputObject =
  | Extract<keyof ForumCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'avatarPic', alias?: string  } 
  | { name: 'coverPic', alias?: string  } 
  | { name: 'members', alias?: string  } 
  | { name: 'posts', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  
export interface ForumUpdateInput {
  avatarPic?: string | null
  coverPic?: string | null
  members?: UserUpdateManyWithoutForumsInput | null
  posts?: ForumPostUpdateManyWithoutForumInput | null
  name?: string | null
  description?: string | null
}
export type ForumUpdateInputInputObject =
  | Extract<keyof ForumUpdateInput, string>
  | { name: 'avatarPic', alias?: string  } 
  | { name: 'coverPic', alias?: string  } 
  | { name: 'members', alias?: string  } 
  | { name: 'posts', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  
export interface ForumUpdateManyMutationInput {
  avatarPic?: string | null
  coverPic?: string | null
  name?: string | null
  description?: string | null
}
export type ForumUpdateManyMutationInputInputObject =
  | Extract<keyof ForumUpdateManyMutationInput, string>
  | { name: 'avatarPic', alias?: string  } 
  | { name: 'coverPic', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  
export interface ForumPostCreateInput {
  id?: string | null
  postedBy?: UserCreateOneWithoutForumpostsInput
  forum?: ForumCreateOneWithoutPostsInput
  title?: string
  content?: string | null
  type?: prisma.ForumPostType
  comments?: ForumPostCommentCreateManyWithoutForumPostInput | null
}
export type ForumPostCreateInputInputObject =
  | Extract<keyof ForumPostCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'postedBy', alias?: string  } 
  | { name: 'forum', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'comments', alias?: string  } 
  
export interface ForumPostUpdateInput {
  postedBy?: UserUpdateOneRequiredWithoutForumpostsInput | null
  forum?: ForumUpdateOneRequiredWithoutPostsInput | null
  title?: string | null
  content?: string | null
  type?: prisma.ForumPostType | null
  comments?: ForumPostCommentUpdateManyWithoutForumPostInput | null
}
export type ForumPostUpdateInputInputObject =
  | Extract<keyof ForumPostUpdateInput, string>
  | { name: 'postedBy', alias?: string  } 
  | { name: 'forum', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'comments', alias?: string  } 
  
export interface ForumPostUpdateManyMutationInput {
  title?: string | null
  content?: string | null
  type?: prisma.ForumPostType | null
}
export type ForumPostUpdateManyMutationInputInputObject =
  | Extract<keyof ForumPostUpdateManyMutationInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'type', alias?: string  } 
  
export interface ForumPostCommentCreateInput {
  id?: string | null
  user?: UserCreateOneWithoutPostCommentsInput
  forumPost?: ForumPostCreateOneWithoutCommentsInput
  comment?: string
}
export type ForumPostCommentCreateInputInputObject =
  | Extract<keyof ForumPostCommentCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'forumPost', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  
export interface ForumPostCommentUpdateInput {
  user?: UserUpdateOneRequiredWithoutPostCommentsInput | null
  forumPost?: ForumPostUpdateOneRequiredWithoutCommentsInput | null
  comment?: string | null
}
export type ForumPostCommentUpdateInputInputObject =
  | Extract<keyof ForumPostCommentUpdateInput, string>
  | { name: 'user', alias?: string  } 
  | { name: 'forumPost', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  
export interface ForumPostCommentUpdateManyMutationInput {
  comment?: string | null
}
export type ForumPostCommentUpdateManyMutationInputInputObject =
  | Extract<keyof ForumPostCommentUpdateManyMutationInput, string>
  | { name: 'comment', alias?: string  } 
  
export interface ShopCreateInput {
  id?: string | null
  name?: string
  description?: string
  category?: string
  live?: boolean | null
  owners?: UserCreateManyWithoutShopsInput | null
  images?: ShopImageCreateManyWithoutShopInput | null
  products?: ProductCreateManyWithoutShopInput | null
}
export type ShopCreateInputInputObject =
  | Extract<keyof ShopCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'live', alias?: string  } 
  | { name: 'owners', alias?: string  } 
  | { name: 'images', alias?: string  } 
  | { name: 'products', alias?: string  } 
  
export interface ShopUpdateInput {
  name?: string | null
  description?: string | null
  category?: string | null
  live?: boolean | null
  owners?: UserUpdateManyWithoutShopsInput | null
  images?: ShopImageUpdateManyWithoutShopInput | null
  products?: ProductUpdateManyWithoutShopInput | null
}
export type ShopUpdateInputInputObject =
  | Extract<keyof ShopUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'live', alias?: string  } 
  | { name: 'owners', alias?: string  } 
  | { name: 'images', alias?: string  } 
  | { name: 'products', alias?: string  } 
  
export interface ShopUpdateManyMutationInput {
  name?: string | null
  description?: string | null
  category?: string | null
  live?: boolean | null
}
export type ShopUpdateManyMutationInputInputObject =
  | Extract<keyof ShopUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'live', alias?: string  } 
  
export interface ShopImageCreateInput {
  id?: string | null
  imageUrl?: string
  largeImageUrl?: string | null
  shop?: ShopCreateOneWithoutImagesInput | null
}
export type ShopImageCreateInputInputObject =
  | Extract<keyof ShopImageCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'imageUrl', alias?: string  } 
  | { name: 'largeImageUrl', alias?: string  } 
  | { name: 'shop', alias?: string  } 
  
export interface ShopCreateOneWithoutImagesInput {
  create?: ShopCreateWithoutImagesInput | null
  connect?: ShopWhereUniqueInput | null
}
export type ShopCreateOneWithoutImagesInputInputObject =
  | Extract<keyof ShopCreateOneWithoutImagesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ShopCreateWithoutImagesInput {
  id?: string | null
  name?: string
  description?: string
  category?: string
  live?: boolean | null
  owners?: UserCreateManyWithoutShopsInput | null
  products?: ProductCreateManyWithoutShopInput | null
}
export type ShopCreateWithoutImagesInputInputObject =
  | Extract<keyof ShopCreateWithoutImagesInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'live', alias?: string  } 
  | { name: 'owners', alias?: string  } 
  | { name: 'products', alias?: string  } 
  
export interface ShopImageUpdateInput {
  imageUrl?: string | null
  largeImageUrl?: string | null
  shop?: ShopUpdateOneWithoutImagesInput | null
}
export type ShopImageUpdateInputInputObject =
  | Extract<keyof ShopImageUpdateInput, string>
  | { name: 'imageUrl', alias?: string  } 
  | { name: 'largeImageUrl', alias?: string  } 
  | { name: 'shop', alias?: string  } 
  
export interface ShopUpdateOneWithoutImagesInput {
  create?: ShopCreateWithoutImagesInput | null
  update?: ShopUpdateWithoutImagesDataInput | null
  upsert?: ShopUpsertWithoutImagesInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: ShopWhereUniqueInput | null
}
export type ShopUpdateOneWithoutImagesInputInputObject =
  | Extract<keyof ShopUpdateOneWithoutImagesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ShopUpdateWithoutImagesDataInput {
  name?: string | null
  description?: string | null
  category?: string | null
  live?: boolean | null
  owners?: UserUpdateManyWithoutShopsInput | null
  products?: ProductUpdateManyWithoutShopInput | null
}
export type ShopUpdateWithoutImagesDataInputInputObject =
  | Extract<keyof ShopUpdateWithoutImagesDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'live', alias?: string  } 
  | { name: 'owners', alias?: string  } 
  | { name: 'products', alias?: string  } 
  
export interface ShopUpsertWithoutImagesInput {
  update?: ShopUpdateWithoutImagesDataInput
  create?: ShopCreateWithoutImagesInput
}
export type ShopUpsertWithoutImagesInputInputObject =
  | Extract<keyof ShopUpsertWithoutImagesInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ShopImageUpdateManyMutationInput {
  imageUrl?: string | null
  largeImageUrl?: string | null
}
export type ShopImageUpdateManyMutationInputInputObject =
  | Extract<keyof ShopImageUpdateManyMutationInput, string>
  | { name: 'imageUrl', alias?: string  } 
  | { name: 'largeImageUrl', alias?: string  } 
  
export interface UserImageCreateInput {
  id?: string | null
  imageUrl?: string
  user?: UserCreateOneWithoutImagesInput | null
}
export type UserImageCreateInputInputObject =
  | Extract<keyof UserImageCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'imageUrl', alias?: string  } 
  | { name: 'user', alias?: string  } 
  
export interface UserCreateOneWithoutImagesInput {
  create?: UserCreateWithoutImagesInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutImagesInputInputObject =
  | Extract<keyof UserCreateOneWithoutImagesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutImagesInput {
  id?: string | null
  firebaseId?: string
  email?: string | null
  name?: string
  username?: string
  profilePic?: string | null
  isAnonymous?: boolean | null
  emailVerified?: boolean | null
  shops?: ShopCreateManyWithoutOwnersInput | null
  productReviews?: ProductReviewCreateManyWithoutUserInput | null
  cartItems?: CartCreateOneWithoutUserInput | null
  forumposts?: ForumPostCreateManyWithoutPostedByInput | null
  forums?: ForumCreateManyWithoutMembersInput | null
  postComments?: ForumPostCommentCreateManyWithoutUserInput | null
}
export type UserCreateWithoutImagesInputInputObject =
  | Extract<keyof UserCreateWithoutImagesInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'firebaseId', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'profilePic', alias?: string  } 
  | { name: 'isAnonymous', alias?: string  } 
  | { name: 'emailVerified', alias?: string  } 
  | { name: 'shops', alias?: string  } 
  | { name: 'productReviews', alias?: string  } 
  | { name: 'cartItems', alias?: string  } 
  | { name: 'forumposts', alias?: string  } 
  | { name: 'forums', alias?: string  } 
  | { name: 'postComments', alias?: string  } 
  
export interface UserImageUpdateInput {
  imageUrl?: string | null
  user?: UserUpdateOneWithoutImagesInput | null
}
export type UserImageUpdateInputInputObject =
  | Extract<keyof UserImageUpdateInput, string>
  | { name: 'imageUrl', alias?: string  } 
  | { name: 'user', alias?: string  } 
  
export interface UserUpdateOneWithoutImagesInput {
  create?: UserCreateWithoutImagesInput | null
  update?: UserUpdateWithoutImagesDataInput | null
  upsert?: UserUpsertWithoutImagesInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneWithoutImagesInputInputObject =
  | Extract<keyof UserUpdateOneWithoutImagesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutImagesDataInput {
  firebaseId?: string | null
  email?: string | null
  name?: string | null
  username?: string | null
  profilePic?: string | null
  isAnonymous?: boolean | null
  emailVerified?: boolean | null
  shops?: ShopUpdateManyWithoutOwnersInput | null
  productReviews?: ProductReviewUpdateManyWithoutUserInput | null
  cartItems?: CartUpdateOneWithoutUserInput | null
  forumposts?: ForumPostUpdateManyWithoutPostedByInput | null
  forums?: ForumUpdateManyWithoutMembersInput | null
  postComments?: ForumPostCommentUpdateManyWithoutUserInput | null
}
export type UserUpdateWithoutImagesDataInputInputObject =
  | Extract<keyof UserUpdateWithoutImagesDataInput, string>
  | { name: 'firebaseId', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'profilePic', alias?: string  } 
  | { name: 'isAnonymous', alias?: string  } 
  | { name: 'emailVerified', alias?: string  } 
  | { name: 'shops', alias?: string  } 
  | { name: 'productReviews', alias?: string  } 
  | { name: 'cartItems', alias?: string  } 
  | { name: 'forumposts', alias?: string  } 
  | { name: 'forums', alias?: string  } 
  | { name: 'postComments', alias?: string  } 
  
export interface UserUpsertWithoutImagesInput {
  update?: UserUpdateWithoutImagesDataInput
  create?: UserCreateWithoutImagesInput
}
export type UserUpsertWithoutImagesInputInputObject =
  | Extract<keyof UserUpsertWithoutImagesInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserImageUpdateManyMutationInput {
  imageUrl?: string | null
}
export type UserImageUpdateManyMutationInputInputObject =
  | Extract<keyof UserImageUpdateManyMutationInput, string>
  | { name: 'imageUrl', alias?: string  } 
  
export interface ProductUpdateInput {
  title?: string | null
  description?: string | null
  price?: string | null
  categories?: CategoryUpdateManyWithoutProductInput | null
  brand?: BrandUpdateOneWithoutProductsInput | null
  tags?: TagUpdateManyWithoutProductsInput | null
  images?: ProductImageUpdateManyWithoutProductInput | null
  shop?: ShopUpdateOneRequiredWithoutProductsInput | null
  variants?: VariantUpdateManyWithoutProductInput | null
  reviews?: ProductReviewUpdateManyWithoutProductInput | null
}
export type ProductUpdateInputInputObject =
  | Extract<keyof ProductUpdateInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'categories', alias?: string  } 
  | { name: 'brand', alias?: string  } 
  | { name: 'tags', alias?: string  } 
  | { name: 'images', alias?: string  } 
  | { name: 'shop', alias?: string  } 
  | { name: 'variants', alias?: string  } 
  | { name: 'reviews', alias?: string  } 
  
export interface ProductUpdateManyMutationInput {
  title?: string | null
  description?: string | null
  price?: string | null
}
export type ProductUpdateManyMutationInputInputObject =
  | Extract<keyof ProductUpdateManyMutationInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'price', alias?: string  } 
  
export interface CartCreateInput {
  id?: string | null
  user?: UserCreateOneWithoutCartItemsInput
  items?: CartItemCreateManyWithoutCartInput | null
}
export type CartCreateInputInputObject =
  | Extract<keyof CartCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'items', alias?: string  } 
  
export interface UserCreateOneWithoutCartItemsInput {
  create?: UserCreateWithoutCartItemsInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutCartItemsInputInputObject =
  | Extract<keyof UserCreateOneWithoutCartItemsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutCartItemsInput {
  id?: string | null
  firebaseId?: string
  email?: string | null
  name?: string
  username?: string
  profilePic?: string | null
  isAnonymous?: boolean | null
  emailVerified?: boolean | null
  shops?: ShopCreateManyWithoutOwnersInput | null
  images?: UserImageCreateManyWithoutUserInput | null
  productReviews?: ProductReviewCreateManyWithoutUserInput | null
  forumposts?: ForumPostCreateManyWithoutPostedByInput | null
  forums?: ForumCreateManyWithoutMembersInput | null
  postComments?: ForumPostCommentCreateManyWithoutUserInput | null
}
export type UserCreateWithoutCartItemsInputInputObject =
  | Extract<keyof UserCreateWithoutCartItemsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'firebaseId', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'profilePic', alias?: string  } 
  | { name: 'isAnonymous', alias?: string  } 
  | { name: 'emailVerified', alias?: string  } 
  | { name: 'shops', alias?: string  } 
  | { name: 'images', alias?: string  } 
  | { name: 'productReviews', alias?: string  } 
  | { name: 'forumposts', alias?: string  } 
  | { name: 'forums', alias?: string  } 
  | { name: 'postComments', alias?: string  } 
  
export interface CartUpdateInput {
  user?: UserUpdateOneRequiredWithoutCartItemsInput | null
  items?: CartItemUpdateManyWithoutCartInput | null
}
export type CartUpdateInputInputObject =
  | Extract<keyof CartUpdateInput, string>
  | { name: 'user', alias?: string  } 
  | { name: 'items', alias?: string  } 
  
export interface UserUpdateOneRequiredWithoutCartItemsInput {
  create?: UserCreateWithoutCartItemsInput | null
  update?: UserUpdateWithoutCartItemsDataInput | null
  upsert?: UserUpsertWithoutCartItemsInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredWithoutCartItemsInputInputObject =
  | Extract<keyof UserUpdateOneRequiredWithoutCartItemsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutCartItemsDataInput {
  firebaseId?: string | null
  email?: string | null
  name?: string | null
  username?: string | null
  profilePic?: string | null
  isAnonymous?: boolean | null
  emailVerified?: boolean | null
  shops?: ShopUpdateManyWithoutOwnersInput | null
  images?: UserImageUpdateManyWithoutUserInput | null
  productReviews?: ProductReviewUpdateManyWithoutUserInput | null
  forumposts?: ForumPostUpdateManyWithoutPostedByInput | null
  forums?: ForumUpdateManyWithoutMembersInput | null
  postComments?: ForumPostCommentUpdateManyWithoutUserInput | null
}
export type UserUpdateWithoutCartItemsDataInputInputObject =
  | Extract<keyof UserUpdateWithoutCartItemsDataInput, string>
  | { name: 'firebaseId', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'profilePic', alias?: string  } 
  | { name: 'isAnonymous', alias?: string  } 
  | { name: 'emailVerified', alias?: string  } 
  | { name: 'shops', alias?: string  } 
  | { name: 'images', alias?: string  } 
  | { name: 'productReviews', alias?: string  } 
  | { name: 'forumposts', alias?: string  } 
  | { name: 'forums', alias?: string  } 
  | { name: 'postComments', alias?: string  } 
  
export interface UserUpsertWithoutCartItemsInput {
  update?: UserUpdateWithoutCartItemsDataInput
  create?: UserCreateWithoutCartItemsInput
}
export type UserUpsertWithoutCartItemsInputInputObject =
  | Extract<keyof UserUpsertWithoutCartItemsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CartItemCreateInput {
  id?: string | null
  product?: ProductCreateOneInput
  quantity?: number
  variants?: CartItemCreatevariantsInput | null
  cart?: CartCreateOneWithoutItemsInput
}
export type CartItemCreateInputInputObject =
  | Extract<keyof CartItemCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'product', alias?: string  } 
  | { name: 'quantity', alias?: string  } 
  | { name: 'variants', alias?: string  } 
  | { name: 'cart', alias?: string  } 
  
export interface CartCreateOneWithoutItemsInput {
  create?: CartCreateWithoutItemsInput | null
  connect?: CartWhereUniqueInput | null
}
export type CartCreateOneWithoutItemsInputInputObject =
  | Extract<keyof CartCreateOneWithoutItemsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CartCreateWithoutItemsInput {
  id?: string | null
  user?: UserCreateOneWithoutCartItemsInput
}
export type CartCreateWithoutItemsInputInputObject =
  | Extract<keyof CartCreateWithoutItemsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'user', alias?: string  } 
  
export interface CartItemUpdateInput {
  product?: ProductUpdateOneRequiredInput | null
  quantity?: number | null
  variants?: CartItemUpdatevariantsInput | null
  cart?: CartUpdateOneRequiredWithoutItemsInput | null
}
export type CartItemUpdateInputInputObject =
  | Extract<keyof CartItemUpdateInput, string>
  | { name: 'product', alias?: string  } 
  | { name: 'quantity', alias?: string  } 
  | { name: 'variants', alias?: string  } 
  | { name: 'cart', alias?: string  } 
  
export interface CartUpdateOneRequiredWithoutItemsInput {
  create?: CartCreateWithoutItemsInput | null
  update?: CartUpdateWithoutItemsDataInput | null
  upsert?: CartUpsertWithoutItemsInput | null
  connect?: CartWhereUniqueInput | null
}
export type CartUpdateOneRequiredWithoutItemsInputInputObject =
  | Extract<keyof CartUpdateOneRequiredWithoutItemsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CartUpdateWithoutItemsDataInput {
  user?: UserUpdateOneRequiredWithoutCartItemsInput | null
}
export type CartUpdateWithoutItemsDataInputInputObject =
  | Extract<keyof CartUpdateWithoutItemsDataInput, string>
  | { name: 'user', alias?: string  } 
  
export interface CartUpsertWithoutItemsInput {
  update?: CartUpdateWithoutItemsDataInput
  create?: CartCreateWithoutItemsInput
}
export type CartUpsertWithoutItemsInputInputObject =
  | Extract<keyof CartUpsertWithoutItemsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CartItemUpdateManyMutationInput {
  quantity?: number | null
  variants?: CartItemUpdatevariantsInput | null
}
export type CartItemUpdateManyMutationInputInputObject =
  | Extract<keyof CartItemUpdateManyMutationInput, string>
  | { name: 'quantity', alias?: string  } 
  | { name: 'variants', alias?: string  } 
  
export interface orderItemCreateInput {
  id?: string | null
  title?: string
  description?: string
  price?: string
  quantity?: number
  imageUrl?: string | null
  variants?: orderItemCreatevariantsInput | null
}
export type orderItemCreateInputInputObject =
  | Extract<keyof orderItemCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'quantity', alias?: string  } 
  | { name: 'imageUrl', alias?: string  } 
  | { name: 'variants', alias?: string  } 
  
export interface orderItemCreatevariantsInput {
  set?: string[]
}
export type orderItemCreatevariantsInputInputObject =
  | Extract<keyof orderItemCreatevariantsInput, string>
  | { name: 'set', alias?: string  } 
  
export interface orderItemUpdateInput {
  title?: string | null
  description?: string | null
  price?: string | null
  quantity?: number | null
  imageUrl?: string | null
  variants?: orderItemUpdatevariantsInput | null
}
export type orderItemUpdateInputInputObject =
  | Extract<keyof orderItemUpdateInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'quantity', alias?: string  } 
  | { name: 'imageUrl', alias?: string  } 
  | { name: 'variants', alias?: string  } 
  
export interface orderItemUpdatevariantsInput {
  set?: string[]
}
export type orderItemUpdatevariantsInputInputObject =
  | Extract<keyof orderItemUpdatevariantsInput, string>
  | { name: 'set', alias?: string  } 
  
export interface orderItemUpdateManyMutationInput {
  title?: string | null
  description?: string | null
  price?: string | null
  quantity?: number | null
  imageUrl?: string | null
  variants?: orderItemUpdatevariantsInput | null
}
export type orderItemUpdateManyMutationInputInputObject =
  | Extract<keyof orderItemUpdateManyMutationInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'quantity', alias?: string  } 
  | { name: 'imageUrl', alias?: string  } 
  | { name: 'variants', alias?: string  } 
  
export interface OrderCreateInput {
  id?: string | null
  items?: orderItemCreateManyInput | null
  total?: string
  user?: UserCreateOneInput
  paymentId?: string
  PayerID?: string
  imageUrl?: string | null
}
export type OrderCreateInputInputObject =
  | Extract<keyof OrderCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'items', alias?: string  } 
  | { name: 'total', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'paymentId', alias?: string  } 
  | { name: 'PayerID', alias?: string  } 
  | { name: 'imageUrl', alias?: string  } 
  
export interface orderItemCreateManyInput {
  create?: orderItemCreateInput[]
  connect?: orderItemWhereUniqueInput[]
}
export type orderItemCreateManyInputInputObject =
  | Extract<keyof orderItemCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateOneInput {
  create?: UserCreateInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneInputInputObject =
  | Extract<keyof UserCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface OrderUpdateInput {
  items?: orderItemUpdateManyInput | null
  total?: string | null
  user?: UserUpdateOneRequiredInput | null
  paymentId?: string | null
  PayerID?: string | null
  imageUrl?: string | null
}
export type OrderUpdateInputInputObject =
  | Extract<keyof OrderUpdateInput, string>
  | { name: 'items', alias?: string  } 
  | { name: 'total', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'paymentId', alias?: string  } 
  | { name: 'PayerID', alias?: string  } 
  | { name: 'imageUrl', alias?: string  } 
  
export interface orderItemUpdateManyInput {
  create?: orderItemCreateInput[]
  update?: orderItemUpdateWithWhereUniqueNestedInput[]
  upsert?: orderItemUpsertWithWhereUniqueNestedInput[]
  delete?: orderItemWhereUniqueInput[]
  connect?: orderItemWhereUniqueInput[]
  set?: orderItemWhereUniqueInput[]
  disconnect?: orderItemWhereUniqueInput[]
  deleteMany?: orderItemScalarWhereInput[]
  updateMany?: orderItemUpdateManyWithWhereNestedInput[]
}
export type orderItemUpdateManyInputInputObject =
  | Extract<keyof orderItemUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface orderItemUpdateWithWhereUniqueNestedInput {
  where?: orderItemWhereUniqueInput
  data?: orderItemUpdateDataInput
}
export type orderItemUpdateWithWhereUniqueNestedInputInputObject =
  | Extract<keyof orderItemUpdateWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface orderItemUpdateDataInput {
  title?: string | null
  description?: string | null
  price?: string | null
  quantity?: number | null
  imageUrl?: string | null
  variants?: orderItemUpdatevariantsInput | null
}
export type orderItemUpdateDataInputInputObject =
  | Extract<keyof orderItemUpdateDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'quantity', alias?: string  } 
  | { name: 'imageUrl', alias?: string  } 
  | { name: 'variants', alias?: string  } 
  
export interface orderItemUpsertWithWhereUniqueNestedInput {
  where?: orderItemWhereUniqueInput
  update?: orderItemUpdateDataInput
  create?: orderItemCreateInput
}
export type orderItemUpsertWithWhereUniqueNestedInputInputObject =
  | Extract<keyof orderItemUpsertWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface orderItemScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  price?: string | null
  price_not?: string | null
  price_in?: string[]
  price_not_in?: string[]
  price_lt?: string | null
  price_lte?: string | null
  price_gt?: string | null
  price_gte?: string | null
  price_contains?: string | null
  price_not_contains?: string | null
  price_starts_with?: string | null
  price_not_starts_with?: string | null
  price_ends_with?: string | null
  price_not_ends_with?: string | null
  quantity?: number | null
  quantity_not?: number | null
  quantity_in?: number[]
  quantity_not_in?: number[]
  quantity_lt?: number | null
  quantity_lte?: number | null
  quantity_gt?: number | null
  quantity_gte?: number | null
  imageUrl?: string | null
  imageUrl_not?: string | null
  imageUrl_in?: string[]
  imageUrl_not_in?: string[]
  imageUrl_lt?: string | null
  imageUrl_lte?: string | null
  imageUrl_gt?: string | null
  imageUrl_gte?: string | null
  imageUrl_contains?: string | null
  imageUrl_not_contains?: string | null
  imageUrl_starts_with?: string | null
  imageUrl_not_starts_with?: string | null
  imageUrl_ends_with?: string | null
  imageUrl_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: orderItemScalarWhereInput[]
  OR?: orderItemScalarWhereInput[]
  NOT?: orderItemScalarWhereInput[]
}
export type orderItemScalarWhereInputInputObject =
  | Extract<keyof orderItemScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'price_not', alias?: string  } 
  | { name: 'price_in', alias?: string  } 
  | { name: 'price_not_in', alias?: string  } 
  | { name: 'price_lt', alias?: string  } 
  | { name: 'price_lte', alias?: string  } 
  | { name: 'price_gt', alias?: string  } 
  | { name: 'price_gte', alias?: string  } 
  | { name: 'price_contains', alias?: string  } 
  | { name: 'price_not_contains', alias?: string  } 
  | { name: 'price_starts_with', alias?: string  } 
  | { name: 'price_not_starts_with', alias?: string  } 
  | { name: 'price_ends_with', alias?: string  } 
  | { name: 'price_not_ends_with', alias?: string  } 
  | { name: 'quantity', alias?: string  } 
  | { name: 'quantity_not', alias?: string  } 
  | { name: 'quantity_in', alias?: string  } 
  | { name: 'quantity_not_in', alias?: string  } 
  | { name: 'quantity_lt', alias?: string  } 
  | { name: 'quantity_lte', alias?: string  } 
  | { name: 'quantity_gt', alias?: string  } 
  | { name: 'quantity_gte', alias?: string  } 
  | { name: 'imageUrl', alias?: string  } 
  | { name: 'imageUrl_not', alias?: string  } 
  | { name: 'imageUrl_in', alias?: string  } 
  | { name: 'imageUrl_not_in', alias?: string  } 
  | { name: 'imageUrl_lt', alias?: string  } 
  | { name: 'imageUrl_lte', alias?: string  } 
  | { name: 'imageUrl_gt', alias?: string  } 
  | { name: 'imageUrl_gte', alias?: string  } 
  | { name: 'imageUrl_contains', alias?: string  } 
  | { name: 'imageUrl_not_contains', alias?: string  } 
  | { name: 'imageUrl_starts_with', alias?: string  } 
  | { name: 'imageUrl_not_starts_with', alias?: string  } 
  | { name: 'imageUrl_ends_with', alias?: string  } 
  | { name: 'imageUrl_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface orderItemUpdateManyWithWhereNestedInput {
  where?: orderItemScalarWhereInput
  data?: orderItemUpdateManyDataInput
}
export type orderItemUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof orderItemUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface orderItemUpdateManyDataInput {
  title?: string | null
  description?: string | null
  price?: string | null
  quantity?: number | null
  imageUrl?: string | null
  variants?: orderItemUpdatevariantsInput | null
}
export type orderItemUpdateManyDataInputInputObject =
  | Extract<keyof orderItemUpdateManyDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'quantity', alias?: string  } 
  | { name: 'imageUrl', alias?: string  } 
  | { name: 'variants', alias?: string  } 
  
export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput | null
  update?: UserUpdateDataInput | null
  upsert?: UserUpsertNestedInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredInputInputObject =
  | Extract<keyof UserUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateDataInput {
  firebaseId?: string | null
  email?: string | null
  name?: string | null
  username?: string | null
  profilePic?: string | null
  isAnonymous?: boolean | null
  emailVerified?: boolean | null
  shops?: ShopUpdateManyWithoutOwnersInput | null
  images?: UserImageUpdateManyWithoutUserInput | null
  productReviews?: ProductReviewUpdateManyWithoutUserInput | null
  cartItems?: CartUpdateOneWithoutUserInput | null
  forumposts?: ForumPostUpdateManyWithoutPostedByInput | null
  forums?: ForumUpdateManyWithoutMembersInput | null
  postComments?: ForumPostCommentUpdateManyWithoutUserInput | null
}
export type UserUpdateDataInputInputObject =
  | Extract<keyof UserUpdateDataInput, string>
  | { name: 'firebaseId', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'profilePic', alias?: string  } 
  | { name: 'isAnonymous', alias?: string  } 
  | { name: 'emailVerified', alias?: string  } 
  | { name: 'shops', alias?: string  } 
  | { name: 'images', alias?: string  } 
  | { name: 'productReviews', alias?: string  } 
  | { name: 'cartItems', alias?: string  } 
  | { name: 'forumposts', alias?: string  } 
  | { name: 'forums', alias?: string  } 
  | { name: 'postComments', alias?: string  } 
  
export interface UserUpsertNestedInput {
  update?: UserUpdateDataInput
  create?: UserCreateInput
}
export type UserUpsertNestedInputInputObject =
  | Extract<keyof UserUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface OrderUpdateManyMutationInput {
  total?: string | null
  paymentId?: string | null
  PayerID?: string | null
  imageUrl?: string | null
}
export type OrderUpdateManyMutationInputInputObject =
  | Extract<keyof OrderUpdateManyMutationInput, string>
  | { name: 'total', alias?: string  } 
  | { name: 'paymentId', alias?: string  } 
  | { name: 'PayerID', alias?: string  } 
  | { name: 'imageUrl', alias?: string  } 
  
export interface BrandCreateInput {
  id?: string | null
  name?: string
  products?: ProductCreateManyWithoutBrandInput | null
}
export type BrandCreateInputInputObject =
  | Extract<keyof BrandCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'products', alias?: string  } 
  
export interface ProductCreateManyWithoutBrandInput {
  create?: ProductCreateWithoutBrandInput[]
  connect?: ProductWhereUniqueInput[]
}
export type ProductCreateManyWithoutBrandInputInputObject =
  | Extract<keyof ProductCreateManyWithoutBrandInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProductCreateWithoutBrandInput {
  id?: string | null
  title?: string
  description?: string
  price?: string
  categories?: CategoryCreateManyWithoutProductInput | null
  tags?: TagCreateManyWithoutProductsInput | null
  images?: ProductImageCreateManyWithoutProductInput | null
  shop?: ShopCreateOneWithoutProductsInput
  variants?: VariantCreateManyWithoutProductInput | null
  reviews?: ProductReviewCreateManyWithoutProductInput | null
}
export type ProductCreateWithoutBrandInputInputObject =
  | Extract<keyof ProductCreateWithoutBrandInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'categories', alias?: string  } 
  | { name: 'tags', alias?: string  } 
  | { name: 'images', alias?: string  } 
  | { name: 'shop', alias?: string  } 
  | { name: 'variants', alias?: string  } 
  | { name: 'reviews', alias?: string  } 
  
export interface BrandUpdateInput {
  name?: string | null
  products?: ProductUpdateManyWithoutBrandInput | null
}
export type BrandUpdateInputInputObject =
  | Extract<keyof BrandUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'products', alias?: string  } 
  
export interface ProductUpdateManyWithoutBrandInput {
  create?: ProductCreateWithoutBrandInput[]
  delete?: ProductWhereUniqueInput[]
  connect?: ProductWhereUniqueInput[]
  set?: ProductWhereUniqueInput[]
  disconnect?: ProductWhereUniqueInput[]
  update?: ProductUpdateWithWhereUniqueWithoutBrandInput[]
  upsert?: ProductUpsertWithWhereUniqueWithoutBrandInput[]
  deleteMany?: ProductScalarWhereInput[]
  updateMany?: ProductUpdateManyWithWhereNestedInput[]
}
export type ProductUpdateManyWithoutBrandInputInputObject =
  | Extract<keyof ProductUpdateManyWithoutBrandInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ProductUpdateWithWhereUniqueWithoutBrandInput {
  where?: ProductWhereUniqueInput
  data?: ProductUpdateWithoutBrandDataInput
}
export type ProductUpdateWithWhereUniqueWithoutBrandInputInputObject =
  | Extract<keyof ProductUpdateWithWhereUniqueWithoutBrandInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProductUpdateWithoutBrandDataInput {
  title?: string | null
  description?: string | null
  price?: string | null
  categories?: CategoryUpdateManyWithoutProductInput | null
  tags?: TagUpdateManyWithoutProductsInput | null
  images?: ProductImageUpdateManyWithoutProductInput | null
  shop?: ShopUpdateOneRequiredWithoutProductsInput | null
  variants?: VariantUpdateManyWithoutProductInput | null
  reviews?: ProductReviewUpdateManyWithoutProductInput | null
}
export type ProductUpdateWithoutBrandDataInputInputObject =
  | Extract<keyof ProductUpdateWithoutBrandDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'categories', alias?: string  } 
  | { name: 'tags', alias?: string  } 
  | { name: 'images', alias?: string  } 
  | { name: 'shop', alias?: string  } 
  | { name: 'variants', alias?: string  } 
  | { name: 'reviews', alias?: string  } 
  
export interface ProductUpsertWithWhereUniqueWithoutBrandInput {
  where?: ProductWhereUniqueInput
  update?: ProductUpdateWithoutBrandDataInput
  create?: ProductCreateWithoutBrandInput
}
export type ProductUpsertWithWhereUniqueWithoutBrandInputInputObject =
  | Extract<keyof ProductUpsertWithWhereUniqueWithoutBrandInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface BrandUpdateManyMutationInput {
  name?: string | null
}
export type BrandUpdateManyMutationInputInputObject =
  | Extract<keyof BrandUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  
export interface TagCreateInput {
  id?: string | null
  name?: string
  products?: ProductCreateManyWithoutTagsInput | null
}
export type TagCreateInputInputObject =
  | Extract<keyof TagCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'products', alias?: string  } 
  
export interface ProductCreateManyWithoutTagsInput {
  create?: ProductCreateWithoutTagsInput[]
  connect?: ProductWhereUniqueInput[]
}
export type ProductCreateManyWithoutTagsInputInputObject =
  | Extract<keyof ProductCreateManyWithoutTagsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProductCreateWithoutTagsInput {
  id?: string | null
  title?: string
  description?: string
  price?: string
  categories?: CategoryCreateManyWithoutProductInput | null
  brand?: BrandCreateOneWithoutProductsInput | null
  images?: ProductImageCreateManyWithoutProductInput | null
  shop?: ShopCreateOneWithoutProductsInput
  variants?: VariantCreateManyWithoutProductInput | null
  reviews?: ProductReviewCreateManyWithoutProductInput | null
}
export type ProductCreateWithoutTagsInputInputObject =
  | Extract<keyof ProductCreateWithoutTagsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'categories', alias?: string  } 
  | { name: 'brand', alias?: string  } 
  | { name: 'images', alias?: string  } 
  | { name: 'shop', alias?: string  } 
  | { name: 'variants', alias?: string  } 
  | { name: 'reviews', alias?: string  } 
  
export interface TagUpdateInput {
  name?: string | null
  products?: ProductUpdateManyWithoutTagsInput | null
}
export type TagUpdateInputInputObject =
  | Extract<keyof TagUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'products', alias?: string  } 
  
export interface ProductUpdateManyWithoutTagsInput {
  create?: ProductCreateWithoutTagsInput[]
  delete?: ProductWhereUniqueInput[]
  connect?: ProductWhereUniqueInput[]
  set?: ProductWhereUniqueInput[]
  disconnect?: ProductWhereUniqueInput[]
  update?: ProductUpdateWithWhereUniqueWithoutTagsInput[]
  upsert?: ProductUpsertWithWhereUniqueWithoutTagsInput[]
  deleteMany?: ProductScalarWhereInput[]
  updateMany?: ProductUpdateManyWithWhereNestedInput[]
}
export type ProductUpdateManyWithoutTagsInputInputObject =
  | Extract<keyof ProductUpdateManyWithoutTagsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ProductUpdateWithWhereUniqueWithoutTagsInput {
  where?: ProductWhereUniqueInput
  data?: ProductUpdateWithoutTagsDataInput
}
export type ProductUpdateWithWhereUniqueWithoutTagsInputInputObject =
  | Extract<keyof ProductUpdateWithWhereUniqueWithoutTagsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProductUpdateWithoutTagsDataInput {
  title?: string | null
  description?: string | null
  price?: string | null
  categories?: CategoryUpdateManyWithoutProductInput | null
  brand?: BrandUpdateOneWithoutProductsInput | null
  images?: ProductImageUpdateManyWithoutProductInput | null
  shop?: ShopUpdateOneRequiredWithoutProductsInput | null
  variants?: VariantUpdateManyWithoutProductInput | null
  reviews?: ProductReviewUpdateManyWithoutProductInput | null
}
export type ProductUpdateWithoutTagsDataInputInputObject =
  | Extract<keyof ProductUpdateWithoutTagsDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'categories', alias?: string  } 
  | { name: 'brand', alias?: string  } 
  | { name: 'images', alias?: string  } 
  | { name: 'shop', alias?: string  } 
  | { name: 'variants', alias?: string  } 
  | { name: 'reviews', alias?: string  } 
  
export interface ProductUpsertWithWhereUniqueWithoutTagsInput {
  where?: ProductWhereUniqueInput
  update?: ProductUpdateWithoutTagsDataInput
  create?: ProductCreateWithoutTagsInput
}
export type ProductUpsertWithWhereUniqueWithoutTagsInputInputObject =
  | Extract<keyof ProductUpsertWithWhereUniqueWithoutTagsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface TagUpdateManyMutationInput {
  name?: string | null
}
export type TagUpdateManyMutationInputInputObject =
  | Extract<keyof TagUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  
export interface CategoryCreateInput {
  id?: string | null
  name?: string
  product?: ProductCreateManyWithoutCategoriesInput | null
}
export type CategoryCreateInputInputObject =
  | Extract<keyof CategoryCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'product', alias?: string  } 
  
export interface ProductCreateManyWithoutCategoriesInput {
  create?: ProductCreateWithoutCategoriesInput[]
  connect?: ProductWhereUniqueInput[]
}
export type ProductCreateManyWithoutCategoriesInputInputObject =
  | Extract<keyof ProductCreateManyWithoutCategoriesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProductCreateWithoutCategoriesInput {
  id?: string | null
  title?: string
  description?: string
  price?: string
  brand?: BrandCreateOneWithoutProductsInput | null
  tags?: TagCreateManyWithoutProductsInput | null
  images?: ProductImageCreateManyWithoutProductInput | null
  shop?: ShopCreateOneWithoutProductsInput
  variants?: VariantCreateManyWithoutProductInput | null
  reviews?: ProductReviewCreateManyWithoutProductInput | null
}
export type ProductCreateWithoutCategoriesInputInputObject =
  | Extract<keyof ProductCreateWithoutCategoriesInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'brand', alias?: string  } 
  | { name: 'tags', alias?: string  } 
  | { name: 'images', alias?: string  } 
  | { name: 'shop', alias?: string  } 
  | { name: 'variants', alias?: string  } 
  | { name: 'reviews', alias?: string  } 
  
export interface CategoryUpdateInput {
  name?: string | null
  product?: ProductUpdateManyWithoutCategoriesInput | null
}
export type CategoryUpdateInputInputObject =
  | Extract<keyof CategoryUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'product', alias?: string  } 
  
export interface ProductUpdateManyWithoutCategoriesInput {
  create?: ProductCreateWithoutCategoriesInput[]
  delete?: ProductWhereUniqueInput[]
  connect?: ProductWhereUniqueInput[]
  set?: ProductWhereUniqueInput[]
  disconnect?: ProductWhereUniqueInput[]
  update?: ProductUpdateWithWhereUniqueWithoutCategoriesInput[]
  upsert?: ProductUpsertWithWhereUniqueWithoutCategoriesInput[]
  deleteMany?: ProductScalarWhereInput[]
  updateMany?: ProductUpdateManyWithWhereNestedInput[]
}
export type ProductUpdateManyWithoutCategoriesInputInputObject =
  | Extract<keyof ProductUpdateManyWithoutCategoriesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ProductUpdateWithWhereUniqueWithoutCategoriesInput {
  where?: ProductWhereUniqueInput
  data?: ProductUpdateWithoutCategoriesDataInput
}
export type ProductUpdateWithWhereUniqueWithoutCategoriesInputInputObject =
  | Extract<keyof ProductUpdateWithWhereUniqueWithoutCategoriesInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProductUpdateWithoutCategoriesDataInput {
  title?: string | null
  description?: string | null
  price?: string | null
  brand?: BrandUpdateOneWithoutProductsInput | null
  tags?: TagUpdateManyWithoutProductsInput | null
  images?: ProductImageUpdateManyWithoutProductInput | null
  shop?: ShopUpdateOneRequiredWithoutProductsInput | null
  variants?: VariantUpdateManyWithoutProductInput | null
  reviews?: ProductReviewUpdateManyWithoutProductInput | null
}
export type ProductUpdateWithoutCategoriesDataInputInputObject =
  | Extract<keyof ProductUpdateWithoutCategoriesDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'brand', alias?: string  } 
  | { name: 'tags', alias?: string  } 
  | { name: 'images', alias?: string  } 
  | { name: 'shop', alias?: string  } 
  | { name: 'variants', alias?: string  } 
  | { name: 'reviews', alias?: string  } 
  
export interface ProductUpsertWithWhereUniqueWithoutCategoriesInput {
  where?: ProductWhereUniqueInput
  update?: ProductUpdateWithoutCategoriesDataInput
  create?: ProductCreateWithoutCategoriesInput
}
export type ProductUpsertWithWhereUniqueWithoutCategoriesInputInputObject =
  | Extract<keyof ProductUpsertWithWhereUniqueWithoutCategoriesInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CategoryUpdateManyMutationInput {
  name?: string | null
}
export type CategoryUpdateManyMutationInputInputObject =
  | Extract<keyof CategoryUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  
export interface ProductImageCreateInput {
  id?: string | null
  imageUrl?: string
  largeImageUrl?: string | null
  product?: ProductCreateOneWithoutImagesInput | null
}
export type ProductImageCreateInputInputObject =
  | Extract<keyof ProductImageCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'imageUrl', alias?: string  } 
  | { name: 'largeImageUrl', alias?: string  } 
  | { name: 'product', alias?: string  } 
  
export interface ProductCreateOneWithoutImagesInput {
  create?: ProductCreateWithoutImagesInput | null
  connect?: ProductWhereUniqueInput | null
}
export type ProductCreateOneWithoutImagesInputInputObject =
  | Extract<keyof ProductCreateOneWithoutImagesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProductCreateWithoutImagesInput {
  id?: string | null
  title?: string
  description?: string
  price?: string
  categories?: CategoryCreateManyWithoutProductInput | null
  brand?: BrandCreateOneWithoutProductsInput | null
  tags?: TagCreateManyWithoutProductsInput | null
  shop?: ShopCreateOneWithoutProductsInput
  variants?: VariantCreateManyWithoutProductInput | null
  reviews?: ProductReviewCreateManyWithoutProductInput | null
}
export type ProductCreateWithoutImagesInputInputObject =
  | Extract<keyof ProductCreateWithoutImagesInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'categories', alias?: string  } 
  | { name: 'brand', alias?: string  } 
  | { name: 'tags', alias?: string  } 
  | { name: 'shop', alias?: string  } 
  | { name: 'variants', alias?: string  } 
  | { name: 'reviews', alias?: string  } 
  
export interface ProductImageUpdateInput {
  imageUrl?: string | null
  largeImageUrl?: string | null
  product?: ProductUpdateOneWithoutImagesInput | null
}
export type ProductImageUpdateInputInputObject =
  | Extract<keyof ProductImageUpdateInput, string>
  | { name: 'imageUrl', alias?: string  } 
  | { name: 'largeImageUrl', alias?: string  } 
  | { name: 'product', alias?: string  } 
  
export interface ProductUpdateOneWithoutImagesInput {
  create?: ProductCreateWithoutImagesInput | null
  update?: ProductUpdateWithoutImagesDataInput | null
  upsert?: ProductUpsertWithoutImagesInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: ProductWhereUniqueInput | null
}
export type ProductUpdateOneWithoutImagesInputInputObject =
  | Extract<keyof ProductUpdateOneWithoutImagesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProductUpdateWithoutImagesDataInput {
  title?: string | null
  description?: string | null
  price?: string | null
  categories?: CategoryUpdateManyWithoutProductInput | null
  brand?: BrandUpdateOneWithoutProductsInput | null
  tags?: TagUpdateManyWithoutProductsInput | null
  shop?: ShopUpdateOneRequiredWithoutProductsInput | null
  variants?: VariantUpdateManyWithoutProductInput | null
  reviews?: ProductReviewUpdateManyWithoutProductInput | null
}
export type ProductUpdateWithoutImagesDataInputInputObject =
  | Extract<keyof ProductUpdateWithoutImagesDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'categories', alias?: string  } 
  | { name: 'brand', alias?: string  } 
  | { name: 'tags', alias?: string  } 
  | { name: 'shop', alias?: string  } 
  | { name: 'variants', alias?: string  } 
  | { name: 'reviews', alias?: string  } 
  
export interface ProductUpsertWithoutImagesInput {
  update?: ProductUpdateWithoutImagesDataInput
  create?: ProductCreateWithoutImagesInput
}
export type ProductUpsertWithoutImagesInputInputObject =
  | Extract<keyof ProductUpsertWithoutImagesInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProductImageUpdateManyMutationInput {
  imageUrl?: string | null
  largeImageUrl?: string | null
}
export type ProductImageUpdateManyMutationInputInputObject =
  | Extract<keyof ProductImageUpdateManyMutationInput, string>
  | { name: 'imageUrl', alias?: string  } 
  | { name: 'largeImageUrl', alias?: string  } 
  
export interface VariantCreateInput {
  id?: string | null
  product?: ProductCreateOneWithoutVariantsInput
  name?: string
  values?: VariantCreatevaluesInput | null
}
export type VariantCreateInputInputObject =
  | Extract<keyof VariantCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'product', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'values', alias?: string  } 
  
export interface ProductCreateOneWithoutVariantsInput {
  create?: ProductCreateWithoutVariantsInput | null
  connect?: ProductWhereUniqueInput | null
}
export type ProductCreateOneWithoutVariantsInputInputObject =
  | Extract<keyof ProductCreateOneWithoutVariantsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProductCreateWithoutVariantsInput {
  id?: string | null
  title?: string
  description?: string
  price?: string
  categories?: CategoryCreateManyWithoutProductInput | null
  brand?: BrandCreateOneWithoutProductsInput | null
  tags?: TagCreateManyWithoutProductsInput | null
  images?: ProductImageCreateManyWithoutProductInput | null
  shop?: ShopCreateOneWithoutProductsInput
  reviews?: ProductReviewCreateManyWithoutProductInput | null
}
export type ProductCreateWithoutVariantsInputInputObject =
  | Extract<keyof ProductCreateWithoutVariantsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'categories', alias?: string  } 
  | { name: 'brand', alias?: string  } 
  | { name: 'tags', alias?: string  } 
  | { name: 'images', alias?: string  } 
  | { name: 'shop', alias?: string  } 
  | { name: 'reviews', alias?: string  } 
  
export interface VariantUpdateInput {
  product?: ProductUpdateOneRequiredWithoutVariantsInput | null
  name?: string | null
  values?: VariantUpdatevaluesInput | null
}
export type VariantUpdateInputInputObject =
  | Extract<keyof VariantUpdateInput, string>
  | { name: 'product', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'values', alias?: string  } 
  
export interface ProductUpdateOneRequiredWithoutVariantsInput {
  create?: ProductCreateWithoutVariantsInput | null
  update?: ProductUpdateWithoutVariantsDataInput | null
  upsert?: ProductUpsertWithoutVariantsInput | null
  connect?: ProductWhereUniqueInput | null
}
export type ProductUpdateOneRequiredWithoutVariantsInputInputObject =
  | Extract<keyof ProductUpdateOneRequiredWithoutVariantsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProductUpdateWithoutVariantsDataInput {
  title?: string | null
  description?: string | null
  price?: string | null
  categories?: CategoryUpdateManyWithoutProductInput | null
  brand?: BrandUpdateOneWithoutProductsInput | null
  tags?: TagUpdateManyWithoutProductsInput | null
  images?: ProductImageUpdateManyWithoutProductInput | null
  shop?: ShopUpdateOneRequiredWithoutProductsInput | null
  reviews?: ProductReviewUpdateManyWithoutProductInput | null
}
export type ProductUpdateWithoutVariantsDataInputInputObject =
  | Extract<keyof ProductUpdateWithoutVariantsDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'categories', alias?: string  } 
  | { name: 'brand', alias?: string  } 
  | { name: 'tags', alias?: string  } 
  | { name: 'images', alias?: string  } 
  | { name: 'shop', alias?: string  } 
  | { name: 'reviews', alias?: string  } 
  
export interface ProductUpsertWithoutVariantsInput {
  update?: ProductUpdateWithoutVariantsDataInput
  create?: ProductCreateWithoutVariantsInput
}
export type ProductUpsertWithoutVariantsInputInputObject =
  | Extract<keyof ProductUpsertWithoutVariantsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface VariantUpdateManyMutationInput {
  name?: string | null
  values?: VariantUpdatevaluesInput | null
}
export type VariantUpdateManyMutationInputInputObject =
  | Extract<keyof VariantUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'values', alias?: string  } 
  
export interface ProductReviewCreateInput {
  id?: string | null
  user?: UserCreateOneWithoutProductReviewsInput
  product?: ProductCreateOneWithoutReviewsInput
  rating?: number
  review?: string | null
}
export type ProductReviewCreateInputInputObject =
  | Extract<keyof ProductReviewCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'product', alias?: string  } 
  | { name: 'rating', alias?: string  } 
  | { name: 'review', alias?: string  } 
  
export interface ProductReviewUpdateInput {
  user?: UserUpdateOneRequiredWithoutProductReviewsInput | null
  product?: ProductUpdateOneRequiredWithoutReviewsInput | null
  rating?: number | null
  review?: string | null
}
export type ProductReviewUpdateInputInputObject =
  | Extract<keyof ProductReviewUpdateInput, string>
  | { name: 'user', alias?: string  } 
  | { name: 'product', alias?: string  } 
  | { name: 'rating', alias?: string  } 
  | { name: 'review', alias?: string  } 
  
export interface ProductReviewUpdateManyMutationInput {
  rating?: number | null
  review?: string | null
}
export type ProductReviewUpdateManyMutationInputInputObject =
  | Extract<keyof ProductReviewUpdateManyMutationInput, string>
  | { name: 'rating', alias?: string  } 
  | { name: 'review', alias?: string  } 
  
export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
  OR?: UserSubscriptionWhereInput[]
  NOT?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ForumSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ForumWhereInput | null
  AND?: ForumSubscriptionWhereInput[]
  OR?: ForumSubscriptionWhereInput[]
  NOT?: ForumSubscriptionWhereInput[]
}
export type ForumSubscriptionWhereInputInputObject =
  | Extract<keyof ForumSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ForumPostSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ForumPostWhereInput | null
  AND?: ForumPostSubscriptionWhereInput[]
  OR?: ForumPostSubscriptionWhereInput[]
  NOT?: ForumPostSubscriptionWhereInput[]
}
export type ForumPostSubscriptionWhereInputInputObject =
  | Extract<keyof ForumPostSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ForumPostCommentSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ForumPostCommentWhereInput | null
  AND?: ForumPostCommentSubscriptionWhereInput[]
  OR?: ForumPostCommentSubscriptionWhereInput[]
  NOT?: ForumPostCommentSubscriptionWhereInput[]
}
export type ForumPostCommentSubscriptionWhereInputInputObject =
  | Extract<keyof ForumPostCommentSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ShopSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ShopWhereInput | null
  AND?: ShopSubscriptionWhereInput[]
  OR?: ShopSubscriptionWhereInput[]
  NOT?: ShopSubscriptionWhereInput[]
}
export type ShopSubscriptionWhereInputInputObject =
  | Extract<keyof ShopSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ShopImageSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ShopImageWhereInput | null
  AND?: ShopImageSubscriptionWhereInput[]
  OR?: ShopImageSubscriptionWhereInput[]
  NOT?: ShopImageSubscriptionWhereInput[]
}
export type ShopImageSubscriptionWhereInputInputObject =
  | Extract<keyof ShopImageSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserImageSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserImageWhereInput | null
  AND?: UserImageSubscriptionWhereInput[]
  OR?: UserImageSubscriptionWhereInput[]
  NOT?: UserImageSubscriptionWhereInput[]
}
export type UserImageSubscriptionWhereInputInputObject =
  | Extract<keyof UserImageSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProductSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ProductWhereInput | null
  AND?: ProductSubscriptionWhereInput[]
  OR?: ProductSubscriptionWhereInput[]
  NOT?: ProductSubscriptionWhereInput[]
}
export type ProductSubscriptionWhereInputInputObject =
  | Extract<keyof ProductSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CartSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: CartWhereInput | null
  AND?: CartSubscriptionWhereInput[]
  OR?: CartSubscriptionWhereInput[]
  NOT?: CartSubscriptionWhereInput[]
}
export type CartSubscriptionWhereInputInputObject =
  | Extract<keyof CartSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CartItemSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: CartItemWhereInput | null
  AND?: CartItemSubscriptionWhereInput[]
  OR?: CartItemSubscriptionWhereInput[]
  NOT?: CartItemSubscriptionWhereInput[]
}
export type CartItemSubscriptionWhereInputInputObject =
  | Extract<keyof CartItemSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface orderItemSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: orderItemWhereInput | null
  AND?: orderItemSubscriptionWhereInput[]
  OR?: orderItemSubscriptionWhereInput[]
  NOT?: orderItemSubscriptionWhereInput[]
}
export type orderItemSubscriptionWhereInputInputObject =
  | Extract<keyof orderItemSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface OrderSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: OrderWhereInput | null
  AND?: OrderSubscriptionWhereInput[]
  OR?: OrderSubscriptionWhereInput[]
  NOT?: OrderSubscriptionWhereInput[]
}
export type OrderSubscriptionWhereInputInputObject =
  | Extract<keyof OrderSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface BrandSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: BrandWhereInput | null
  AND?: BrandSubscriptionWhereInput[]
  OR?: BrandSubscriptionWhereInput[]
  NOT?: BrandSubscriptionWhereInput[]
}
export type BrandSubscriptionWhereInputInputObject =
  | Extract<keyof BrandSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TagSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: TagWhereInput | null
  AND?: TagSubscriptionWhereInput[]
  OR?: TagSubscriptionWhereInput[]
  NOT?: TagSubscriptionWhereInput[]
}
export type TagSubscriptionWhereInputInputObject =
  | Extract<keyof TagSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CategorySubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: CategoryWhereInput | null
  AND?: CategorySubscriptionWhereInput[]
  OR?: CategorySubscriptionWhereInput[]
  NOT?: CategorySubscriptionWhereInput[]
}
export type CategorySubscriptionWhereInputInputObject =
  | Extract<keyof CategorySubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProductImageSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ProductImageWhereInput | null
  AND?: ProductImageSubscriptionWhereInput[]
  OR?: ProductImageSubscriptionWhereInput[]
  NOT?: ProductImageSubscriptionWhereInput[]
}
export type ProductImageSubscriptionWhereInputInputObject =
  | Extract<keyof ProductImageSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface VariantSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: VariantWhereInput | null
  AND?: VariantSubscriptionWhereInput[]
  OR?: VariantSubscriptionWhereInput[]
  NOT?: VariantSubscriptionWhereInput[]
}
export type VariantSubscriptionWhereInputInputObject =
  | Extract<keyof VariantSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProductReviewSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ProductReviewWhereInput | null
  AND?: ProductReviewSubscriptionWhereInput[]
  OR?: ProductReviewSubscriptionWhereInput[]
  NOT?: ProductReviewSubscriptionWhereInput[]
}
export type ProductReviewSubscriptionWhereInputInputObject =
  | Extract<keyof ProductReviewSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type ForumPostTypeValues =
  | 'POST'
  | 'MEDIA'
  | 'LINK'
  
export type ShopOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'category_ASC'
  | 'category_DESC'
  | 'live_ASC'
  | 'live_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'firebaseId_ASC'
  | 'firebaseId_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'username_ASC'
  | 'username_DESC'
  | 'profilePic_ASC'
  | 'profilePic_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'isAnonymous_ASC'
  | 'isAnonymous_DESC'
  | 'emailVerified_ASC'
  | 'emailVerified_DESC'
  
export type ShopImageOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'imageUrl_ASC'
  | 'imageUrl_DESC'
  | 'largeImageUrl_ASC'
  | 'largeImageUrl_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type ProductOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'price_ASC'
  | 'price_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type CategoryOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type TagOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type ProductImageOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'imageUrl_ASC'
  | 'imageUrl_DESC'
  | 'largeImageUrl_ASC'
  | 'largeImageUrl_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type VariantOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type ProductReviewOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'rating_ASC'
  | 'rating_DESC'
  | 'review_ASC'
  | 'review_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type UserImageOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'imageUrl_ASC'
  | 'imageUrl_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type CartItemOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'quantity_ASC'
  | 'quantity_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type ForumPostOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'content_ASC'
  | 'content_DESC'
  | 'type_ASC'
  | 'type_DESC'
  
export type ForumPostCommentOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'comment_ASC'
  | 'comment_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type ForumOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'avatarPic_ASC'
  | 'avatarPic_DESC'
  | 'coverPic_ASC'
  | 'coverPic_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type CartOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type orderItemOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'price_ASC'
  | 'price_DESC'
  | 'quantity_ASC'
  | 'quantity_DESC'
  | 'imageUrl_ASC'
  | 'imageUrl_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type OrderOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'total_ASC'
  | 'total_DESC'
  | 'paymentId_ASC'
  | 'paymentId_DESC'
  | 'PayerID_ASC'
  | 'PayerID_DESC'
  | 'imageUrl_ASC'
  | 'imageUrl_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type BrandOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  