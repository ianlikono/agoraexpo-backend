type User {
  id: ID! @id
  firebaseId: String! @unique
  email: String @unique
  name: String!
  username: String! @unique
  profilePic: String
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  isAnonymous: Boolean! @default(value: false)
  emailVerified: Boolean @default(value: false)
  shops: [Shop] @relation(name: "ShopOwners")
  images: [UserImage] @relation(name: "UserImages")
  productReviews: [ProductReview] @relation(name: "UserProductReview")
  cartItems: Cart @relation(link: INLINE)
  forumposts: [ForumPost] @relation(name: "UserForumPost")
  forums: [Forum] @relation(name: "UserForums")
  postComments: [ForumPostComment] @relation(name: "UserPostComments")
}

type Forum {
  id: ID! @id
  avatarPic: String!
    @default(
      value: "https://res.cloudinary.com/doelo01na/image/upload/c_scale,h_500,q_auto,w_500/v1556402297/defaults/no-image.webp"
    )
  coverPic: String!
    @default(
      value: "https://res.cloudinary.com/doelo01na/image/upload/c_scale,h_600,q_auto,w_1500/v1556402297/defaults/no-image.webp"
    )
  members: [User] @relation(name: "UserForums")
  posts: [ForumPost] @relation(name: "ForumPosts")
  name: String! @unique
  description: String
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

enum ForumPostType {
  POST
  MEDIA
  LINK
}

type ForumPost {
  id: ID! @id
  postedBy: User! @relation(name: "UserForumPost")
  forum: Forum! @relation(name: "ForumPosts")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  title: String!
  content: String
  type: ForumPostType!
  comments: [ForumPostComment] @relation(name: "PostComment")
}
type ForumPostComment {
  id: ID! @id
  user: User! @relation(name: "UserPostComments")
  forumPost: ForumPost! @relation(name: "PostComment")
  comment: String!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Shop {
  id: ID! @id
  name: String! @unique
  description: String!
  category: String!
  live: Boolean! @default(value: false)
  owners: [User!] @relation(name: "ShopOwners")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  images: [ShopImage] @relation(name: "ShopImages")
  products: [Product] @relation(name: "ShopProducts")
}

type ShopImage {
  id: ID! @id
  imageUrl: String!
  largeImageUrl: String
  shop: Shop @relation(name: "ShopImages")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type UserImage {
  id: ID! @id
  imageUrl: String!
  user: User @relation(name: "UserImages")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Product {
  id: ID! @id
  title: String!
  description: String!
  price: String!
  categories: [Category] @relation(name: "ProductCategories")
  brand: Brand @relation(name: "BrandProducts")
  tags: [Tag] @relation(name: "ProductTags")
  images: [ProductImage] @relation(name: "ProductImages")
  shop: Shop! @relation(name: "ShopProducts")
  variants: [Variant] @relation(name: "ProductVariants")
  reviews: [ProductReview] @relation(name: "ProductReview")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Cart {
  id: ID! @id
  user: User!
  items: [CartItem]
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type CartItem {
  id: ID! @id
  product: Product! @relation(link: INLINE)
  quantity: Int!
  variants: [String] @scalarList(strategy: RELATION)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type orderItem {
  id: ID! @id
  title: String!
  description: String!
  price: String!
  quantity: Int!
  imageUrl: String
  variants: [String] @scalarList(strategy: RELATION)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Order {
  id: ID! @id
  items: [orderItem!]!
  total: Int!
  user: User!
  paymentId: String!
  PayerID: String!
  imageUrl: String
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Brand {
  id: ID! @id
  name: String! @unique
  products: [Product] @relation(name: "BrandProducts")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Tag {
  id: ID! @id
  name: String! @unique
  products: [Product] @relation(name: "ProductTags")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Category {
  id: ID! @id
  name: String! @unique
  product: [Product] @relation(name: "ProductCategories")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type ProductImage {
  id: ID! @id
  imageUrl: String!
  largeImageUrl: String
  product: Product @relation(name: "ProductImages")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Variant {
  id: ID! @id
  product: Product! @relation(name: "ProductVariants")
  name: String!
  values: [String] @scalarList(strategy: RELATION)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type ProductReview {
  id: ID! @id
  user: User! @relation(name: "UserProductReview")
  product: Product! @relation(name: "ProductReview")
  rating: Int!
  review: String
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}
